/* 24d65aa48944e974a127c07cc890b917cc8a65b4
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

export type AbusiveReport = {
  __typename?: 'AbusiveReport';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  message: Scalars['String']['output'];
  model_id?: Maybe<Scalars['ID']['output']>;
  model_type: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user: User;
  user_id?: Maybe<Scalars['Float']['output']>;
};

export type AbusiveReportInputType = {
  message: Scalars['String']['input'];
  model_id?: InputMaybe<Scalars['ID']['input']>;
  model_type: Scalars['String']['input'];
  user: UserInputType;
  user_id?: InputMaybe<Scalars['Float']['input']>;
};

export type AcceptAbusiveReportInput = {
  created_at?: InputMaybe<Scalars['DateTime']['input']>;
  id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  model_id?: InputMaybe<Scalars['ID']['input']>;
  model_type: Scalars['String']['input'];
  updated_at?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserInputType;
  user_id?: InputMaybe<Scalars['Float']['input']>;
};

export type AddNewCardInput = {
  default_card: Scalars['Boolean']['input'];
  method_key: Scalars['String']['input'];
};

export type AddPointsInput = {
  customer_id: Scalars['ID']['input'];
  points: Scalars['Int']['input'];
};

export type AddStaffInput = {
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  shop_id: Scalars['ID']['input'];
};

export type Address = {
  __typename?: 'Address';
  address?: Maybe<UserAddress>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer?: Maybe<User>;
  default?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  location?: Maybe<GoogleMapLocation>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type AddressHasMany = {
  upsert?: InputMaybe<Array<InputMaybe<UserAddressUpsertInput>>>;
};

export type AddressInputType = {
  address?: InputMaybe<UserAddressInputType>;
  customer?: InputMaybe<UserInputType>;
  default?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<GoogleMapLocationInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export enum AddressType {
  Billing = 'BILLING',
  Shipping = 'SHIPPING'
}

export type Admin = {
  __typename?: 'Admin';
  paymentOrder?: Maybe<Scalars['Boolean']['output']>;
  refundOrder?: Maybe<Scalars['Boolean']['output']>;
  statusChangeOrder?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminInputType = {
  paymentOrder?: InputMaybe<Scalars['Boolean']['input']>;
  refundOrder?: InputMaybe<Scalars['Boolean']['input']>;
  statusChangeOrder?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Ai = {
  __typename?: 'Ai';
  result: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type AiInput = {
  prompt: Scalars['String']['input'];
};

export type AllInput = {
  __typename?: 'AllInput';
  all?: Maybe<PushNotification>;
};

export type AllInputInput = {
  all?: InputMaybe<PushNotificationInput>;
};

export type Analytics = {
  __typename?: 'Analytics';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  monthlyTotalOrderByStatus?: Maybe<OrderByStatus>;
  newCustomers?: Maybe<Scalars['Int']['output']>;
  todayTotalOrderByStatus?: Maybe<OrderByStatus>;
  todaysRevenue?: Maybe<Scalars['Float']['output']>;
  totalOrders?: Maybe<Scalars['Int']['output']>;
  totalRefunds?: Maybe<Scalars['Float']['output']>;
  totalRevenue?: Maybe<Scalars['Float']['output']>;
  totalShops?: Maybe<Scalars['Float']['output']>;
  totalVendors?: Maybe<Scalars['Float']['output']>;
  totalYearSaleByMonth?: Maybe<Array<TotalYearSaleByMonth>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  weeklyTotalOrderByStatus?: Maybe<OrderByStatus>;
  yearlyTotalOrderByStatus?: Maybe<OrderByStatus>;
};

export type ApproveShopInput = {
  admin_commission_rate?: InputMaybe<Scalars['Float']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ApproveWithdrawInput = {
  id: Scalars['ID']['input'];
  status?: InputMaybe<WithdrawStatus>;
};

export type Attachment = {
  __typename?: 'Attachment';
  id?: Maybe<Scalars['ID']['output']>;
  original?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<Scalars['String']['output']>;
};

export type AttachmentInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  original?: InputMaybe<Scalars['String']['input']>;
  thumbnail?: InputMaybe<Scalars['String']['input']>;
};

export type Attribute = {
  __typename?: 'Attribute';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  language?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  shop: Shop;
  shop_id: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  translated_languages: Array<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  values: Array<AttributeValue>;
};

export type AttributeInputType = {
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  shop: ShopInputType;
  shop_id: Scalars['String']['input'];
  slug: Scalars['String']['input'];
  translated_languages: Array<Scalars['String']['input']>;
  values: Array<AttributeValueInputType>;
};

export type AttributeValue = {
  __typename?: 'AttributeValue';
  attribute: Attribute;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  meta?: Maybe<Scalars['String']['output']>;
  shop_id: Scalars['Int']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  value: Scalars['String']['output'];
};

export type AttributeValueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  meta?: InputMaybe<Scalars['String']['input']>;
  value: Scalars['String']['input'];
};

export type AttributeValueInputType = {
  attribute: AttributeInputType;
  meta?: InputMaybe<Scalars['String']['input']>;
  shop_id: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type AuthResponse = {
  __typename?: 'AuthResponse';
  permissions: Array<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  token: Scalars['String']['output'];
};

export type Author = {
  __typename?: 'Author';
  bio?: Maybe<Scalars['String']['output']>;
  born?: Maybe<Scalars['String']['output']>;
  cover_image?: Maybe<Attachment>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  death?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  is_approved?: Maybe<Scalars['Boolean']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  languages?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  products_count?: Maybe<Scalars['Int']['output']>;
  quote?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  socials?: Maybe<Array<ShopSocials>>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type AuthorInputType = {
  bio?: InputMaybe<Scalars['String']['input']>;
  born?: InputMaybe<Scalars['String']['input']>;
  cover_image?: InputMaybe<AttachmentInput>;
  death?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  languages?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  products_count?: InputMaybe<Scalars['Int']['input']>;
  quote?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type AuthorPaginator = {
  __typename?: 'AuthorPaginator';
  data: Array<Author>;
  paginatorInfo: PaginatorInfo;
};

export type Balance = {
  __typename?: 'Balance';
  admin_commission_rate: Scalars['Float']['output'];
  current_balance: Scalars['Float']['output'];
  id?: Maybe<Scalars['ID']['output']>;
  payment_info?: Maybe<PaymentInfo>;
  shop: Shop;
  total_earnings: Scalars['Float']['output'];
  withdrawn_amount: Scalars['Float']['output'];
};

export type BalanceInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  payment_info?: InputMaybe<PaymentInfoInput>;
};

export type BalanceInputType = {
  admin_commission_rate: Scalars['Float']['input'];
  current_balance: Scalars['Float']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  payment_info?: InputMaybe<PaymentInfoInput>;
  shop: ShopInputType;
  total_earnings: Scalars['Float']['input'];
  withdrawn_amount: Scalars['Float']['input'];
};

export type Banner = {
  __typename?: 'Banner';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type BannerInputType = {
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type Card = {
  __typename?: 'Card';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  default_card: Scalars['Boolean']['output'];
  expires?: Maybe<Scalars['String']['output']>;
  fingerprint?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  last4?: Maybe<Scalars['String']['output']>;
  method_key: Scalars['String']['output'];
  network?: Maybe<Scalars['String']['output']>;
  origin?: Maybe<Scalars['String']['output']>;
  owner_name?: Maybe<Scalars['String']['output']>;
  payment_gateway_id?: Maybe<Scalars['Float']['output']>;
  payment_gateways?: Maybe<PaymentGateWay>;
  type?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  verification_check?: Maybe<Scalars['String']['output']>;
};

export type CardInput = {
  cvv: Scalars['String']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  expiryMonth: Scalars['String']['input'];
  expiryYear: Scalars['String']['input'];
  number: Scalars['String']['input'];
};

export type Category = {
  __typename?: 'Category';
  children?: Maybe<Array<Maybe<Category>>>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  details?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  language: Scalars['String']['output'];
  name: Scalars['String']['output'];
  parent?: Maybe<Category>;
  parent_id?: Maybe<Scalars['ID']['output']>;
  products?: Maybe<Array<Maybe<Product>>>;
  products_count?: Maybe<Scalars['Int']['output']>;
  slug: Scalars['String']['output'];
  sub_categories?: Maybe<Array<Maybe<Category>>>;
  translated_languages: Array<Scalars['String']['output']>;
  type?: Maybe<Type>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CategoryInputType = {
  children?: InputMaybe<Array<InputMaybe<CategoryInputType>>>;
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language: Scalars['String']['input'];
  name: Scalars['String']['input'];
  parent?: InputMaybe<CategoryInputType>;
  parent_id?: InputMaybe<Scalars['ID']['input']>;
  products?: InputMaybe<Array<InputMaybe<ProductInputType>>>;
  products_count?: InputMaybe<Scalars['Int']['input']>;
  slug: Scalars['String']['input'];
  sub_categories?: InputMaybe<Array<InputMaybe<CategoryInputType>>>;
  translated_languages: Array<Scalars['String']['input']>;
  type?: InputMaybe<TypeInputType>;
};

export type CategoryPaginator = {
  __typename?: 'CategoryPaginator';
  data: Array<Category>;
  paginatorInfo: PaginatorInfo;
};

export type CategoryWiseProduct = {
  __typename?: 'CategoryWiseProduct';
  category_id?: Maybe<Scalars['ID']['output']>;
  category_name?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  product_count?: Maybe<Scalars['Int']['output']>;
  shop_name?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CategoryWiseProductSale = {
  __typename?: 'CategoryWiseProductSale';
  category_id?: Maybe<Scalars['ID']['output']>;
  category_name?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  shop_name?: Maybe<Scalars['String']['output']>;
  total_sales?: Maybe<Scalars['Int']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type ChangePasswordInput = {
  newPassword: Scalars['String']['input'];
  oldPassword: Scalars['String']['input'];
};

export type CheckoutVerificationInput = {
  amount: Scalars['Float']['input'];
  billing_address?: InputMaybe<UserAddressInput>;
  customer_id?: InputMaybe<Scalars['String']['input']>;
  products: Array<ConnectProductOrderPivot>;
  shipping_address?: InputMaybe<UserAddressInput>;
};

export type CompactBestSellingInput = {
  __typename?: 'CompactBestSellingInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactBestSellingInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoAuthorsInput = {
  __typename?: 'CompactDemoAuthorsInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoAuthorsInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoCategoryInput = {
  __typename?: 'CompactDemoCategoryInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoCategoryInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoHandpickedProductsInput = {
  __typename?: 'CompactDemoHandpickedProductsInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  enableSlider?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  products?: Maybe<Array<CompactProductInput>>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoHandpickedProductsInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  enableSlider?: InputMaybe<Scalars['Boolean']['input']>;
  products?: InputMaybe<Array<CompactProductInputType>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoManufacturesInput = {
  __typename?: 'CompactDemoManufacturesInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoManufacturesInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoNewArrivalInput = {
  __typename?: 'CompactDemoNewArrivalInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoNewArrivalInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactDemoPopularProductsInput = {
  __typename?: 'CompactDemoPopularProductsInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactDemoPopularProductsInputType = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CompactProductInput = {
  __typename?: 'CompactProductInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  external_product_url?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  is_external?: Maybe<Scalars['Boolean']['output']>;
  max_price?: Maybe<Scalars['Float']['output']>;
  min_price?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  product_type?: Maybe<Scalars['String']['output']>;
  quantity?: Maybe<Scalars['Int']['output']>;
  regular_price?: Maybe<Scalars['Float']['output']>;
  sale_price?: Maybe<Scalars['Float']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CompactTypeSettingsInput>;
  unit?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactProductInputType = {
  external_product_url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  is_external?: InputMaybe<Scalars['Boolean']['input']>;
  max_price?: InputMaybe<Scalars['Float']['input']>;
  min_price?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  quantity?: InputMaybe<Scalars['Int']['input']>;
  regular_price?: InputMaybe<Scalars['Float']['input']>;
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<CompactTypeSettingsInputType>;
  unit?: InputMaybe<Scalars['String']['input']>;
};

export type CompactTypeProductCardInput = {
  __typename?: 'CompactTypeProductCardInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  productCard?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactTypeProductCardInputType = {
  productCard?: InputMaybe<Scalars['String']['input']>;
};

export type CompactTypeSettingsInput = {
  __typename?: 'CompactTypeSettingsInput';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  settings?: Maybe<CompactTypeProductCardInput>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type CompactTypeSettingsInputType = {
  settings?: InputMaybe<CompactTypeProductCardInputType>;
};

export type ConnectBelongsTo = {
  connect: Scalars['ID']['input'];
};

export type ConnectProductOrderPivot = {
  order_quantity?: InputMaybe<Scalars['Int']['input']>;
  product_id: Scalars['ID']['input'];
  subtotal?: InputMaybe<Scalars['Float']['input']>;
  unit_price?: InputMaybe<Scalars['Float']['input']>;
  variation_option_id?: InputMaybe<Scalars['ID']['input']>;
};

export type ConnectTypeBelongsTo = {
  connect: Scalars['ID']['input'];
};

export type ContactDetails = {
  __typename?: 'ContactDetails';
  contact?: Maybe<Scalars['String']['output']>;
  emailAddress?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Location>;
  socials?: Maybe<Array<ShopSocials>>;
  website?: Maybe<Scalars['String']['output']>;
};

export type ContactDetailsInput = {
  contact?: InputMaybe<Scalars['String']['input']>;
  emailAddress?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<LocationInput>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type ContactInput = {
  description: Scalars['String']['input'];
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  subject: Scalars['String']['input'];
};

export type ContactResponse = {
  __typename?: 'ContactResponse';
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

export type Conversation = {
  __typename?: 'Conversation';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  latest_message?: Maybe<Message>;
  shop?: Maybe<Shop>;
  shop_id: Scalars['ID']['output'];
  unseen: Scalars['Boolean']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user?: Maybe<User>;
  user_id: Scalars['ID']['output'];
};

export type ConversationPaginator = {
  __typename?: 'ConversationPaginator';
  data: Array<Conversation>;
  paginatorInfo: PaginatorInfo;
};

export type Coupon = {
  __typename?: 'Coupon';
  active_from: Scalars['String']['output'];
  amount?: Maybe<Scalars['Float']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  expire_at: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  is_approve?: Maybe<Scalars['Boolean']['output']>;
  is_valid?: Maybe<Scalars['Boolean']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  minimum_cart_amount?: Maybe<Scalars['Float']['output']>;
  orders?: Maybe<Array<Order>>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  sub_total?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Boolean']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type CouponInputType = {
  active_from: Scalars['String']['input'];
  amount?: InputMaybe<Scalars['Float']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  expire_at: Scalars['String']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_approve?: InputMaybe<Scalars['Boolean']['input']>;
  is_valid?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  minimum_cart_amount?: InputMaybe<Scalars['Float']['input']>;
  orders?: InputMaybe<Array<OrderInputType>>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sub_total?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Boolean']['input']>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CouponPaginator = {
  __typename?: 'CouponPaginator';
  data: Array<Coupon>;
  paginatorInfo: PaginatorInfo;
};

export type CreateAbusiveReportInput = {
  message: Scalars['String']['input'];
  model_id?: InputMaybe<Scalars['ID']['input']>;
  model_type: Scalars['String']['input'];
  user_id?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateAddressInput = {
  address?: InputMaybe<UserAddressInputType>;
  customer?: InputMaybe<UserInputType>;
  default?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type CreateAttributeInput = {
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  shop_id: Scalars['String']['input'];
  values: Array<AttributeValueInput>;
};

export type CreateAuthorInput = {
  bio?: InputMaybe<Scalars['String']['input']>;
  born?: InputMaybe<Scalars['String']['input']>;
  cover_image?: InputMaybe<AttachmentInput>;
  death?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  languages?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  products_count?: InputMaybe<Scalars['Int']['input']>;
  quote?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
};

export type CreateCategoryInput = {
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  parent?: InputMaybe<Scalars['ID']['input']>;
  slug: Scalars['String']['input'];
  type?: InputMaybe<ConnectTypeBelongsTo>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateConversationInput = {
  shop_id: Scalars['ID']['input'];
};

export type CreateCouponInput = {
  active_from: Scalars['String']['input'];
  amount?: InputMaybe<Scalars['Float']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  expire_at: Scalars['String']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_approve?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  minimum_cart_amount?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  target?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateFaqInput = {
  faq_description?: InputMaybe<Scalars['String']['input']>;
  faq_title?: InputMaybe<Scalars['String']['input']>;
  faq_type?: InputMaybe<Scalars['String']['input']>;
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateFeedbackInput = {
  model_id: Scalars['ID']['input'];
  model_type: Scalars['String']['input'];
  negative?: InputMaybe<Scalars['Boolean']['input']>;
  positive?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreateFlashSaleInput = {
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  end_date?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  rate?: InputMaybe<Scalars['Float']['input']>;
  sale_builder?: InputMaybe<SaleBuilderInput>;
  sale_status?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  start_date?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type CreateFlashSaleRequestInput = {
  flash_sale_id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  requested_product_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateManufacturerInput = {
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  products_count?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type CreateMessageInput = {
  conversation_id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
};

export type CreateOrderInput = {
  amount: Scalars['Float']['input'];
  billing_address: UserAddressInput;
  card?: InputMaybe<CardInput>;
  coupon_id?: InputMaybe<Scalars['ID']['input']>;
  customer_contact: Scalars['String']['input'];
  customer_id?: InputMaybe<Scalars['ID']['input']>;
  customer_name?: InputMaybe<Scalars['String']['input']>;
  delivery_fee?: InputMaybe<Scalars['Float']['input']>;
  delivery_time: Scalars['String']['input'];
  discount?: InputMaybe<Scalars['Float']['input']>;
  isFullWalletPayment?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  order_status?: InputMaybe<Scalars['String']['input']>;
  paid_total: Scalars['Float']['input'];
  payment_gateway: PaymentGatewayType;
  payment_sub_gateway?: InputMaybe<Scalars['String']['input']>;
  products: Array<ConnectProductOrderPivot>;
  sales_tax: Scalars['Float']['input'];
  shipping_address: UserAddressInput;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  total: Scalars['Float']['input'];
  use_wallet_points?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreateOrderPaymentInput = {
  payment_gateway: Scalars['String']['input'];
  tracking_number: Scalars['String']['input'];
};

export type CreateOrderStatusInput = {
  color: Scalars['String']['input'];
  language: Scalars['String']['input'];
  name: Scalars['String']['input'];
  serial: Scalars['Int']['input'];
};

export type CreateProductInput = {
  author?: InputMaybe<AuthorInputType>;
  author_id?: InputMaybe<Scalars['ID']['input']>;
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  description?: InputMaybe<Scalars['String']['input']>;
  external_product_button_text?: InputMaybe<Scalars['String']['input']>;
  external_product_url?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<AttachmentInput>>;
  height?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  in_flash_sale?: InputMaybe<Scalars['Int']['input']>;
  in_stock?: InputMaybe<Scalars['Boolean']['input']>;
  is_digital?: InputMaybe<Scalars['Boolean']['input']>;
  is_external?: InputMaybe<Scalars['Boolean']['input']>;
  is_taxable?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  length?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<ManufacturerInputType>;
  manufacturer_id?: InputMaybe<Scalars['ID']['input']>;
  max_price?: InputMaybe<Scalars['Float']['input']>;
  min_price?: InputMaybe<Scalars['Float']['input']>;
  my_review?: InputMaybe<Array<ReviewInputType>>;
  name: Scalars['String']['input'];
  price?: InputMaybe<Scalars['Float']['input']>;
  product_type: ProductType;
  quantity: Scalars['Int']['input'];
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
  sold_quantity?: InputMaybe<Scalars['Int']['input']>;
  status: ProductStatus;
  tags?: InputMaybe<Array<Scalars['ID']['input']>>;
  type_id: Scalars['ID']['input'];
  unit: Scalars['String']['input'];
  variation_options?: InputMaybe<UpsertVariationsHasMany>;
  variations?: InputMaybe<Array<AttributeValueInputType>>;
  video?: InputMaybe<Array<VideoInputType>>;
  width?: InputMaybe<Scalars['String']['input']>;
};

export type CreateQuestionInput = {
  answer?: InputMaybe<Scalars['String']['input']>;
  feedbacks?: InputMaybe<Array<FeedbackInputType>>;
  my_feedback?: InputMaybe<FeedbackInputType>;
  negative_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  positive_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  product_id?: InputMaybe<Scalars['ID']['input']>;
  question?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  user_id?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateRefundInput = {
  description: Scalars['String']['input'];
  images?: InputMaybe<Array<AttachmentInput>>;
  order_id: Scalars['ID']['input'];
  title: Scalars['String']['input'];
};

export type CreateRefundPolicyInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateRefundReasonInput = {
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type CreateReviewInput = {
  comment: Scalars['String']['input'];
  order_id: Scalars['String']['input'];
  photos?: InputMaybe<Array<AttachmentInput>>;
  product_id: Scalars['String']['input'];
  rating: Scalars['Float']['input'];
  shop_id: Scalars['String']['input'];
  variation_option_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateShippingInput = {
  amount: Scalars['Float']['input'];
  is_global?: Scalars['Boolean']['input'];
  name: Scalars['String']['input'];
  type: ShippingType;
};

export type CreateShopInput = {
  address?: InputMaybe<UserAddressInputType>;
  balance?: InputMaybe<BalanceInput>;
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<AttachmentInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  settings?: InputMaybe<ShopSettingsInputType>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type CreateStoreNoticeInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['String']['input']>;
  expired_at: Scalars['String']['input'];
  notice: Scalars['String']['input'];
  priority: Scalars['String']['input'];
  received_by?: InputMaybe<Array<Scalars['Float']['input']>>;
  type: Scalars['String']['input'];
};

export type CreateTagInput = {
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  slug: Scalars['String']['input'];
  type?: InputMaybe<ConnectTypeBelongsTo>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateTaxInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  is_global?: Scalars['Boolean']['input'];
  name: Scalars['String']['input'];
  on_shipping?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  rate: Scalars['Float']['input'];
  state?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type CreateTermsConditionsInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  type?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateTypeInput = {
  banners?: InputMaybe<Array<BannerInputType>>;
  icon?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  promotional_sliders?: InputMaybe<Array<AttachmentInput>>;
  settings?: InputMaybe<TypeSettingsInput>;
};

export type CreateWishlistInput = {
  product_id: Scalars['ID']['input'];
};

export type CreateWithdrawInput = {
  amount: Scalars['Float']['input'];
  details: Scalars['String']['input'];
  note: Scalars['String']['input'];
  payment_method: Scalars['String']['input'];
  shop_id: Scalars['ID']['input'];
};

export type CurrencyOptions = {
  __typename?: 'CurrencyOptions';
  formation: Scalars['String']['output'];
  fractions: Scalars['Float']['output'];
};

export type CurrencyOptionsInputType = {
  formation: Scalars['String']['input'];
  fractions: Scalars['Float']['input'];
};

export type Customer = {
  __typename?: 'Customer';
  answerQuestion?: Maybe<Scalars['Boolean']['output']>;
  paymentOrder?: Maybe<Scalars['Boolean']['output']>;
  refundOrder?: Maybe<Scalars['Boolean']['output']>;
  statusChangeOrder?: Maybe<Scalars['Boolean']['output']>;
};

export type CustomerInputType = {
  answerQuestion?: InputMaybe<Scalars['Boolean']['input']>;
  paymentOrder?: InputMaybe<Scalars['Boolean']['input']>;
  refundOrder?: InputMaybe<Scalars['Boolean']['input']>;
  statusChangeOrder?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DeliveryTime = {
  __typename?: 'DeliveryTime';
  description: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type DeliveryTimeInputType = {
  description: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

export type DigitalFile = {
  __typename?: 'DigitalFile';
  attachment_id: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  fileable?: Maybe<FileableUnion>;
  id: Scalars['ID']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  url: Scalars['String']['output'];
};

export type EventSettings = {
  __typename?: 'EventSettings';
  admin?: Maybe<Admin>;
  customer?: Maybe<Customer>;
  vendor?: Maybe<Vendor>;
};

export type EventSettingsInputType = {
  admin?: InputMaybe<AdminInputType>;
  customer?: InputMaybe<CustomerInputType>;
  vendor?: InputMaybe<VendorInputType>;
};

export type FacebookSettings = {
  __typename?: 'FacebookSettings';
  appId?: Maybe<Scalars['String']['output']>;
  isEnable?: Maybe<Scalars['Boolean']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
};

export type FacebookSettingsInputType = {
  appId?: InputMaybe<Scalars['String']['input']>;
  isEnable?: InputMaybe<Scalars['Boolean']['input']>;
  pageId?: InputMaybe<Scalars['String']['input']>;
};

export type FaqPaginator = {
  __typename?: 'FaqPaginator';
  data: Array<Faqs>;
  paginatorInfo: PaginatorInfo;
};

export type Faqs = {
  __typename?: 'Faqs';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  faq_description?: Maybe<Scalars['String']['output']>;
  faq_title?: Maybe<Scalars['String']['output']>;
  faq_type?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  issued_by?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  shop?: Maybe<Shop>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type Feedback = {
  __typename?: 'Feedback';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  model_id: Scalars['ID']['output'];
  model_type: Scalars['String']['output'];
  negative?: Maybe<Scalars['Boolean']['output']>;
  positive?: Maybe<Scalars['Boolean']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user_id: Scalars['String']['output'];
};

export type FeedbackInputType = {
  model_id: Scalars['ID']['input'];
  model_type: Scalars['String']['input'];
  negative?: InputMaybe<Scalars['Boolean']['input']>;
  positive?: InputMaybe<Scalars['Boolean']['input']>;
  user_id: Scalars['String']['input'];
};

export type FileableUnion = Product | Variation;

export type FlashSale = {
  __typename?: 'FlashSale';
  cover_image?: Maybe<Attachment>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  end_date?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  language?: Maybe<Scalars['String']['output']>;
  products?: Maybe<Array<Product>>;
  rate?: Maybe<Scalars['Float']['output']>;
  sale_builder?: Maybe<SaleBuilder>;
  sale_status?: Maybe<Scalars['Boolean']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  start_date?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type FlashSalePaginator = {
  __typename?: 'FlashSalePaginator';
  data: Array<FlashSale>;
  paginatorInfo: PaginatorInfo;
};

export type FlashSaleRequestPaginator = {
  __typename?: 'FlashSaleRequestPaginator';
  data: Array<FlashSaleRequests>;
  paginatorInfo: PaginatorInfo;
};

export type FlashSaleRequests = {
  __typename?: 'FlashSaleRequests';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  deleted_at?: Maybe<Scalars['String']['output']>;
  flash_sale?: Maybe<FlashSale>;
  flash_sale_id?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  language?: Maybe<Scalars['String']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  request_status?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type ForgetPasswordInput = {
  email: Scalars['String']['input'];
};

export type GenerateDownloadableUrlInput = {
  digital_file_id?: InputMaybe<Scalars['ID']['input']>;
};

export type GenerateInvoiceDownloadUrlInput = {
  is_rtl?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  order_id: Scalars['ID']['input'];
  translated_languages?: InputMaybe<InvoiceTranslatedLanguages>;
};

export type GenerateOrderExportUrlInput = {
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};

export type GoogleMapLocation = {
  __typename?: 'GoogleMapLocation';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  formattedAddress?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['Float']['output']>;
  lng?: Maybe<Scalars['Float']['output']>;
  route?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  street_address?: Maybe<Scalars['String']['output']>;
  street_number?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

export type GoogleMapLocationInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  formattedAddress?: InputMaybe<Scalars['String']['input']>;
  lat?: InputMaybe<Scalars['Float']['input']>;
  lng?: InputMaybe<Scalars['Float']['input']>;
  route?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  street_address?: InputMaybe<Scalars['String']['input']>;
  street_number?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type GoogleSettings = {
  __typename?: 'GoogleSettings';
  isEnable?: Maybe<Scalars['Boolean']['output']>;
  tagManagerId?: Maybe<Scalars['String']['output']>;
};

export type GoogleSettingsInputType = {
  isEnable?: InputMaybe<Scalars['Boolean']['input']>;
  tagManagerId?: InputMaybe<Scalars['String']['input']>;
};

export type InvoiceTranslatedLanguages = {
  amount_due?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  delivery_fee?: InputMaybe<Scalars['String']['input']>;
  discount?: InputMaybe<Scalars['String']['input']>;
  invoice_no?: InputMaybe<Scalars['String']['input']>;
  paid_from_wallet?: InputMaybe<Scalars['String']['input']>;
  products?: InputMaybe<Scalars['String']['input']>;
  quantity?: InputMaybe<Scalars['String']['input']>;
  subtotal?: InputMaybe<Scalars['String']['input']>;
  tax?: InputMaybe<Scalars['String']['input']>;
  total?: InputMaybe<Scalars['String']['input']>;
};

export type Location = {
  __typename?: 'Location';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  formattedAddress?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['Float']['output']>;
  lng?: Maybe<Scalars['Float']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  street_address?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

export type LocationInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  formattedAddress?: InputMaybe<Scalars['String']['input']>;
  lat?: InputMaybe<Scalars['Float']['input']>;
  lng?: InputMaybe<Scalars['Float']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  street_address?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type LoginInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

export type Maintenance = {
  __typename?: 'Maintenance';
  aboutUsDescription?: Maybe<Scalars['String']['output']>;
  aboutUsTitle?: Maybe<Scalars['String']['output']>;
  buttonTitleOne?: Maybe<Scalars['String']['output']>;
  buttonTitleTwo?: Maybe<Scalars['String']['output']>;
  contactUsTitle?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Attachment>;
  isOverlayColor?: Maybe<Scalars['Boolean']['output']>;
  newsLetterDescription?: Maybe<Scalars['String']['output']>;
  newsLetterTitle?: Maybe<Scalars['String']['output']>;
  overlayColor?: Maybe<Scalars['String']['output']>;
  overlayColorRange?: Maybe<Scalars['String']['output']>;
  start?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  until?: Maybe<Scalars['String']['output']>;
};

export type MaintenanceInput = {
  aboutUsDescription?: InputMaybe<Scalars['String']['input']>;
  aboutUsTitle?: InputMaybe<Scalars['String']['input']>;
  buttonTitleOne?: InputMaybe<Scalars['String']['input']>;
  buttonTitleTwo?: InputMaybe<Scalars['String']['input']>;
  contactUsTitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  isOverlayColor?: InputMaybe<Scalars['Boolean']['input']>;
  newsLetterDescription?: InputMaybe<Scalars['String']['input']>;
  newsLetterTitle?: InputMaybe<Scalars['String']['input']>;
  overlayColor?: InputMaybe<Scalars['String']['input']>;
  overlayColorRange?: InputMaybe<Scalars['String']['input']>;
  start?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  until?: InputMaybe<Scalars['String']['input']>;
};

export type MakeOrRevokeAdminInput = {
  user_id: Scalars['ID']['input'];
};

export type Manufacturer = {
  __typename?: 'Manufacturer';
  cover_image?: Maybe<Attachment>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  is_approved?: Maybe<Scalars['Boolean']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  products_count?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  socials?: Maybe<Array<ShopSocials>>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  type: Type;
  type_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

export type ManufacturerInputType = {
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  products_count?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
  type: TypeInputType;
  type_id?: InputMaybe<Scalars['ID']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type ManufacturerPaginator = {
  __typename?: 'ManufacturerPaginator';
  data: Array<Manufacturer>;
  paginatorInfo: PaginatorInfo;
};

export type Message = {
  __typename?: 'Message';
  body?: Maybe<Scalars['String']['output']>;
  conversation?: Maybe<Conversation>;
  conversation_id: Scalars['ID']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user?: Maybe<User>;
  user_id: Scalars['ID']['output'];
};

export type MessagePaginator = {
  __typename?: 'MessagePaginator';
  data: Array<Message>;
  paginatorInfo: PaginatorInfo;
};

export type Mutation = {
  __typename?: 'Mutation';
  activeUser: User;
  addNewCard: Card;
  addPoints: Scalars['Boolean']['output'];
  addStaff: Scalars['Boolean']['output'];
  approveCoupon: Coupon;
  approveFlashSaleRequest: FlashSaleRequests;
  approveShop: Shop;
  approveTermsConditions: TermsAndConditions;
  approveWithdraw: Withdraw;
  banUser: User;
  changePassword: PasswordChangeResponse;
  contactUs: ContactResponse;
  createAbusiveReport: AbusiveReport;
  createAddress: Address;
  createAttribute: Attribute;
  createAuthor: Author;
  createCategory: Category;
  createConversation: Conversation;
  createCoupon: Coupon;
  createFaq: Faqs;
  createFeedback: Feedback;
  createFlashSale: FlashSale;
  createFlashSaleRequest: FlashSaleRequests;
  createManufacturer: Manufacturer;
  createMessage: Message;
  createOrder: Order;
  createOrderPayment: Scalars['Boolean']['output'];
  createOrderStatus: OrderStatus;
  createProduct: Product;
  createProfile: Profile;
  createQuestion: Question;
  createRefund: Refund;
  createRefundPolicy: RefundPolicy;
  createRefundReason: RefundReason;
  createReview: Review;
  createShipping: Shipping;
  createShop: Shop;
  createStoreNotice: StoreNotice;
  createTag: Tag;
  createTax: Tax;
  createTermsConditions: TermsAndConditions;
  createType: Type;
  createWithdraw: Withdraw;
  deleteAddress: Address;
  deleteAttribute: Attribute;
  deleteAuthor: Author;
  deleteCard: Scalars['Boolean']['output'];
  deleteCategory: Category;
  deleteCoupon: Coupon;
  deleteFaq: Faqs;
  deleteFlashSale: FlashSale;
  deleteFlashSaleRequest: FlashSaleRequests;
  deleteManufacturer: Manufacturer;
  deleteNotifyLog: NotifyLogs;
  deleteOrder: Order;
  deleteOrderStatus: OrderStatus;
  deleteProduct: Product;
  deleteProfile: Profile;
  deleteQuestion: Question;
  deleteRefund: Refund;
  deleteRefundPolicy: RefundPolicy;
  deleteRefundReason: RefundReason;
  deleteReview: Review;
  deleteShipping: Shipping;
  deleteShop: Shop;
  deleteStoreNotice: StoreNotice;
  deleteTag: Tag;
  deleteTax: Tax;
  deleteTermsConditions: TermsAndConditions;
  deleteType: Type;
  deleteWishlist: Scalars['Boolean']['output'];
  deleteWithdraw: Withdraw;
  disApproveFlashSaleRequest: FlashSaleRequests;
  disApproveTermsConditions: TermsAndConditions;
  disapproveCoupon: Coupon;
  disapproveShop: Shop;
  forgetPassword: PasswordChangeResponse;
  generateDescriptions: Ai;
  generateDownloadableUrl: Scalars['String']['output'];
  generateInvoiceDownloadUrl: Scalars['String']['output'];
  generateOrderExportUrl: Scalars['String']['output'];
  importAttributes: Scalars['Boolean']['output'];
  importProducts: Scalars['Boolean']['output'];
  importVariationOptions: Scalars['Boolean']['output'];
  licenseKeyValidation: Scalars['Boolean']['output'];
  login: AuthResponse;
  logout: Scalars['Boolean']['output'];
  makeOrRevokeAdmin: Scalars['Boolean']['output'];
  notifyLogAllRead: Array<NotifyLogs>;
  otpLogin: AuthResponse;
  readAllNotice: StoreNoticeUserPivot;
  readNotice: StoreNoticeUserPivot;
  readNotifyLogs: NotifyLogs;
  register: AuthResponse;
  rejectAbusiveReport: AbusiveReport;
  removeStaff: User;
  removeUser: User;
  resendVerificationEmail: SuccessResponse;
  resetPassword: PasswordChangeResponse;
  savePaymentMethod: Card;
  seenMessage: Scalars['Boolean']['output'];
  sendOtpCode: OtpResponse;
  setDefaultPaymentMethod: Card;
  socialLogin: AuthResponse;
  subscribeToNewsletter: Scalars['Boolean']['output'];
  toggleWishlist: Scalars['Boolean']['output'];
  updateAddress: Address;
  updateAttribute: Attribute;
  updateAuthor: Author;
  updateCard: Card;
  updateCategory: Category;
  updateCoupon: Coupon;
  updateFaq: Faqs;
  updateFlashSale: FlashSale;
  updateFlashSaleRequest: FlashSaleRequests;
  updateManufacturer: Manufacturer;
  updateOrder: Order;
  updateOrderStatus: OrderStatus;
  updateProduct: Product;
  updateProfile: Profile;
  updateQuestion: Question;
  updateRefund: Refund;
  updateRefundPolicy: RefundPolicy;
  updateRefundReason: RefundReason;
  updateReview: Review;
  updateSettings: Settings;
  updateShipping: Shipping;
  updateShop: Shop;
  updateStoreNotice: StoreNotice;
  updateTag: Tag;
  updateTax: Tax;
  updateTermsConditions: TermsAndConditions;
  updateType: Type;
  updateUser: User;
  updateUserEmail: SuccessResponse;
  upload: Array<Attachment>;
  verifyCheckout: VerifiedCheckoutData;
  verifyCoupon: VerifyCouponResponse;
  verifyForgetPasswordToken: PasswordChangeResponse;
  verifyOtpCode: SuccessResponse;
};


export type MutationActiveUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationAddNewCardArgs = {
  input: AddNewCardInput;
};


export type MutationAddPointsArgs = {
  input: AddPointsInput;
};


export type MutationAddStaffArgs = {
  input: AddStaffInput;
};


export type MutationApproveCouponArgs = {
  id: Scalars['ID']['input'];
};


export type MutationApproveFlashSaleRequestArgs = {
  id: Scalars['ID']['input'];
};


export type MutationApproveShopArgs = {
  input: ApproveShopInput;
};


export type MutationApproveTermsConditionsArgs = {
  id: Scalars['ID']['input'];
};


export type MutationApproveWithdrawArgs = {
  input: ApproveWithdrawInput;
};


export type MutationBanUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationChangePasswordArgs = {
  input: ChangePasswordInput;
};


export type MutationContactUsArgs = {
  input?: InputMaybe<ContactInput>;
};


export type MutationCreateAbusiveReportArgs = {
  input: CreateAbusiveReportInput;
};


export type MutationCreateAddressArgs = {
  input: CreateAddressInput;
};


export type MutationCreateAttributeArgs = {
  input: CreateAttributeInput;
};


export type MutationCreateAuthorArgs = {
  input: CreateAuthorInput;
};


export type MutationCreateCategoryArgs = {
  input: CreateCategoryInput;
};


export type MutationCreateConversationArgs = {
  input: CreateConversationInput;
};


export type MutationCreateCouponArgs = {
  input: CreateCouponInput;
};


export type MutationCreateFaqArgs = {
  input: CreateFaqInput;
};


export type MutationCreateFeedbackArgs = {
  input: CreateFeedbackInput;
};


export type MutationCreateFlashSaleArgs = {
  input: CreateFlashSaleInput;
};


export type MutationCreateFlashSaleRequestArgs = {
  input: CreateFlashSaleRequestInput;
};


export type MutationCreateManufacturerArgs = {
  input: CreateManufacturerInput;
};


export type MutationCreateMessageArgs = {
  input: CreateMessageInput;
};


export type MutationCreateOrderArgs = {
  input: CreateOrderInput;
};


export type MutationCreateOrderPaymentArgs = {
  input: CreateOrderPaymentInput;
};


export type MutationCreateOrderStatusArgs = {
  input: CreateOrderStatusInput;
};


export type MutationCreateProductArgs = {
  input: CreateProductInput;
};


export type MutationCreateProfileArgs = {
  input: ProfileInput;
};


export type MutationCreateQuestionArgs = {
  input: CreateQuestionInput;
};


export type MutationCreateRefundArgs = {
  input: CreateRefundInput;
};


export type MutationCreateRefundPolicyArgs = {
  input: CreateRefundPolicyInput;
};


export type MutationCreateRefundReasonArgs = {
  input: CreateRefundReasonInput;
};


export type MutationCreateReviewArgs = {
  input: CreateReviewInput;
};


export type MutationCreateShippingArgs = {
  input: CreateShippingInput;
};


export type MutationCreateShopArgs = {
  input: CreateShopInput;
};


export type MutationCreateStoreNoticeArgs = {
  input: CreateStoreNoticeInput;
};


export type MutationCreateTagArgs = {
  input: CreateTagInput;
};


export type MutationCreateTaxArgs = {
  input: CreateTaxInput;
};


export type MutationCreateTermsConditionsArgs = {
  input: CreateTermsConditionsInput;
};


export type MutationCreateTypeArgs = {
  input: CreateTypeInput;
};


export type MutationCreateWithdrawArgs = {
  input: CreateWithdrawInput;
};


export type MutationDeleteAddressArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteAttributeArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteAuthorArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCardArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCouponArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteFaqArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteFlashSaleArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteFlashSaleRequestArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteManufacturerArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteNotifyLogArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteOrderArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteOrderStatusArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteProductArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteProfileArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteRefundArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteRefundPolicyArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteRefundReasonArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteReviewArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteShippingArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteShopArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteStoreNoticeArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTagArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTaxArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTermsConditionsArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTypeArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteWishlistArgs = {
  slug: Scalars['String']['input'];
};


export type MutationDeleteWithdrawArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDisApproveFlashSaleRequestArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDisApproveTermsConditionsArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDisapproveCouponArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDisapproveShopArgs = {
  id: Scalars['ID']['input'];
};


export type MutationForgetPasswordArgs = {
  input: ForgetPasswordInput;
};


export type MutationGenerateDescriptionsArgs = {
  input: AiInput;
};


export type MutationGenerateDownloadableUrlArgs = {
  input: GenerateDownloadableUrlInput;
};


export type MutationGenerateInvoiceDownloadUrlArgs = {
  input: GenerateInvoiceDownloadUrlInput;
};


export type MutationGenerateOrderExportUrlArgs = {
  input: GenerateOrderExportUrlInput;
};


export type MutationImportAttributesArgs = {
  csv: Scalars['Upload']['input'];
  shop_id: Scalars['ID']['input'];
};


export type MutationImportProductsArgs = {
  csv: Scalars['Upload']['input'];
  shop_id: Scalars['ID']['input'];
};


export type MutationImportVariationOptionsArgs = {
  csv: Scalars['Upload']['input'];
  shop_id: Scalars['ID']['input'];
};


export type MutationLicenseKeyValidationArgs = {
  license_key: Scalars['String']['input'];
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationMakeOrRevokeAdminArgs = {
  input: MakeOrRevokeAdminInput;
};


export type MutationNotifyLogAllReadArgs = {
  input: UpdateNotifyLogInput;
};


export type MutationOtpLoginArgs = {
  input: OtpLoginInput;
};


export type MutationReadAllNoticeArgs = {
  input: ReadAllNoticeInput;
};


export type MutationReadNoticeArgs = {
  input: ReadSingleNoticeInput;
};


export type MutationReadNotifyLogsArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRegisterArgs = {
  input: RegisterInput;
};


export type MutationRejectAbusiveReportArgs = {
  input: AcceptAbusiveReportInput;
};


export type MutationRemoveStaffArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationResetPasswordArgs = {
  input: ResetPasswordInput;
};


export type MutationSavePaymentMethodArgs = {
  input: SavePaymentMethodInput;
};


export type MutationSeenMessageArgs = {
  input: SeenMessageInput;
};


export type MutationSendOtpCodeArgs = {
  input: OtpInput;
};


export type MutationSetDefaultPaymentMethodArgs = {
  method_id: Scalars['ID']['input'];
};


export type MutationSocialLoginArgs = {
  input: SocialLoginInput;
};


export type MutationSubscribeToNewsletterArgs = {
  email: Scalars['String']['input'];
};


export type MutationToggleWishlistArgs = {
  input: CreateWishlistInput;
};


export type MutationUpdateAddressArgs = {
  input: UpdateAddressInput;
};


export type MutationUpdateAttributeArgs = {
  input: UpdateAttributeInput;
};


export type MutationUpdateAuthorArgs = {
  input: UpdateAuthorInput;
};


export type MutationUpdateCardArgs = {
  input: UpdateCardInput;
};


export type MutationUpdateCategoryArgs = {
  input: UpdateCategoryInput;
};


export type MutationUpdateCouponArgs = {
  input: UpdateCouponInput;
};


export type MutationUpdateFaqArgs = {
  input: UpdateFaqInput;
};


export type MutationUpdateFlashSaleArgs = {
  input: UpdateFlashSaleInput;
};


export type MutationUpdateFlashSaleRequestArgs = {
  input: UpdateFlashSaleRequestInput;
};


export type MutationUpdateManufacturerArgs = {
  input: UpdateManufacturerInput;
};


export type MutationUpdateOrderArgs = {
  input: UpdateOrderInput;
};


export type MutationUpdateOrderStatusArgs = {
  input: UpdateOrderStatusInput;
};


export type MutationUpdateProductArgs = {
  input: UpdateProductInput;
};


export type MutationUpdateProfileArgs = {
  id: Scalars['ID']['input'];
  input: ProfileInput;
};


export type MutationUpdateQuestionArgs = {
  id: Scalars['ID']['input'];
  input: UpdateQuestionInput;
};


export type MutationUpdateRefundArgs = {
  input: UpdateRefundInput;
};


export type MutationUpdateRefundPolicyArgs = {
  input: UpdateRefundPolicyInput;
};


export type MutationUpdateRefundReasonArgs = {
  input: UpdateRefundReasonInput;
};


export type MutationUpdateReviewArgs = {
  id: Scalars['ID']['input'];
  input: UpdateReviewInput;
};


export type MutationUpdateSettingsArgs = {
  input: SettingsInput;
};


export type MutationUpdateShippingArgs = {
  input: UpdateShippingInput;
};


export type MutationUpdateShopArgs = {
  input: UpdateShopInput;
};


export type MutationUpdateStoreNoticeArgs = {
  input: UpdateStoreNoticeInput;
};


export type MutationUpdateTagArgs = {
  input: UpdateTagInput;
};


export type MutationUpdateTaxArgs = {
  input: UpdateTaxInput;
};


export type MutationUpdateTermsConditionsArgs = {
  input: UpdateTermsConditionsInput;
};


export type MutationUpdateTypeArgs = {
  input: UpdateTypeInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateUserEmailArgs = {
  input: UpdateEmailUserInput;
};


export type MutationUploadArgs = {
  attachment?: InputMaybe<Array<InputMaybe<Scalars['Upload']['input']>>>;
};


export type MutationVerifyCheckoutArgs = {
  input: CheckoutVerificationInput;
};


export type MutationVerifyCouponArgs = {
  input: VerifyCouponInput;
};


export type MutationVerifyForgetPasswordTokenArgs = {
  input: VerifyForgetPasswordTokenInput;
};


export type MutationVerifyOtpCodeArgs = {
  input: VerifyOtpInput;
};

export type MyQuestionPaginator = {
  __typename?: 'MyQuestionPaginator';
  data: Array<Question>;
  paginatorInfo: PaginatorInfo;
};

export type MyReportPaginator = {
  __typename?: 'MyReportPaginator';
  data: Array<AbusiveReport>;
  paginatorInfo: PaginatorInfo;
};

export type Notifications = {
  __typename?: 'Notifications';
  email?: Maybe<Scalars['String']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
};

export type NotificationsInputType = {
  email?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotifyLogs = {
  __typename?: 'NotifyLogs';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  deleted_at: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  is_read?: Maybe<Scalars['Boolean']['output']>;
  notify_receiver_type?: Maybe<Scalars['String']['output']>;
  notify_text: Scalars['String']['output'];
  notify_tracker: Scalars['String']['output'];
  notify_type?: Maybe<Scalars['String']['output']>;
  receiver?: Maybe<Scalars['ID']['output']>;
  receiver_user?: Maybe<User>;
  sender?: Maybe<Scalars['ID']['output']>;
  sender_user?: Maybe<User>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type NotifyLogsPaginator = {
  __typename?: 'NotifyLogsPaginator';
  data: Array<NotifyLogs>;
  paginatorInfo: PaginatorInfo;
};

export type Order = {
  __typename?: 'Order';
  altered_payment_gateway?: Maybe<Scalars['String']['output']>;
  amount: Scalars['Float']['output'];
  billing_address?: Maybe<UserAddress>;
  children: Array<Order>;
  coupon?: Maybe<Coupon>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer: User;
  customer_contact: Scalars['String']['output'];
  customer_id?: Maybe<Scalars['ID']['output']>;
  customer_name?: Maybe<Scalars['String']['output']>;
  delivery_fee: Scalars['Float']['output'];
  delivery_time?: Maybe<Scalars['String']['output']>;
  discount?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  language: Scalars['String']['output'];
  note?: Maybe<Scalars['String']['output']>;
  order_status?: Maybe<Scalars['String']['output']>;
  paid_total?: Maybe<Scalars['Float']['output']>;
  parent_id?: Maybe<Scalars['Float']['output']>;
  parent_order?: Maybe<Order>;
  payment_gateway: PaymentGatewayType;
  payment_id?: Maybe<Scalars['String']['output']>;
  payment_intent?: Maybe<PaymentIntent>;
  payment_status?: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  refund?: Maybe<Refund>;
  reviews?: Maybe<Array<Review>>;
  sales_tax: Scalars['Float']['output'];
  shipping_address?: Maybe<UserAddress>;
  shop?: Maybe<Shop>;
  total: Scalars['Float']['output'];
  tracking_number: Scalars['String']['output'];
  translated_languages: Array<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  wallet_point?: Maybe<WalletPoint>;
};

export type OrderByStatus = {
  __typename?: 'OrderByStatus';
  cancelled?: Maybe<Scalars['Float']['output']>;
  complete?: Maybe<Scalars['Float']['output']>;
  failed?: Maybe<Scalars['Float']['output']>;
  localFacility?: Maybe<Scalars['Float']['output']>;
  outForDelivery?: Maybe<Scalars['Float']['output']>;
  pending?: Maybe<Scalars['Float']['output']>;
  processing?: Maybe<Scalars['Float']['output']>;
  refunded?: Maybe<Scalars['Float']['output']>;
};

export type OrderFiles = {
  __typename?: 'OrderFiles';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer_id?: Maybe<Scalars['Int']['output']>;
  digital_file?: Maybe<DigitalFile>;
  digital_file_id?: Maybe<Scalars['Int']['output']>;
  file?: Maybe<DigitalFile>;
  id: Scalars['ID']['output'];
  order?: Maybe<Order>;
  purchase_key?: Maybe<Scalars['String']['output']>;
  tracking_number?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type OrderInputType = {
  altered_payment_gateway?: InputMaybe<Scalars['String']['input']>;
  amount: Scalars['Float']['input'];
  billing_address?: InputMaybe<UserAddressInputType>;
  children: Array<OrderInputType>;
  coupon?: InputMaybe<CouponInputType>;
  customer: UserInputType;
  customer_contact: Scalars['String']['input'];
  customer_id?: InputMaybe<Scalars['ID']['input']>;
  customer_name?: InputMaybe<Scalars['String']['input']>;
  delivery_fee: Scalars['Float']['input'];
  delivery_time?: InputMaybe<Scalars['String']['input']>;
  discount?: InputMaybe<Scalars['Float']['input']>;
  language: Scalars['String']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  order_status?: InputMaybe<Scalars['String']['input']>;
  paid_total?: InputMaybe<Scalars['Float']['input']>;
  parent_id?: InputMaybe<Scalars['Float']['input']>;
  parent_order?: InputMaybe<OrderInputType>;
  payment_gateway: PaymentGatewayType;
  payment_id?: InputMaybe<Scalars['String']['input']>;
  payment_intent?: InputMaybe<PaymentIntentType>;
  payment_status?: InputMaybe<Scalars['String']['input']>;
  products: Array<ProductInputType>;
  refund?: InputMaybe<RefundInputType>;
  reviews?: InputMaybe<Array<ReviewInputType>>;
  sales_tax: Scalars['Float']['input'];
  shipping_address?: InputMaybe<UserAddressInputType>;
  shop?: InputMaybe<ShopInputType>;
  total: Scalars['Float']['input'];
  tracking_number: Scalars['String']['input'];
  translated_languages: Array<Scalars['String']['input']>;
  wallet_point?: InputMaybe<WalletPointInputType>;
};

export type OrderPaginator = {
  __typename?: 'OrderPaginator';
  data: Array<Order>;
  paginatorInfo: PaginatorInfo;
};

export type OrderProductPivot = {
  __typename?: 'OrderProductPivot';
  order_quantity: Scalars['Int']['output'];
  subtotal: Scalars['Float']['output'];
  unit_price: Scalars['Float']['output'];
  variation_option_id?: Maybe<Scalars['ID']['output']>;
};

export type OrderStatus = {
  __typename?: 'OrderStatus';
  color: Scalars['String']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  language: Scalars['String']['output'];
  name: Scalars['String']['output'];
  serial: Scalars['Int']['output'];
  slug: Scalars['String']['output'];
  translated_languages: Array<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type OrderStatusPaginator = {
  __typename?: 'OrderStatusPaginator';
  data: Array<OrderStatus>;
  paginatorInfo: PaginatorInfo;
};

export type OrderedFilePaginator = {
  __typename?: 'OrderedFilePaginator';
  data: Array<OrderFiles>;
  paginatorInfo: PaginatorInfo;
};

export type OtpInput = {
  phone_number: Scalars['String']['input'];
};

export type OtpLoginInput = {
  code: Scalars['String']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  otp_id: Scalars['String']['input'];
  phone_number: Scalars['String']['input'];
};

export type OtpResponse = {
  __typename?: 'OtpResponse';
  id: Scalars['String']['output'];
  is_contact_exist: Scalars['Boolean']['output'];
  message: Scalars['String']['output'];
  phone_number: Scalars['String']['output'];
  provider: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

export type PaginatorInfo = {
  __typename?: 'PaginatorInfo';
  count: Scalars['Int']['output'];
  currentPage: Scalars['Int']['output'];
  firstItem: Scalars['Int']['output'];
  hasMorePages: Scalars['Boolean']['output'];
  lastItem: Scalars['Int']['output'];
  lastPage: Scalars['Int']['output'];
  perPage: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type PasswordChangeResponse = {
  __typename?: 'PasswordChangeResponse';
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

export type PaymentGateWay = {
  __typename?: 'PaymentGateWay';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer_id: Scalars['String']['output'];
  gateway_name: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user_id: Scalars['Float']['output'];
};

export type PaymentGateway = {
  __typename?: 'PaymentGateway';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type PaymentGatewayInputType = {
  name: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

export enum PaymentGatewayType {
  Cash = 'CASH',
  CashOnDelivery = 'CASH_ON_DELIVERY',
  FullWalletPayment = 'FULL_WALLET_PAYMENT',
  Paypal = 'PAYPAL',
  Razorpay = 'RAZORPAY',
  Stripe = 'STRIPE'
}

export type PaymentInfo = {
  __typename?: 'PaymentInfo';
  account?: Maybe<Scalars['Float']['output']>;
  bank?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type PaymentInfoInput = {
  account?: InputMaybe<Scalars['Float']['input']>;
  bank?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type PaymentIntent = {
  __typename?: 'PaymentIntent';
  id: Scalars['ID']['output'];
  order_id: Scalars['ID']['output'];
  payment_gateway: Scalars['String']['output'];
  payment_intent_info?: Maybe<PaymentIntentInfo>;
  tracking_number: Scalars['ID']['output'];
};

export type PaymentIntentInfo = {
  __typename?: 'PaymentIntentInfo';
  amount: Scalars['String']['output'];
  client_secret?: Maybe<Scalars['String']['output']>;
  currency: Scalars['String']['output'];
  is_redirect: Scalars['Boolean']['output'];
  payment_id: Scalars['String']['output'];
  redirect_url?: Maybe<Scalars['String']['output']>;
};

export type PaymentIntentInfoType = {
  amount: Scalars['String']['input'];
  client_secret?: InputMaybe<Scalars['String']['input']>;
  currency: Scalars['String']['input'];
  is_redirect: Scalars['Boolean']['input'];
  payment_id: Scalars['String']['input'];
  redirect_url?: InputMaybe<Scalars['String']['input']>;
};

export type PaymentIntentType = {
  id: Scalars['ID']['input'];
  order_id: Scalars['ID']['input'];
  payment_gateway: Scalars['String']['input'];
  payment_intent_info?: InputMaybe<PaymentIntentInfoType>;
  tracking_number: Scalars['ID']['input'];
};

export enum Permission {
  Customer = 'CUSTOMER',
  Staff = 'STAFF',
  StoreOwner = 'STORE_OWNER',
  SuperAdmin = 'SUPER_ADMIN'
}

export type Permissions = {
  __typename?: 'Permissions';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type PermissionsInputType = {
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

export type PivotInputType = {
  order_quantity: Scalars['Int']['input'];
  subtotal: Scalars['Float']['input'];
  unit_price: Scalars['Float']['input'];
  variation_option_id?: InputMaybe<Scalars['ID']['input']>;
};

export type PopUpNotShow = {
  __typename?: 'PopUpNotShow';
  popUpExpiredIn?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type PopUpNotShowInput = {
  popUpExpiredIn?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PriceRange = {
  from: Scalars['Float']['input'];
  to: Scalars['Float']['input'];
};

export type Product = {
  __typename?: 'Product';
  author?: Maybe<Author>;
  author_id?: Maybe<Scalars['ID']['output']>;
  categories?: Maybe<Array<Category>>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  digital_file?: Maybe<DigitalFile>;
  external_product_button_text?: Maybe<Scalars['String']['output']>;
  external_product_url?: Maybe<Scalars['String']['output']>;
  gallery?: Maybe<Array<Attachment>>;
  height?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  in_flash_sale?: Maybe<Scalars['Int']['output']>;
  in_stock?: Maybe<Scalars['Boolean']['output']>;
  in_wishlist: Scalars['Boolean']['output'];
  is_digital?: Maybe<Scalars['Boolean']['output']>;
  is_external?: Maybe<Scalars['Boolean']['output']>;
  is_taxable?: Maybe<Scalars['Boolean']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  length?: Maybe<Scalars['String']['output']>;
  manufacturer?: Maybe<Manufacturer>;
  manufacturer_id?: Maybe<Scalars['ID']['output']>;
  max_price?: Maybe<Scalars['Float']['output']>;
  min_price?: Maybe<Scalars['Float']['output']>;
  my_review?: Maybe<Array<Review>>;
  name: Scalars['String']['output'];
  orders?: Maybe<Array<Order>>;
  pivot?: Maybe<OrderProductPivot>;
  price?: Maybe<Scalars['Float']['output']>;
  product_type: ProductType;
  quantity: Scalars['Int']['output'];
  ratings?: Maybe<Scalars['Float']['output']>;
  related_products?: Maybe<Array<Product>>;
  sale_price?: Maybe<Scalars['Float']['output']>;
  shop?: Maybe<Shop>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  sku?: Maybe<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
  sold_quantity?: Maybe<Scalars['Int']['output']>;
  status: ProductStatus;
  tags?: Maybe<Array<Tag>>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<Type>;
  type_id: Scalars['ID']['output'];
  unit: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  variation_options?: Maybe<Array<Variation>>;
  variations?: Maybe<Array<AttributeValue>>;
  video?: Maybe<Array<Video>>;
  width?: Maybe<Scalars['String']['output']>;
};


export type ProductRelated_ProductsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};

export type ProductInputType = {
  author?: InputMaybe<AuthorInputType>;
  author_id?: InputMaybe<Scalars['ID']['input']>;
  categories?: InputMaybe<Array<CategoryInputType>>;
  description?: InputMaybe<Scalars['String']['input']>;
  external_product_button_text?: InputMaybe<Scalars['String']['input']>;
  external_product_url?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<AttachmentInput>>;
  height?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  in_flash_sale?: InputMaybe<Scalars['Int']['input']>;
  in_stock?: InputMaybe<Scalars['Boolean']['input']>;
  in_wishlist: Scalars['Boolean']['input'];
  is_digital?: InputMaybe<Scalars['Boolean']['input']>;
  is_external?: InputMaybe<Scalars['Boolean']['input']>;
  is_taxable?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  length?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<ManufacturerInputType>;
  manufacturer_id?: InputMaybe<Scalars['ID']['input']>;
  max_price?: InputMaybe<Scalars['Float']['input']>;
  min_price?: InputMaybe<Scalars['Float']['input']>;
  my_review?: InputMaybe<Array<ReviewInputType>>;
  name: Scalars['String']['input'];
  orders?: InputMaybe<Array<OrderInputType>>;
  pivot?: InputMaybe<PivotInputType>;
  price?: InputMaybe<Scalars['Float']['input']>;
  product_type: ProductType;
  quantity: Scalars['Int']['input'];
  ratings?: InputMaybe<Scalars['Float']['input']>;
  related_products?: InputMaybe<Array<ProductInputType>>;
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  shop?: InputMaybe<ShopInputType>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
  slug: Scalars['String']['input'];
  sold_quantity?: InputMaybe<Scalars['Int']['input']>;
  status: ProductStatus;
  tags?: InputMaybe<Array<TagInputType>>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
  type?: InputMaybe<TypeInputType>;
  type_id: Scalars['ID']['input'];
  unit: Scalars['String']['input'];
  variation_options?: InputMaybe<Array<VariationInputType>>;
  variations?: InputMaybe<Array<AttributeValueInputType>>;
  video?: InputMaybe<Array<VideoInputType>>;
  width?: InputMaybe<Scalars['String']['input']>;
};

export type ProductPaginator = {
  __typename?: 'ProductPaginator';
  data: Array<Product>;
  paginatorInfo: PaginatorInfo;
};

export enum ProductStatus {
  Draft = 'DRAFT',
  Publish = 'PUBLISH'
}

export enum ProductType {
  Simple = 'SIMPLE',
  Variable = 'VARIABLE'
}

export type Profile = {
  __typename?: 'Profile';
  avatar?: Maybe<Attachment>;
  bio?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer?: Maybe<User>;
  id: Scalars['ID']['output'];
  notifications?: Maybe<Notifications>;
  socials?: Maybe<Array<Social>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type ProfileHasOne = {
  upsert?: InputMaybe<UserProfileInput>;
};

export type ProfileInput = {
  avatar?: InputMaybe<AttachmentInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<Scalars['String']['input']>;
  customer: ConnectBelongsTo;
  socials?: InputMaybe<Array<SocialInputType>>;
};

export type ProfileInputType = {
  avatar?: InputMaybe<AttachmentInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<Scalars['String']['input']>;
  customer?: InputMaybe<UserInputType>;
  notifications?: InputMaybe<NotificationsInputType>;
  socials?: InputMaybe<Array<SocialInputType>>;
};

export type PromoPopup = {
  __typename?: 'PromoPopup';
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Attachment>;
  isPopUpNotShow?: Maybe<Scalars['Boolean']['output']>;
  popUpDelay?: Maybe<Scalars['Float']['output']>;
  popUpExpiredIn?: Maybe<Scalars['Float']['output']>;
  popUpNotShow?: Maybe<PopUpNotShow>;
  title?: Maybe<Scalars['String']['output']>;
};

export type PromoPopupInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  isPopUpNotShow?: InputMaybe<Scalars['Boolean']['input']>;
  popUpDelay?: InputMaybe<Scalars['Float']['input']>;
  popUpExpiredIn?: InputMaybe<Scalars['Float']['input']>;
  popUpNotShow?: InputMaybe<PopUpNotShowInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PushNotification = {
  __typename?: 'PushNotification';
  message?: Maybe<Scalars['Boolean']['output']>;
  order?: Maybe<Scalars['Boolean']['output']>;
  storeNotice?: Maybe<Scalars['Boolean']['output']>;
};

export type PushNotificationInput = {
  message?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
  storeNotice?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Query = {
  __typename?: 'Query';
  address: Address;
  addresses: Array<Address>;
  all_questions: QuestionPaginator;
  analytics: Analytics;
  attribute: Attribute;
  attributes: Array<Attribute>;
  author: Author;
  authors: AuthorPaginator;
  bestSellingProducts: Array<Product>;
  cards: Array<Card>;
  categories: CategoryPaginator;
  category: Category;
  categoryWiseProduct: Array<CategoryWiseProduct>;
  categoryWiseProductSale: Array<CategoryWiseProductSale>;
  conversation?: Maybe<Conversation>;
  conversations: ConversationPaginator;
  coupon: Coupon;
  coupons: CouponPaginator;
  downloads: OrderedFilePaginator;
  faq?: Maybe<Faqs>;
  faqs: FaqPaginator;
  fetchRequestedProducts: ProductPaginator;
  findShopDistance: Array<Shop>;
  flashSale: FlashSale;
  flashSaleInfoByProductID: FlashSale;
  flashSaleRequest: FlashSaleRequests;
  flashSaleRequests: FlashSaleRequestPaginator;
  flashSales: FlashSalePaginator;
  getPaymentIntent: PaymentIntent;
  in_wishlist: Scalars['Boolean']['output'];
  lowStockProducts: Array<Product>;
  manufacturer: Manufacturer;
  manufacturers: ManufacturerPaginator;
  me: User;
  messages: MessagePaginator;
  myQuestions: MyQuestionPaginator;
  myReports: MyReportPaginator;
  myStaffs: UserPaginator;
  notifyLog?: Maybe<NotifyLogs>;
  notifyLogs: NotifyLogsPaginator;
  order: Order;
  orderStatus: OrderStatus;
  orderStatuses: OrderStatusPaginator;
  orders: OrderPaginator;
  popularProducts: Array<Product>;
  product: Product;
  products: ProductPaginator;
  productsByFlashSale: ProductPaginator;
  productsDraft: ProductPaginator;
  productsStock: ProductPaginator;
  question?: Maybe<Question>;
  questions: QuestionPaginator;
  refund: Refund;
  refundPolicies: RefundPoliciesPaginator;
  refundPolicy: RefundPolicy;
  refundReason?: Maybe<RefundReason>;
  refundReasons: RefundReasonsPaginator;
  refunds: RefundPaginator;
  review: Review;
  reviews: ReviewPaginator;
  settings: Settings;
  shippingClass: Shipping;
  shippingClasses: Array<Shipping>;
  shop?: Maybe<Shop>;
  shops: ShopPaginator;
  staffs: UserPaginator;
  storeNotice: StoreNotice;
  storeNoticeReceiver: Array<UserToNotify>;
  storeNoticeTypes: Scalars['String']['output'];
  storeNotices: StoreNoticesPaginator;
  tag?: Maybe<Tag>;
  tags: TagPaginator;
  taxClass: Tax;
  taxClasses: Array<Tax>;
  termsCondition?: Maybe<TermsAndConditions>;
  termsConditions: TermsAndConditionPaginator;
  topAuthors: Array<Author>;
  topManufacturers: Array<Manufacturer>;
  topRatedProducts: Array<TopRatedProduct>;
  type: Type;
  types: Array<Type>;
  user?: Maybe<User>;
  users: UserPaginator;
  usersByPermission: UserPaginator;
  wishlists: ProductPaginator;
  withdraw?: Maybe<Withdraw>;
  withdraws: WithdrawPaginator;
};


export type QueryAddressArgs = {
  id: Scalars['Int']['input'];
};


export type QueryAll_QuestionsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryQuestionsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryAttributeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAttributesArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryAttributesOrderByOrderByClause>>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryAuthorArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthorsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryAuthorsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBestSellingProductsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  range?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['Int']['input']>;
  type_id?: InputMaybe<Scalars['Int']['input']>;
  type_slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoriesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  hasType?: InputMaybe<QueryCategoriesHasTypeWhereHasConditions>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryCategoriesOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  parent?: InputMaybe<Scalars['ID']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoryArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoryWiseProductArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoryWiseProductSaleArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
};


export type QueryConversationArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryConversationsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCouponArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCouponsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  is_approve?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDownloadsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryOrderFilesOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryFaqArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFaqsArgs = {
  faq_type?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFetchRequestedProductsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  vendor_request_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryFindShopDistanceArgs = {
  lat?: InputMaybe<Scalars['String']['input']>;
  lng?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFlashSaleArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFlashSaleInfoByProductIdArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFlashSaleRequestArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFlashSaleRequestsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFlashSalesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  hasProducts?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  request_from?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPaymentIntentArgs = {
  payment_gateway: Scalars['String']['input'];
  recall_gateway: Scalars['Boolean']['input'];
  tracking_number: Scalars['ID']['input'];
};


export type QueryIn_WishlistArgs = {
  product_id: Scalars['ID']['input'];
};


export type QueryLowStockProductsArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryManufacturerArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryManufacturersArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  hasType?: InputMaybe<QueryManufacturersHasTypeWhereHasConditions>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryManufacturersOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMessagesArgs = {
  conversation_id: Scalars['ID']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMyQuestionsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryMyQuestionsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryMyReportsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryMyReportsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  product_id?: InputMaybe<Scalars['ID']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryMyStaffsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNotifyLogArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNotifyLogsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  notify_type?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  receiver?: InputMaybe<Scalars['ID']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrderArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  tracking_number?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrderStatusArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrderStatusesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryOrderStatusesOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrdersArgs = {
  customer_id?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  tracking_number?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPopularProductsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  range?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['Int']['input']>;
  type_id?: InputMaybe<Scalars['Int']['input']>;
  type_slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductsArgs = {
  author?: InputMaybe<Scalars['String']['input']>;
  date_range?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  flash_sale_builder?: InputMaybe<Scalars['Boolean']['input']>;
  hasAuthor?: InputMaybe<QueryProductsHasAuthorWhereHasConditions>;
  hasCategories?: InputMaybe<QueryProductsHasCategoriesWhereHasConditions>;
  hasManufacturer?: InputMaybe<QueryProductsHasManufacturerWhereHasConditions>;
  hasTags?: InputMaybe<QueryProductsHasTagsWhereHasConditions>;
  hasType?: InputMaybe<QueryProductsHasTypeWhereHasConditions>;
  language?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<Scalars['String']['input']>;
  max_price?: InputMaybe<PriceRange>;
  min_price?: InputMaybe<PriceRange>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  price?: InputMaybe<PriceRange>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  searchedByUser?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductsByFlashSaleArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductsDraftArgs = {
  author?: InputMaybe<Scalars['String']['input']>;
  date_range?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  flash_sale_builder?: InputMaybe<Scalars['Boolean']['input']>;
  hasAuthor?: InputMaybe<QueryProductsHasAuthorWhereHasConditions>;
  hasCategories?: InputMaybe<QueryProductsHasCategoriesWhereHasConditions>;
  hasManufacturer?: InputMaybe<QueryProductsHasManufacturerWhereHasConditions>;
  hasTags?: InputMaybe<QueryProductsHasTagsWhereHasConditions>;
  hasType?: InputMaybe<QueryProductsHasTypeWhereHasConditions>;
  language?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<Scalars['String']['input']>;
  max_price?: InputMaybe<PriceRange>;
  min_price?: InputMaybe<PriceRange>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  price?: InputMaybe<PriceRange>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  searchedByUser?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductsStockArgs = {
  author?: InputMaybe<Scalars['String']['input']>;
  date_range?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  flash_sale_builder?: InputMaybe<Scalars['Boolean']['input']>;
  hasAuthor?: InputMaybe<QueryProductsHasAuthorWhereHasConditions>;
  hasCategories?: InputMaybe<QueryProductsHasCategoriesWhereHasConditions>;
  hasManufacturer?: InputMaybe<QueryProductsHasManufacturerWhereHasConditions>;
  hasTags?: InputMaybe<QueryProductsHasTagsWhereHasConditions>;
  hasType?: InputMaybe<QueryProductsHasTypeWhereHasConditions>;
  language?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<Scalars['String']['input']>;
  max_price?: InputMaybe<PriceRange>;
  min_price?: InputMaybe<PriceRange>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  price?: InputMaybe<PriceRange>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  searchedByUser?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryQuestionArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  product_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryQuestionsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryQuestionsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryRefundArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRefundPoliciesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRefundPolicyArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRefundReasonArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRefundReasonsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRefundsArgs = {
  customer_id?: InputMaybe<Scalars['Int']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  order_id?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['Int']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryReviewArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryReviewsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryReviewsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  product_id?: InputMaybe<Scalars['ID']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QuerySettingsArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
};


export type QueryShippingClassArgs = {
  id: Scalars['ID']['input'];
};


export type QueryShippingClassesArgs = {
  orderBy?: InputMaybe<Array<QueryShippingClassesOrderByOrderByClause>>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryShopArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryShopsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  is_active?: InputMaybe<Scalars['Boolean']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStaffsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStoreNoticeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  notice?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStoreNoticeReceiverArgs = {
  type?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStoreNoticeTypesArgs = {
  role?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStoreNoticesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTagArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTagsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  hasType?: InputMaybe<QueryTagsHasTypeWhereHasConditions>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryTagsOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTaxClassArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTaxClassesArgs = {
  orderBy?: InputMaybe<Array<QueryTaxClassesOrderByOrderByClause>>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTermsConditionArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTermsConditionsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTopAuthorsArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryTopManufacturersArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryTopRatedProductsArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTypeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTypesArgs = {
  language?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<QueryTypesOrderByOrderByClause>>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<QueryUsersOrderByOrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUsersByPermissionArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  is_active?: InputMaybe<Scalars['Boolean']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  permission?: InputMaybe<Scalars['String']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  searchJoin?: InputMaybe<Scalars['String']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWishlistsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryWithdrawArgs = {
  id: Scalars['ID']['input'];
};


export type QueryWithdrawsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sortedBy?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export enum QueryAllQuestionsOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export enum QueryAttributesOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryAttributesOrderByOrderByClause = {
  column: QueryAttributesOrderByColumn;
  order: SortOrder;
};

export enum QueryAuthorsOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Id = 'ID',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryAuthorsOrderByOrderByClause = {
  column?: InputMaybe<QueryAuthorsOrderByColumn>;
  order?: InputMaybe<SortOrder>;
};

export enum QueryCategoriesHasTypeColumn {
  Slug = 'SLUG'
}

export type QueryCategoriesHasTypeWhereHasConditions = {
  AND?: InputMaybe<Array<QueryCategoriesHasTypeWhereHasConditions>>;
  HAS?: InputMaybe<QueryCategoriesHasTypeWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryCategoriesHasTypeWhereHasConditions>>;
  column: QueryCategoriesHasTypeColumn;
  operator?: SqlOperator;
  value: Scalars['String']['input'];
};

export type QueryCategoriesHasTypeWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryCategoriesHasTypeWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryCategoriesOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryCategoriesOrderByOrderByClause = {
  column: QueryCategoriesOrderByColumn;
  order: SortOrder;
};

export enum QueryManufacturersHasTypeColumn {
  Slug = 'SLUG'
}

export type QueryManufacturersHasTypeWhereHasConditions = {
  AND?: InputMaybe<Array<QueryManufacturersHasTypeWhereHasConditions>>;
  HAS?: InputMaybe<QueryManufacturersHasTypeWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryManufacturersHasTypeWhereHasConditions>>;
  column: QueryManufacturersHasTypeColumn;
  operator?: SqlOperator;
  value: Scalars['String']['input'];
};

export type QueryManufacturersHasTypeWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryManufacturersHasTypeWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryManufacturersOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryManufacturersOrderByOrderByClause = {
  column?: InputMaybe<QueryManufacturersOrderByColumn>;
  order: SortOrder;
};

export type QueryMyQuestionsOrderByOrderByClause = {
  column: QueryQuestionsOrderByOrderByClause;
  order: SortOrder;
};

export enum QueryMyReportsOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryMyReportsOrderByOrderByClause = {
  column: QueryMyReportsOrderByColumn;
  order: SortOrder;
};

export type QueryOrderFilesOrderByOrderByClause = {
  order: SortOrder;
};

export enum QueryOrderStatusesOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  Serial = 'SERIAL',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryOrderStatusesOrderByOrderByClause = {
  column?: InputMaybe<QueryOrderStatusesOrderByColumn>;
  order: SortOrder;
};

export enum QueryProductsHasAuthorColumn {
  Slug = 'SLUG'
}

export type QueryProductsHasAuthorWhereHasConditions = {
  AND?: InputMaybe<Array<QueryProductsHasAuthorWhereHasConditions>>;
  HAS?: InputMaybe<QueryProductsHasAuthorWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryProductsHasAuthorWhereHasConditions>>;
  column: QueryProductsHasAuthorColumn;
  operator?: SqlOperator;
  value: Array<Scalars['String']['input']>;
};

export type QueryProductsHasAuthorWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryProductsHasAuthorWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryProductsHasCategoriesColumn {
  Slug = 'SLUG'
}

export type QueryProductsHasCategoriesWhereHasConditions = {
  AND?: InputMaybe<Array<QueryProductsHasCategoriesWhereHasConditions>>;
  HAS?: InputMaybe<QueryProductsHasCategoriesWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryProductsHasCategoriesWhereHasConditions>>;
  column: QueryProductsHasCategoriesColumn;
  operator?: SqlOperator;
  value: Array<Scalars['String']['input']>;
};

export type QueryProductsHasCategoriesWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryProductsHasCategoriesWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryProductsHasManufacturerColumn {
  Slug = 'SLUG'
}

export type QueryProductsHasManufacturerWhereHasConditions = {
  AND?: InputMaybe<Array<QueryProductsHasManufacturerWhereHasConditions>>;
  HAS?: InputMaybe<QueryProductsHasManufacturerWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryProductsHasManufacturerWhereHasConditions>>;
  column: QueryProductsHasManufacturerColumn;
  operator?: SqlOperator;
  value: Array<Scalars['String']['input']>;
};

export type QueryProductsHasManufacturerWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryProductsHasManufacturerWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryProductsHasTagsColumn {
  Slug = 'SLUG'
}

export type QueryProductsHasTagsWhereHasConditions = {
  AND?: InputMaybe<Array<QueryProductsHasTagsWhereHasConditions>>;
  HAS?: InputMaybe<QueryProductsHasTagsWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryProductsHasTagsWhereHasConditions>>;
  column: QueryProductsHasTagsColumn;
  operator?: SqlOperator;
  value: Array<Scalars['String']['input']>;
};

export type QueryProductsHasTagsWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryProductsHasTagsWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export enum QueryProductsHasTypeColumn {
  Slug = 'SLUG'
}

export type QueryProductsHasTypeWhereHasConditions = {
  AND?: InputMaybe<Array<QueryProductsHasTypeWhereHasConditions>>;
  HAS?: InputMaybe<QueryProductsHasTypeWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryProductsHasTypeWhereHasConditions>>;
  column: QueryProductsHasTypeColumn;
  operator?: SqlOperator;
  value: Scalars['String']['input'];
};

export type QueryProductsHasTypeWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryProductsHasTypeWhereHasConditions;
  operator: SqlOperator;
  relation: Scalars['String']['input'];
};

export type QueryQuestionsOrderByOrderByClause = {
  column: QueryAllQuestionsOrderByColumn;
  order: SortOrder;
};

export enum QueryReviewsOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  Rating = 'RATING',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryReviewsOrderByOrderByClause = {
  column: QueryReviewsOrderByColumn;
  order: SortOrder;
};

export enum QueryShippingClassesOrderByColumn {
  Amount = 'AMOUNT',
  CreatedAt = 'CREATED_AT',
  IsGlobal = 'IS_GLOBAL',
  Name = 'NAME',
  Type = 'TYPE',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryShippingClassesOrderByOrderByClause = {
  column: QueryShippingClassesOrderByColumn;
  order: SortOrder;
};

export enum QueryTagsHasTypeColumn {
  Slug = 'SLUG'
}

export type QueryTagsHasTypeWhereHasConditions = {
  AND?: InputMaybe<Array<QueryTagsHasTypeWhereHasConditions>>;
  HAS?: InputMaybe<QueryTagsHasTypeWhereHasConditionsRelation>;
  OR?: InputMaybe<Array<QueryTagsHasTypeWhereHasConditions>>;
  column: QueryTagsHasTypeColumn;
  operator?: SqlOperator;
  value: Scalars['String']['input'];
};

export type QueryTagsHasTypeWhereHasConditionsRelation = {
  amount?: Scalars['Int']['input'];
  condition: QueryTagsHasTypeWhereHasConditions;
  operator?: InputMaybe<SqlOperator>;
  relation: Scalars['String']['input'];
};

export enum QueryTagsOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryTagsOrderByOrderByClause = {
  column: QueryTagsOrderByColumn;
  order: SortOrder;
};

export enum QueryTaxClassesOrderByColumn {
  Country = 'COUNTRY',
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  Rate = 'RATE',
  State = 'STATE',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryTaxClassesOrderByOrderByClause = {
  column: QueryTaxClassesOrderByColumn;
  order: SortOrder;
};

export enum QueryTypesOrderByColumn {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryTypesOrderByOrderByClause = {
  column: QueryTypesOrderByColumn;
  order: SortOrder;
};

export enum QueryUsersOrderByColumn {
  CreatedAt = 'CREATED_AT',
  IsActive = 'IS_ACTIVE',
  Name = 'NAME',
  UpdatedAt = 'UPDATED_AT'
}

export type QueryUsersOrderByOrderByClause = {
  column: QueryUsersOrderByColumn;
  order: SortOrder;
};

export type Question = {
  __typename?: 'Question';
  answer?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  feedbacks?: Maybe<Array<Feedback>>;
  id: Scalars['ID']['output'];
  my_feedback?: Maybe<Feedback>;
  negative_feedbacks_count?: Maybe<Scalars['Float']['output']>;
  positive_feedbacks_count?: Maybe<Scalars['Float']['output']>;
  product?: Maybe<Product>;
  product_id?: Maybe<Scalars['ID']['output']>;
  question?: Maybe<Scalars['String']['output']>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user?: Maybe<User>;
  user_id?: Maybe<Scalars['Float']['output']>;
};

export type QuestionPaginator = {
  __typename?: 'QuestionPaginator';
  data: Array<Question>;
  paginatorInfo: PaginatorInfo;
};

export type ReadAllNoticeInput = {
  notices: Scalars['Int']['input'];
};

export type ReadSingleNoticeInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Refund = {
  __typename?: 'Refund';
  amount: Scalars['String']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer?: Maybe<User>;
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Attachment>>;
  order?: Maybe<Order>;
  refund_reason?: Maybe<RefundReason>;
  refund_reason_id: Scalars['ID']['output'];
  shop?: Maybe<Shop>;
  status?: Maybe<RefundStatus>;
  title: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type RefundInputType = {
  amount: Scalars['String']['input'];
  customer?: InputMaybe<UserInputType>;
  description: Scalars['String']['input'];
  images?: InputMaybe<Array<AttachmentInput>>;
  order?: InputMaybe<OrderInputType>;
  refund_reason?: InputMaybe<RefundReasonInputType>;
  refund_reason_id: Scalars['ID']['input'];
  shop?: InputMaybe<ShopInputType>;
  status?: InputMaybe<RefundStatus>;
  title: Scalars['String']['input'];
};

export type RefundPaginator = {
  __typename?: 'RefundPaginator';
  data: Array<Refund>;
  paginatorInfo: PaginatorInfo;
};

export type RefundPoliciesPaginator = {
  __typename?: 'RefundPoliciesPaginator';
  data: Array<RefundPolicy>;
  paginatorInfo: PaginatorInfo;
};

export type RefundPolicy = {
  __typename?: 'RefundPolicy';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  language?: Maybe<Scalars['String']['output']>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  status?: Maybe<RefundPolicyStatus>;
  target?: Maybe<RefundPolicyTarget>;
  title?: Maybe<Scalars['String']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export enum RefundPolicyStatus {
  Approved = 'APPROVED',
  Pending = 'PENDING'
}

export enum RefundPolicyTarget {
  Customer = 'CUSTOMER',
  Vendor = 'VENDOR'
}

export type RefundReason = {
  __typename?: 'RefundReason';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  language?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type RefundReasonInputType = {
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RefundReasonsPaginator = {
  __typename?: 'RefundReasonsPaginator';
  data: Array<RefundReason>;
  paginatorInfo: PaginatorInfo;
};

export enum RefundStatus {
  Approved = 'APPROVED',
  Pending = 'PENDING',
  Processing = 'PROCESSING',
  Rejected = 'REJECTED'
}

export type RegisterInput = {
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password?: InputMaybe<Scalars['String']['input']>;
  permission?: Permission;
};

export type ResetPasswordInput = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type Review = {
  __typename?: 'Review';
  abusive_reports?: Maybe<Array<AbusiveReport>>;
  abusive_reports_count?: Maybe<Scalars['Float']['output']>;
  comment: Scalars['String']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  customer: User;
  feedbacks?: Maybe<Array<Feedback>>;
  id: Scalars['ID']['output'];
  my_feedback?: Maybe<Feedback>;
  name: Scalars['String']['output'];
  negative_feedbacks_count?: Maybe<Scalars['Float']['output']>;
  order: Order;
  photos: Array<Attachment>;
  positive_feedbacks_count?: Maybe<Scalars['Float']['output']>;
  product: Product;
  product_id: Scalars['Float']['output'];
  rating: Scalars['Float']['output'];
  shop: Shop;
  shop_id: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user: User;
  user_id: Scalars['Float']['output'];
  variation_option_id?: Maybe<Scalars['String']['output']>;
};

export type ReviewInputType = {
  abusive_reports?: InputMaybe<Array<AbusiveReportInputType>>;
  abusive_reports_count?: InputMaybe<Scalars['Float']['input']>;
  comment: Scalars['String']['input'];
  customer: UserInputType;
  feedbacks?: InputMaybe<Array<FeedbackInputType>>;
  my_feedback?: InputMaybe<FeedbackInputType>;
  name: Scalars['String']['input'];
  negative_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  order: OrderInputType;
  photos: Array<AttachmentInput>;
  positive_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  product: ProductInputType;
  product_id: Scalars['Float']['input'];
  rating: Scalars['Float']['input'];
  shop: ShopInputType;
  shop_id: Scalars['String']['input'];
  user: UserInputType;
  user_id: Scalars['Float']['input'];
  variation_option_id?: InputMaybe<Scalars['String']['input']>;
};

export type ReviewPaginator = {
  __typename?: 'ReviewPaginator';
  abusive_reports?: Maybe<Array<AbusiveReport>>;
  data: Array<Review>;
  paginatorInfo: PaginatorInfo;
};

export type ReviewSystem = {
  __typename?: 'ReviewSystem';
  name?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

export type ReviewSystemInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

export enum SqlOperator {
  Between = 'BETWEEN',
  Eq = 'EQ',
  Gt = 'GT',
  Gte = 'GTE',
  In = 'IN',
  Neq = 'NEQ'
}

export type SaleBuilder = {
  __typename?: 'SaleBuilder';
  data_type?: Maybe<Scalars['String']['output']>;
  product_ids?: Maybe<Array<Scalars['ID']['output']>>;
};

export type SaleBuilderInput = {
  data_type?: InputMaybe<Scalars['String']['input']>;
  product_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type SavePaymentMethodInput = {
  method_key: Scalars['String']['input'];
  payment_gateway?: InputMaybe<Scalars['String']['input']>;
  payment_intent?: InputMaybe<Scalars['String']['input']>;
  save_card?: InputMaybe<Scalars['Boolean']['input']>;
  tracking_number?: InputMaybe<Scalars['String']['input']>;
};

export type SeenMessageInput = {
  conversation_id: Scalars['ID']['input'];
};

export type SeoSettings = {
  __typename?: 'SeoSettings';
  canonicalUrl?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaTags?: Maybe<Scalars['String']['output']>;
  metaTitle?: Maybe<Scalars['String']['output']>;
  ogDescription?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Attachment>;
  ogTitle?: Maybe<Scalars['String']['output']>;
  twitterCardType?: Maybe<Scalars['String']['output']>;
  twitterHandle?: Maybe<Scalars['String']['output']>;
};

export type SeoSettingsInputType = {
  canonicalUrl?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaTags?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  ogDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<AttachmentInput>;
  ogTitle?: InputMaybe<Scalars['String']['input']>;
  twitterCardType?: InputMaybe<Scalars['String']['input']>;
  twitterHandle?: InputMaybe<Scalars['String']['input']>;
};

export type ServerInfo = {
  __typename?: 'ServerInfo';
  max_execution_time?: Maybe<Scalars['String']['output']>;
  max_input_time?: Maybe<Scalars['String']['output']>;
  memory_limit?: Maybe<Scalars['String']['output']>;
  post_max_size?: Maybe<Scalars['Float']['output']>;
  upload_max_filesize?: Maybe<Scalars['Float']['output']>;
};

export type ServerInfoInputType = {
  max_execution_time?: InputMaybe<Scalars['String']['input']>;
  max_input_time?: InputMaybe<Scalars['String']['input']>;
  memory_limit?: InputMaybe<Scalars['String']['input']>;
  post_max_size?: InputMaybe<Scalars['Float']['input']>;
  upload_max_filesize?: InputMaybe<Scalars['Float']['input']>;
};

export type Settings = {
  __typename?: 'Settings';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  language: Scalars['String']['output'];
  options?: Maybe<SettingsOptions>;
  translated_languages: Array<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type SettingsInput = {
  language?: InputMaybe<Scalars['String']['input']>;
  options?: InputMaybe<SettingsOptionsInput>;
};

export type SettingsOptions = {
  __typename?: 'SettingsOptions';
  StripeCardOnly?: Maybe<Scalars['Boolean']['output']>;
  collapseLogo?: Maybe<Attachment>;
  contactDetails?: Maybe<ContactDetails>;
  copyrightText?: Maybe<Scalars['String']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  currencyOptions?: Maybe<CurrencyOptions>;
  currencyToWalletRatio?: Maybe<Scalars['Int']['output']>;
  defaultAi?: Maybe<Scalars['String']['output']>;
  defaultPaymentGateway?: Maybe<Scalars['String']['output']>;
  deliveryTime?: Maybe<Array<DeliveryTime>>;
  emailEvent?: Maybe<EventSettings>;
  enableCoupons?: Maybe<Scalars['Boolean']['output']>;
  enableReviewPopup?: Maybe<Scalars['Boolean']['output']>;
  enableTerms?: Maybe<Scalars['Boolean']['output']>;
  externalLink?: Maybe<Scalars['String']['output']>;
  externalText?: Maybe<Scalars['String']['output']>;
  facebook?: Maybe<FacebookSettings>;
  freeShipping?: Maybe<Scalars['Boolean']['output']>;
  freeShippingAmount?: Maybe<Scalars['Float']['output']>;
  google?: Maybe<GoogleSettings>;
  guestCheckout?: Maybe<Scalars['Boolean']['output']>;
  isProductReview?: Maybe<Scalars['Boolean']['output']>;
  isPromoPopUp?: Maybe<Scalars['Boolean']['output']>;
  isUnderMaintenance?: Maybe<Scalars['Boolean']['output']>;
  logo?: Maybe<Attachment>;
  maintenance?: Maybe<Maintenance>;
  maxShopDistance?: Maybe<Scalars['Float']['output']>;
  maximumQuestionLimit?: Maybe<Scalars['Float']['output']>;
  minimumOrderAmount?: Maybe<Scalars['Float']['output']>;
  paymentGateway?: Maybe<Array<PaymentGateway>>;
  promoPopup?: Maybe<PromoPopup>;
  pushNotification?: Maybe<AllInput>;
  reviewSystem?: Maybe<ReviewSystem>;
  seo?: Maybe<SeoSettings>;
  server_info?: Maybe<ServerInfo>;
  shippingClass?: Maybe<Scalars['String']['output']>;
  signupPoints?: Maybe<Scalars['Int']['output']>;
  siteLink?: Maybe<Scalars['String']['output']>;
  siteSubtitle?: Maybe<Scalars['String']['output']>;
  siteTitle?: Maybe<Scalars['String']['output']>;
  smsEvent?: Maybe<EventSettings>;
  taxClass?: Maybe<Scalars['String']['output']>;
  useAi?: Maybe<Scalars['Boolean']['output']>;
  useCashOnDelivery?: Maybe<Scalars['Boolean']['output']>;
  useEnableGateway?: Maybe<Scalars['Boolean']['output']>;
  useGoogleMap?: Maybe<Scalars['Boolean']['output']>;
  useMustVerifyEmail?: Maybe<Scalars['Boolean']['output']>;
  useOtp?: Maybe<Scalars['Boolean']['output']>;
};

export type SettingsOptionsInput = {
  StripeCardOnly?: InputMaybe<Scalars['Boolean']['input']>;
  collapseLogo?: InputMaybe<AttachmentInput>;
  contactDetails?: InputMaybe<ContactDetailsInput>;
  copyrightText?: InputMaybe<Scalars['String']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  currencyOptions?: InputMaybe<CurrencyOptionsInputType>;
  currencyToWalletRatio?: InputMaybe<Scalars['Int']['input']>;
  defaultAi?: InputMaybe<Scalars['String']['input']>;
  defaultPaymentGateway?: InputMaybe<Scalars['String']['input']>;
  deliveryTime?: InputMaybe<Array<DeliveryTimeInputType>>;
  emailEvent?: InputMaybe<EventSettingsInputType>;
  enableCoupons?: InputMaybe<Scalars['Boolean']['input']>;
  enableReviewPopup?: InputMaybe<Scalars['Boolean']['input']>;
  enableTerms?: InputMaybe<Scalars['Boolean']['input']>;
  externalLink?: InputMaybe<Scalars['String']['input']>;
  externalText?: InputMaybe<Scalars['String']['input']>;
  facebook?: InputMaybe<FacebookSettingsInputType>;
  freeShipping?: InputMaybe<Scalars['Boolean']['input']>;
  freeShippingAmount?: InputMaybe<Scalars['Float']['input']>;
  google?: InputMaybe<GoogleSettingsInputType>;
  guestCheckout?: InputMaybe<Scalars['Boolean']['input']>;
  isProductReview?: InputMaybe<Scalars['Boolean']['input']>;
  isPromoPopUp?: InputMaybe<Scalars['Boolean']['input']>;
  isUnderMaintenance?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<AttachmentInput>;
  maintenance?: InputMaybe<MaintenanceInput>;
  maxShopDistance?: InputMaybe<Scalars['Float']['input']>;
  maximumQuestionLimit?: InputMaybe<Scalars['Float']['input']>;
  minimumOrderAmount?: InputMaybe<Scalars['Float']['input']>;
  paymentGateway?: InputMaybe<Array<PaymentGatewayInputType>>;
  promoPopup?: InputMaybe<PromoPopupInput>;
  pushNotification?: InputMaybe<AllInputInput>;
  reviewSystem?: InputMaybe<ReviewSystemInput>;
  seo?: InputMaybe<SeoSettingsInputType>;
  server_info?: InputMaybe<ServerInfoInputType>;
  shippingClass?: InputMaybe<Scalars['String']['input']>;
  signupPoints?: InputMaybe<Scalars['Int']['input']>;
  siteLink?: InputMaybe<Scalars['String']['input']>;
  siteSubtitle?: InputMaybe<Scalars['String']['input']>;
  siteTitle?: InputMaybe<Scalars['String']['input']>;
  smsEvent?: InputMaybe<EventSettingsInputType>;
  taxClass?: InputMaybe<Scalars['String']['input']>;
  useAi?: InputMaybe<Scalars['Boolean']['input']>;
  useCashOnDelivery?: InputMaybe<Scalars['Boolean']['input']>;
  useEnableGateway?: InputMaybe<Scalars['Boolean']['input']>;
  useGoogleMap?: InputMaybe<Scalars['Boolean']['input']>;
  useMustVerifyEmail?: InputMaybe<Scalars['Boolean']['input']>;
  useOtp?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Shipping = {
  __typename?: 'Shipping';
  amount: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  is_global: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  type: ShippingType;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export enum ShippingType {
  Fixed = 'FIXED',
  Free = 'FREE',
  Percentage = 'PERCENTAGE'
}

export type Shop = {
  __typename?: 'Shop';
  address?: Maybe<UserAddress>;
  balance?: Maybe<Balance>;
  cover_image?: Maybe<Attachment>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  distance?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  is_active?: Maybe<Scalars['Boolean']['output']>;
  lat?: Maybe<Scalars['Float']['output']>;
  lng?: Maybe<Scalars['Float']['output']>;
  logo?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orders_count?: Maybe<Scalars['Int']['output']>;
  owner: User;
  owner_id: Scalars['Int']['output'];
  products_count?: Maybe<Scalars['Int']['output']>;
  refunds?: Maybe<Array<Refund>>;
  settings?: Maybe<ShopSettings>;
  slug?: Maybe<Scalars['String']['output']>;
  staffs?: Maybe<Array<User>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type ShopInputType = {
  address?: InputMaybe<UserAddressInputType>;
  balance?: InputMaybe<BalanceInputType>;
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  distance?: InputMaybe<Scalars['Float']['input']>;
  is_active?: InputMaybe<Scalars['Boolean']['input']>;
  lat?: InputMaybe<Scalars['Float']['input']>;
  lng?: InputMaybe<Scalars['Float']['input']>;
  logo?: InputMaybe<AttachmentInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  orders_count?: InputMaybe<Scalars['Int']['input']>;
  owner: UserInputType;
  owner_id: Scalars['Int']['input'];
  products_count?: InputMaybe<Scalars['Int']['input']>;
  refunds?: InputMaybe<Array<RefundInputType>>;
  settings?: InputMaybe<ShopSettingsInputType>;
  slug?: InputMaybe<Scalars['String']['input']>;
  staffs?: InputMaybe<Array<UserInputType>>;
};

export type ShopPaginator = {
  __typename?: 'ShopPaginator';
  data: Array<Shop>;
  paginatorInfo: PaginatorInfo;
};

export type ShopSettings = {
  __typename?: 'ShopSettings';
  contact?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Location>;
  notifications?: Maybe<Notifications>;
  socials?: Maybe<Array<ShopSocials>>;
  website?: Maybe<Scalars['String']['output']>;
};

export type ShopSettingsInputType = {
  contact?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<LocationInput>;
  notifications?: InputMaybe<NotificationsInputType>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type ShopSocialInput = {
  icon?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ShopSocials = {
  __typename?: 'ShopSocials';
  icon?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type Social = {
  __typename?: 'Social';
  link: Scalars['String']['output'];
  type: Scalars['String']['output'];
};

export type SocialInputType = {
  link: Scalars['String']['input'];
  type: Scalars['String']['input'];
};

export type SocialLoginInput = {
  access_token: Scalars['String']['input'];
  provider: Scalars['String']['input'];
};

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type StoreNotice = {
  __typename?: 'StoreNotice';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  created_by?: Maybe<Scalars['ID']['output']>;
  creator?: Maybe<User>;
  creator_role?: Maybe<Scalars['String']['output']>;
  deleted_at?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  effective_from?: Maybe<Scalars['String']['output']>;
  expire_at: Scalars['String']['output'];
  expired_at: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  is_read?: Maybe<Scalars['Boolean']['output']>;
  notice: Scalars['String']['output'];
  priority: StoreNoticePriority;
  read_status?: Maybe<StoreNoticeRead>;
  received_by?: Maybe<Array<Scalars['Float']['output']>>;
  shops?: Maybe<Array<Shop>>;
  type?: Maybe<StoreNoticeType>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  updated_by?: Maybe<Scalars['ID']['output']>;
  users?: Maybe<Array<User>>;
};

export enum StoreNoticePriority {
  High = 'High',
  Low = 'Low',
  Medium = 'Medium'
}

export type StoreNoticeRead = {
  __typename?: 'StoreNoticeRead';
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pivot?: Maybe<StoreNoticeUserPivot>;
};

export enum StoreNoticeType {
  AllShop = 'ALL_SHOP',
  AllVendor = 'ALL_VENDOR',
  SpecificShop = 'SPECIFIC_SHOP',
  SpecificVendor = 'SPECIFIC_VENDOR'
}

export type StoreNoticeUserPivot = {
  __typename?: 'StoreNoticeUserPivot';
  is_read: Scalars['Boolean']['output'];
  store_notice_id?: Maybe<Scalars['ID']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type StoreNoticesPaginator = {
  __typename?: 'StoreNoticesPaginator';
  data: Array<StoreNotice>;
  paginatorInfo: PaginatorInfo;
};

export type SuccessResponse = {
  __typename?: 'SuccessResponse';
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

export type Tag = {
  __typename?: 'Tag';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  details?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  language: Scalars['String']['output'];
  name: Scalars['String']['output'];
  parent?: Maybe<Scalars['Int']['output']>;
  products?: Maybe<Array<Product>>;
  slug: Scalars['String']['output'];
  translated_languages: Array<Scalars['String']['output']>;
  type?: Maybe<Type>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type TagInputType = {
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language: Scalars['String']['input'];
  name: Scalars['String']['input'];
  parent?: InputMaybe<Scalars['Int']['input']>;
  products?: InputMaybe<Array<ProductInputType>>;
  slug: Scalars['String']['input'];
  translated_languages: Array<Scalars['String']['input']>;
  type?: InputMaybe<TypeInputType>;
};

export type TagPaginator = {
  __typename?: 'TagPaginator';
  data: Array<Tag>;
  paginatorInfo: PaginatorInfo;
};

export type Tax = {
  __typename?: 'Tax';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  is_global: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  on_shipping?: Maybe<Scalars['Boolean']['output']>;
  priority?: Maybe<Scalars['Int']['output']>;
  rate: Scalars['Float']['output'];
  state?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

export type TermsAndConditionPaginator = {
  __typename?: 'TermsAndConditionPaginator';
  data: Array<TermsAndConditions>;
  paginatorInfo: PaginatorInfo;
};

export type TermsAndConditions = {
  __typename?: 'TermsAndConditions';
  created_at?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  is_approved?: Maybe<Scalars['Boolean']['output']>;
  issued_by?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type TopRatedProduct = {
  __typename?: 'TopRatedProduct';
  actual_rating?: Maybe<Scalars['Float']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  max_price?: Maybe<Scalars['Float']['output']>;
  min_price?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  product_type?: Maybe<Scalars['String']['output']>;
  rating_count?: Maybe<Scalars['Int']['output']>;
  regular_price?: Maybe<Scalars['Float']['output']>;
  sale_price?: Maybe<Scalars['Float']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  total_rating?: Maybe<Scalars['Int']['output']>;
  type_id: Scalars['Int']['output'];
  type_slug?: Maybe<Scalars['String']['output']>;
};

export type TotalYearSaleByMonth = {
  __typename?: 'TotalYearSaleByMonth';
  month?: Maybe<Scalars['String']['output']>;
  total?: Maybe<Scalars['Float']['output']>;
};

export type Type = {
  __typename?: 'Type';
  banners?: Maybe<Array<Banner>>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  language?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  promotional_sliders?: Maybe<Array<Attachment>>;
  settings?: Maybe<TypeSettings>;
  slug?: Maybe<Scalars['String']['output']>;
  translated_languages?: Maybe<Array<Scalars['String']['output']>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type TypeInputType = {
  banners?: InputMaybe<Array<BannerInputType>>;
  icon?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  promotional_sliders?: InputMaybe<Array<AttachmentInput>>;
  settings?: InputMaybe<TypeSettingsInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  translated_languages?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type TypeSettings = {
  __typename?: 'TypeSettings';
  authors?: Maybe<CompactDemoAuthorsInput>;
  bestSelling?: Maybe<CompactBestSellingInput>;
  category?: Maybe<CompactDemoCategoryInput>;
  handpickedProducts?: Maybe<CompactDemoHandpickedProductsInput>;
  isHome?: Maybe<Scalars['Boolean']['output']>;
  layoutType?: Maybe<Scalars['String']['output']>;
  manufactures?: Maybe<CompactDemoManufacturesInput>;
  newArrival?: Maybe<CompactDemoNewArrivalInput>;
  popularProducts?: Maybe<CompactDemoPopularProductsInput>;
  productCard?: Maybe<Scalars['String']['output']>;
};

export type TypeSettingsInput = {
  authors?: InputMaybe<CompactDemoAuthorsInputType>;
  bestSelling?: InputMaybe<CompactBestSellingInputType>;
  category?: InputMaybe<CompactDemoCategoryInputType>;
  handpickedProducts?: InputMaybe<CompactDemoHandpickedProductsInputType>;
  isHome?: InputMaybe<Scalars['Boolean']['input']>;
  layoutType?: InputMaybe<Scalars['String']['input']>;
  manufactures?: InputMaybe<CompactDemoManufacturesInputType>;
  newArrival?: InputMaybe<CompactDemoNewArrivalInputType>;
  popularProducts?: InputMaybe<CompactDemoPopularProductsInputType>;
  productCard?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateAddressInput = {
  address?: InputMaybe<UserAddressInputType>;
  customer?: InputMaybe<UserInputType>;
  default?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateAttributeInput = {
  id: Scalars['ID']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['String']['input']>;
  values?: InputMaybe<Array<AttributeValueInput>>;
};

export type UpdateAuthorInput = {
  bio?: InputMaybe<Scalars['String']['input']>;
  born?: InputMaybe<Scalars['String']['input']>;
  cover_image?: InputMaybe<AttachmentInput>;
  death?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  languages?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  products_count?: InputMaybe<Scalars['Int']['input']>;
  quote?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
};

export type UpdateCardInput = {
  default_card?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  method_key?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateCategoryInput = {
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  parent?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<ConnectTypeBelongsTo>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateCouponInput = {
  active_from?: InputMaybe<Scalars['String']['input']>;
  amount?: InputMaybe<Scalars['Float']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  expire_at?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_approve?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  minimum_cart_amount?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  target?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateEmailUserInput = {
  email: Scalars['String']['input'];
};

export type UpdateFaqInput = {
  faq_description?: InputMaybe<Scalars['String']['input']>;
  faq_title?: InputMaybe<Scalars['String']['input']>;
  faq_type?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateFlashSaleInput = {
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  end_date?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  rate?: InputMaybe<Scalars['Float']['input']>;
  sale_builder?: InputMaybe<SaleBuilderInput>;
  sale_status?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  start_date?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateFlashSaleRequestInput = {
  flash_sale_id?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  requested_product_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateManufacturerInput = {
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_approved?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  products_count?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  socials?: InputMaybe<Array<ShopSocialInput>>;
  type_id: Scalars['ID']['input'];
  website?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateNotifyLogInput = {
  receiver: Scalars['Int']['input'];
};

export type UpdateOrderInput = {
  amount?: InputMaybe<Scalars['Float']['input']>;
  billing_address?: InputMaybe<UserAddressInput>;
  card?: InputMaybe<CardInput>;
  coupon_id?: InputMaybe<Scalars['ID']['input']>;
  customer_contact?: InputMaybe<Scalars['String']['input']>;
  customer_id?: InputMaybe<Scalars['ID']['input']>;
  customer_name?: InputMaybe<Scalars['String']['input']>;
  delivery_fee?: InputMaybe<Scalars['Float']['input']>;
  delivery_time?: InputMaybe<Scalars['String']['input']>;
  discount?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  isFullWalletPayment?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  order_status?: InputMaybe<Scalars['String']['input']>;
  paid_total?: InputMaybe<Scalars['Float']['input']>;
  payment_gateway?: InputMaybe<PaymentGatewayType>;
  payment_sub_gateway?: InputMaybe<Scalars['String']['input']>;
  products?: InputMaybe<Array<ConnectProductOrderPivot>>;
  sales_tax?: InputMaybe<Scalars['Float']['input']>;
  shipping_address?: InputMaybe<UserAddressInput>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  total?: InputMaybe<Scalars['Float']['input']>;
  use_wallet_points?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateOrderStatusInput = {
  color?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  serial?: InputMaybe<Scalars['Int']['input']>;
};

export type UpdateProductInput = {
  author?: InputMaybe<AuthorInputType>;
  author_id?: InputMaybe<Scalars['ID']['input']>;
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  description?: InputMaybe<Scalars['String']['input']>;
  external_product_button_text?: InputMaybe<Scalars['String']['input']>;
  external_product_url?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<AttachmentInput>>;
  height?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  in_flash_sale?: InputMaybe<Scalars['Int']['input']>;
  in_stock?: InputMaybe<Scalars['Boolean']['input']>;
  is_digital?: InputMaybe<Scalars['Boolean']['input']>;
  is_external?: InputMaybe<Scalars['Boolean']['input']>;
  is_taxable?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  length?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<ManufacturerInputType>;
  manufacturer_id?: InputMaybe<Scalars['ID']['input']>;
  max_price?: InputMaybe<Scalars['Float']['input']>;
  min_price?: InputMaybe<Scalars['Float']['input']>;
  my_review?: InputMaybe<Array<ReviewInputType>>;
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  product_type?: InputMaybe<ProductType>;
  quantity?: InputMaybe<Scalars['Int']['input']>;
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  sold_quantity?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ProductStatus>;
  tags?: InputMaybe<Array<Scalars['ID']['input']>>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
  unit?: InputMaybe<Scalars['String']['input']>;
  variation_options?: InputMaybe<UpsertVariationsHasMany>;
  variations?: InputMaybe<Array<AttributeValueInputType>>;
  video?: InputMaybe<Array<VideoInputType>>;
  width?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateQuestionInput = {
  answer?: InputMaybe<Scalars['String']['input']>;
  feedbacks?: InputMaybe<Array<FeedbackInputType>>;
  my_feedback?: InputMaybe<FeedbackInputType>;
  negative_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  positive_feedbacks_count?: InputMaybe<Scalars['Float']['input']>;
  product_id?: InputMaybe<Scalars['ID']['input']>;
  question?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  user_id?: InputMaybe<Scalars['Float']['input']>;
};

export type UpdateRefundInput = {
  id: Scalars['ID']['input'];
  status: RefundStatus;
};

export type UpdateRefundPolicyInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateRefundReasonInput = {
  id: Scalars['ID']['input'];
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateReviewInput = {
  comment?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  order_id?: InputMaybe<Scalars['String']['input']>;
  photos?: InputMaybe<Array<AttachmentInput>>;
  product_id?: InputMaybe<Scalars['String']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
  shop_id?: InputMaybe<Scalars['String']['input']>;
  variation_option_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateShippingInput = {
  amount?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  is_global?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<ShippingType>;
};

export type UpdateShopInput = {
  address?: InputMaybe<UserAddressInputType>;
  balance?: InputMaybe<BalanceInput>;
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  cover_image?: InputMaybe<AttachmentInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  logo?: InputMaybe<AttachmentInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  settings?: InputMaybe<ShopSettingsInputType>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateStoreNoticeInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['String']['input']>;
  expired_at?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  notice?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['String']['input']>;
  received_by?: InputMaybe<Array<Scalars['Float']['input']>>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateTagInput = {
  details?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<ConnectTypeBelongsTo>;
  type_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateTaxInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  is_global?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  on_shipping?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  rate?: InputMaybe<Scalars['Float']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateTermsConditionsInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  issued_by?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateTypeInput = {
  banners?: InputMaybe<Array<BannerInputType>>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  promotional_sliders?: InputMaybe<Array<AttachmentInput>>;
  settings?: InputMaybe<TypeSettingsInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserInput = {
  address?: InputMaybe<AddressHasMany>;
  email?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  permission?: InputMaybe<Permission>;
  profile?: InputMaybe<ProfileHasOne>;
};

export type UpsertVariationsHasMany = {
  delete?: InputMaybe<Array<Scalars['ID']['input']>>;
  upsert?: InputMaybe<Array<VariationInput>>;
};

export type User = {
  __typename?: 'User';
  address?: Maybe<Array<Address>>;
  created_at?: Maybe<Scalars['DateTime']['output']>;
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  is_active?: Maybe<Scalars['Boolean']['output']>;
  last_order?: Maybe<Order>;
  managed_shop?: Maybe<Shop>;
  name: Scalars['String']['output'];
  orders?: Maybe<Array<Order>>;
  password?: Maybe<Scalars['String']['output']>;
  permissions: Array<Permissions>;
  profile?: Maybe<Profile>;
  refunds?: Maybe<Array<Refund>>;
  shop_id?: Maybe<Scalars['Float']['output']>;
  shops?: Maybe<Array<Shop>>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  wallet?: Maybe<Wallet>;
};

export type UserAddress = {
  __typename?: 'UserAddress';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  street_address?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

export type UserAddressInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  street_address?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type UserAddressInputType = {
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  street_address?: InputMaybe<Scalars['String']['input']>;
  zip?: InputMaybe<Scalars['String']['input']>;
};

export type UserAddressUpsertInput = {
  address: UserAddressInput;
  default?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  title: Scalars['String']['input'];
  type: AddressType;
};

export type UserInputType = {
  address?: InputMaybe<Array<AddressInputType>>;
  email: Scalars['String']['input'];
  is_active?: InputMaybe<Scalars['Boolean']['input']>;
  last_order?: InputMaybe<OrderInputType>;
  managed_shop?: InputMaybe<ShopInputType>;
  name: Scalars['String']['input'];
  orders?: InputMaybe<Array<OrderInputType>>;
  password?: InputMaybe<Scalars['String']['input']>;
  permissions: Array<PermissionsInputType>;
  profile?: InputMaybe<ProfileInputType>;
  refunds?: InputMaybe<Array<RefundInputType>>;
  shop_id?: InputMaybe<Scalars['Float']['input']>;
  shops?: InputMaybe<Array<ShopInputType>>;
  wallet?: InputMaybe<WalletInputType>;
};

export type UserPaginator = {
  __typename?: 'UserPaginator';
  data: Array<User>;
  paginatorInfo: PaginatorInfo;
};

export type UserProfileInput = {
  avatar: AttachmentInput;
  bio?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  socials?: InputMaybe<Array<SocialInputType>>;
};

export type UserToNotify = {
  __typename?: 'UserToNotify';
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
};

export type Variation = {
  __typename?: 'Variation';
  digital_file?: Maybe<VariationDigitalFile>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  is_digital: Scalars['Boolean']['output'];
  is_disable: Scalars['Boolean']['output'];
  options: Array<VariationOption>;
  price: Scalars['Float']['output'];
  product?: Maybe<Product>;
  quantity: Scalars['Int']['output'];
  sale_price?: Maybe<Scalars['Float']['output']>;
  sku: Scalars['String']['output'];
  sold_quantity: Scalars['Int']['output'];
  title: Scalars['String']['output'];
};

export type VariationDigitalFile = {
  __typename?: 'VariationDigitalFile';
  attachment_id: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
  url: Scalars['String']['output'];
};

export type VariationDigitalFileInputType = {
  attachment_id: Scalars['Int']['input'];
  url: Scalars['String']['input'];
};

export type VariationInput = {
  digital_file?: InputMaybe<VariationDigitalFileInputType>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_digital: Scalars['Boolean']['input'];
  is_disable: Scalars['Boolean']['input'];
  options: Array<VariationOptionInputType>;
  price: Scalars['Float']['input'];
  product?: InputMaybe<ProductInputType>;
  quantity: Scalars['Int']['input'];
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  sku: Scalars['String']['input'];
  sold_quantity: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type VariationInputType = {
  digital_file?: InputMaybe<VariationDigitalFileInputType>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<AttachmentInput>;
  is_digital: Scalars['Boolean']['input'];
  is_disable: Scalars['Boolean']['input'];
  options: Array<VariationOptionInputType>;
  price: Scalars['Float']['input'];
  product?: InputMaybe<ProductInputType>;
  quantity: Scalars['Int']['input'];
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  sku: Scalars['String']['input'];
  sold_quantity: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type VariationOption = {
  __typename?: 'VariationOption';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type VariationOptionInputType = {
  name: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type Vendor = {
  __typename?: 'Vendor';
  createQuestion?: Maybe<Scalars['Boolean']['output']>;
  createReview?: Maybe<Scalars['Boolean']['output']>;
  paymentOrder?: Maybe<Scalars['Boolean']['output']>;
  refundOrder?: Maybe<Scalars['Boolean']['output']>;
  statusChangeOrder?: Maybe<Scalars['Boolean']['output']>;
};

export type VendorInputType = {
  createQuestion?: InputMaybe<Scalars['Boolean']['input']>;
  createReview?: InputMaybe<Scalars['Boolean']['input']>;
  paymentOrder?: InputMaybe<Scalars['Boolean']['input']>;
  refundOrder?: InputMaybe<Scalars['Boolean']['input']>;
  statusChangeOrder?: InputMaybe<Scalars['Boolean']['input']>;
};

export type VerifiedCheckoutData = {
  __typename?: 'VerifiedCheckoutData';
  shipping_charge: Scalars['Float']['output'];
  total_tax: Scalars['Float']['output'];
  unavailable_products: Array<Scalars['ID']['output']>;
  wallet_amount: Scalars['Int']['output'];
  wallet_currency: Scalars['Float']['output'];
};

export type VerifyCouponInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  item?: InputMaybe<Array<VerifyCouponItemInput>>;
  sub_total?: InputMaybe<Scalars['Float']['input']>;
};

export type VerifyCouponItemInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  in_flash_sale?: InputMaybe<Scalars['Int']['input']>;
  is_digital?: InputMaybe<Scalars['Boolean']['input']>;
  itemTotal?: InputMaybe<Scalars['Int']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Int']['input']>;
  quantity?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  stock?: InputMaybe<Scalars['Int']['input']>;
  unit?: InputMaybe<Scalars['String']['input']>;
};

export type VerifyCouponResponse = {
  __typename?: 'VerifyCouponResponse';
  coupon: Coupon;
  is_valid: Scalars['Boolean']['output'];
  message: Scalars['String']['output'];
};

export type VerifyForgetPasswordTokenInput = {
  email: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type VerifyOtpInput = {
  code: Scalars['String']['input'];
  otp_id: Scalars['String']['input'];
  phone_number: Scalars['String']['input'];
};

export type Video = {
  __typename?: 'Video';
  url: Scalars['String']['output'];
};

export type VideoInputType = {
  url: Scalars['String']['input'];
};

export type Wallet = {
  __typename?: 'Wallet';
  available_points: Scalars['Int']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  points_used: Scalars['Int']['output'];
  total_points: Scalars['Int']['output'];
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type WalletInputType = {
  available_points: Scalars['Int']['input'];
  points_used: Scalars['Int']['input'];
  total_points: Scalars['Int']['input'];
};

export type WalletPoint = {
  __typename?: 'WalletPoint';
  amount: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
};

export type WalletPointInputType = {
  amount: Scalars['Float']['input'];
  id: Scalars['ID']['input'];
};

export type Withdraw = {
  __typename?: 'Withdraw';
  amount: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['DateTime']['output']>;
  details: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  note: Scalars['String']['output'];
  payment_method: Scalars['String']['output'];
  shop?: Maybe<Shop>;
  shop_id: Scalars['ID']['output'];
  status?: Maybe<WithdrawStatus>;
  updated_at?: Maybe<Scalars['DateTime']['output']>;
};

export type WithdrawPaginator = {
  __typename?: 'WithdrawPaginator';
  data: Array<Withdraw>;
  paginatorInfo: PaginatorInfo;
};

export enum WithdrawStatus {
  Approved = 'APPROVED',
  OnHold = 'ON_HOLD',
  Pending = 'PENDING',
  Processing = 'PROCESSING',
  Rejected = 'REJECTED'
}



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes<RefType extends Record<string, unknown>> = {
  FileableUnion: ( Product ) | ( Variation );
};


/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AbusiveReport: ResolverTypeWrapper<AbusiveReport>;
  AbusiveReportInputType: AbusiveReportInputType;
  AcceptAbusiveReportInput: AcceptAbusiveReportInput;
  AddNewCardInput: AddNewCardInput;
  AddPointsInput: AddPointsInput;
  AddStaffInput: AddStaffInput;
  Address: ResolverTypeWrapper<Address>;
  AddressHasMany: AddressHasMany;
  AddressInputType: AddressInputType;
  AddressType: AddressType;
  Admin: ResolverTypeWrapper<Admin>;
  AdminInputType: AdminInputType;
  Ai: ResolverTypeWrapper<Ai>;
  AiInput: AiInput;
  AllInput: ResolverTypeWrapper<AllInput>;
  AllInputInput: AllInputInput;
  Analytics: ResolverTypeWrapper<Analytics>;
  ApproveShopInput: ApproveShopInput;
  ApproveWithdrawInput: ApproveWithdrawInput;
  Attachment: ResolverTypeWrapper<Attachment>;
  AttachmentInput: AttachmentInput;
  Attribute: ResolverTypeWrapper<Attribute>;
  AttributeInputType: AttributeInputType;
  AttributeValue: ResolverTypeWrapper<AttributeValue>;
  AttributeValueInput: AttributeValueInput;
  AttributeValueInputType: AttributeValueInputType;
  AuthResponse: ResolverTypeWrapper<AuthResponse>;
  Author: ResolverTypeWrapper<Author>;
  AuthorInputType: AuthorInputType;
  AuthorPaginator: ResolverTypeWrapper<AuthorPaginator>;
  Balance: ResolverTypeWrapper<Balance>;
  BalanceInput: BalanceInput;
  BalanceInputType: BalanceInputType;
  Banner: ResolverTypeWrapper<Banner>;
  BannerInputType: BannerInputType;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Card: ResolverTypeWrapper<Card>;
  CardInput: CardInput;
  Category: ResolverTypeWrapper<Category>;
  CategoryInputType: CategoryInputType;
  CategoryPaginator: ResolverTypeWrapper<CategoryPaginator>;
  CategoryWiseProduct: ResolverTypeWrapper<CategoryWiseProduct>;
  CategoryWiseProductSale: ResolverTypeWrapper<CategoryWiseProductSale>;
  ChangePasswordInput: ChangePasswordInput;
  CheckoutVerificationInput: CheckoutVerificationInput;
  CompactBestSellingInput: ResolverTypeWrapper<CompactBestSellingInput>;
  CompactBestSellingInputType: CompactBestSellingInputType;
  CompactDemoAuthorsInput: ResolverTypeWrapper<CompactDemoAuthorsInput>;
  CompactDemoAuthorsInputType: CompactDemoAuthorsInputType;
  CompactDemoCategoryInput: ResolverTypeWrapper<CompactDemoCategoryInput>;
  CompactDemoCategoryInputType: CompactDemoCategoryInputType;
  CompactDemoHandpickedProductsInput: ResolverTypeWrapper<CompactDemoHandpickedProductsInput>;
  CompactDemoHandpickedProductsInputType: CompactDemoHandpickedProductsInputType;
  CompactDemoManufacturesInput: ResolverTypeWrapper<CompactDemoManufacturesInput>;
  CompactDemoManufacturesInputType: CompactDemoManufacturesInputType;
  CompactDemoNewArrivalInput: ResolverTypeWrapper<CompactDemoNewArrivalInput>;
  CompactDemoNewArrivalInputType: CompactDemoNewArrivalInputType;
  CompactDemoPopularProductsInput: ResolverTypeWrapper<CompactDemoPopularProductsInput>;
  CompactDemoPopularProductsInputType: CompactDemoPopularProductsInputType;
  CompactProductInput: ResolverTypeWrapper<CompactProductInput>;
  CompactProductInputType: CompactProductInputType;
  CompactTypeProductCardInput: ResolverTypeWrapper<CompactTypeProductCardInput>;
  CompactTypeProductCardInputType: CompactTypeProductCardInputType;
  CompactTypeSettingsInput: ResolverTypeWrapper<CompactTypeSettingsInput>;
  CompactTypeSettingsInputType: CompactTypeSettingsInputType;
  ConnectBelongsTo: ConnectBelongsTo;
  ConnectProductOrderPivot: ConnectProductOrderPivot;
  ConnectTypeBelongsTo: ConnectTypeBelongsTo;
  ContactDetails: ResolverTypeWrapper<ContactDetails>;
  ContactDetailsInput: ContactDetailsInput;
  ContactInput: ContactInput;
  ContactResponse: ResolverTypeWrapper<ContactResponse>;
  Conversation: ResolverTypeWrapper<Conversation>;
  ConversationPaginator: ResolverTypeWrapper<ConversationPaginator>;
  Coupon: ResolverTypeWrapper<Coupon>;
  CouponInputType: CouponInputType;
  CouponPaginator: ResolverTypeWrapper<CouponPaginator>;
  CreateAbusiveReportInput: CreateAbusiveReportInput;
  CreateAddressInput: CreateAddressInput;
  CreateAttributeInput: CreateAttributeInput;
  CreateAuthorInput: CreateAuthorInput;
  CreateCategoryInput: CreateCategoryInput;
  CreateConversationInput: CreateConversationInput;
  CreateCouponInput: CreateCouponInput;
  CreateFaqInput: CreateFaqInput;
  CreateFeedbackInput: CreateFeedbackInput;
  CreateFlashSaleInput: CreateFlashSaleInput;
  CreateFlashSaleRequestInput: CreateFlashSaleRequestInput;
  CreateManufacturerInput: CreateManufacturerInput;
  CreateMessageInput: CreateMessageInput;
  CreateOrderInput: CreateOrderInput;
  CreateOrderPaymentInput: CreateOrderPaymentInput;
  CreateOrderStatusInput: CreateOrderStatusInput;
  CreateProductInput: CreateProductInput;
  CreateQuestionInput: CreateQuestionInput;
  CreateRefundInput: CreateRefundInput;
  CreateRefundPolicyInput: CreateRefundPolicyInput;
  CreateRefundReasonInput: CreateRefundReasonInput;
  CreateReviewInput: CreateReviewInput;
  CreateShippingInput: CreateShippingInput;
  CreateShopInput: CreateShopInput;
  CreateStoreNoticeInput: CreateStoreNoticeInput;
  CreateTagInput: CreateTagInput;
  CreateTaxInput: CreateTaxInput;
  CreateTermsConditionsInput: CreateTermsConditionsInput;
  CreateTypeInput: CreateTypeInput;
  CreateWishlistInput: CreateWishlistInput;
  CreateWithdrawInput: CreateWithdrawInput;
  CurrencyOptions: ResolverTypeWrapper<CurrencyOptions>;
  CurrencyOptionsInputType: CurrencyOptionsInputType;
  Customer: ResolverTypeWrapper<Customer>;
  CustomerInputType: CustomerInputType;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  DeliveryTime: ResolverTypeWrapper<DeliveryTime>;
  DeliveryTimeInputType: DeliveryTimeInputType;
  DigitalFile: ResolverTypeWrapper<Omit<DigitalFile, 'fileable'> & { fileable?: Maybe<ResolversTypes['FileableUnion']> }>;
  EventSettings: ResolverTypeWrapper<EventSettings>;
  EventSettingsInputType: EventSettingsInputType;
  FacebookSettings: ResolverTypeWrapper<FacebookSettings>;
  FacebookSettingsInputType: FacebookSettingsInputType;
  FaqPaginator: ResolverTypeWrapper<FaqPaginator>;
  Faqs: ResolverTypeWrapper<Faqs>;
  Feedback: ResolverTypeWrapper<Feedback>;
  FeedbackInputType: FeedbackInputType;
  FileableUnion: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['FileableUnion']>;
  FlashSale: ResolverTypeWrapper<FlashSale>;
  FlashSalePaginator: ResolverTypeWrapper<FlashSalePaginator>;
  FlashSaleRequestPaginator: ResolverTypeWrapper<FlashSaleRequestPaginator>;
  FlashSaleRequests: ResolverTypeWrapper<FlashSaleRequests>;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  ForgetPasswordInput: ForgetPasswordInput;
  GenerateDownloadableUrlInput: GenerateDownloadableUrlInput;
  GenerateInvoiceDownloadUrlInput: GenerateInvoiceDownloadUrlInput;
  GenerateOrderExportUrlInput: GenerateOrderExportUrlInput;
  GoogleMapLocation: ResolverTypeWrapper<GoogleMapLocation>;
  GoogleMapLocationInput: GoogleMapLocationInput;
  GoogleSettings: ResolverTypeWrapper<GoogleSettings>;
  GoogleSettingsInputType: GoogleSettingsInputType;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  InvoiceTranslatedLanguages: InvoiceTranslatedLanguages;
  Location: ResolverTypeWrapper<Location>;
  LocationInput: LocationInput;
  LoginInput: LoginInput;
  Maintenance: ResolverTypeWrapper<Maintenance>;
  MaintenanceInput: MaintenanceInput;
  MakeOrRevokeAdminInput: MakeOrRevokeAdminInput;
  Manufacturer: ResolverTypeWrapper<Manufacturer>;
  ManufacturerInputType: ManufacturerInputType;
  ManufacturerPaginator: ResolverTypeWrapper<ManufacturerPaginator>;
  Message: ResolverTypeWrapper<Message>;
  MessagePaginator: ResolverTypeWrapper<MessagePaginator>;
  Mutation: ResolverTypeWrapper<{}>;
  MyQuestionPaginator: ResolverTypeWrapper<MyQuestionPaginator>;
  MyReportPaginator: ResolverTypeWrapper<MyReportPaginator>;
  Notifications: ResolverTypeWrapper<Notifications>;
  NotificationsInputType: NotificationsInputType;
  NotifyLogs: ResolverTypeWrapper<NotifyLogs>;
  NotifyLogsPaginator: ResolverTypeWrapper<NotifyLogsPaginator>;
  Order: ResolverTypeWrapper<Order>;
  OrderByStatus: ResolverTypeWrapper<OrderByStatus>;
  OrderFiles: ResolverTypeWrapper<OrderFiles>;
  OrderInputType: OrderInputType;
  OrderPaginator: ResolverTypeWrapper<OrderPaginator>;
  OrderProductPivot: ResolverTypeWrapper<OrderProductPivot>;
  OrderStatus: ResolverTypeWrapper<OrderStatus>;
  OrderStatusPaginator: ResolverTypeWrapper<OrderStatusPaginator>;
  OrderedFilePaginator: ResolverTypeWrapper<OrderedFilePaginator>;
  OtpInput: OtpInput;
  OtpLoginInput: OtpLoginInput;
  OtpResponse: ResolverTypeWrapper<OtpResponse>;
  PaginatorInfo: ResolverTypeWrapper<PaginatorInfo>;
  PasswordChangeResponse: ResolverTypeWrapper<PasswordChangeResponse>;
  PaymentGateWay: ResolverTypeWrapper<PaymentGateWay>;
  PaymentGateway: ResolverTypeWrapper<PaymentGateway>;
  PaymentGatewayInputType: PaymentGatewayInputType;
  PaymentGatewayType: PaymentGatewayType;
  PaymentInfo: ResolverTypeWrapper<PaymentInfo>;
  PaymentInfoInput: PaymentInfoInput;
  PaymentIntent: ResolverTypeWrapper<PaymentIntent>;
  PaymentIntentInfo: ResolverTypeWrapper<PaymentIntentInfo>;
  PaymentIntentInfoType: PaymentIntentInfoType;
  PaymentIntentType: PaymentIntentType;
  Permission: Permission;
  Permissions: ResolverTypeWrapper<Permissions>;
  PermissionsInputType: PermissionsInputType;
  PivotInputType: PivotInputType;
  PopUpNotShow: ResolverTypeWrapper<PopUpNotShow>;
  PopUpNotShowInput: PopUpNotShowInput;
  PriceRange: PriceRange;
  Product: ResolverTypeWrapper<Product>;
  ProductInputType: ProductInputType;
  ProductPaginator: ResolverTypeWrapper<ProductPaginator>;
  ProductStatus: ProductStatus;
  ProductType: ProductType;
  Profile: ResolverTypeWrapper<Profile>;
  ProfileHasOne: ProfileHasOne;
  ProfileInput: ProfileInput;
  ProfileInputType: ProfileInputType;
  PromoPopup: ResolverTypeWrapper<PromoPopup>;
  PromoPopupInput: PromoPopupInput;
  PushNotification: ResolverTypeWrapper<PushNotification>;
  PushNotificationInput: PushNotificationInput;
  Query: ResolverTypeWrapper<{}>;
  QueryAllQuestionsOrderByColumn: QueryAllQuestionsOrderByColumn;
  QueryAttributesOrderByColumn: QueryAttributesOrderByColumn;
  QueryAttributesOrderByOrderByClause: QueryAttributesOrderByOrderByClause;
  QueryAuthorsOrderByColumn: QueryAuthorsOrderByColumn;
  QueryAuthorsOrderByOrderByClause: QueryAuthorsOrderByOrderByClause;
  QueryCategoriesHasTypeColumn: QueryCategoriesHasTypeColumn;
  QueryCategoriesHasTypeWhereHasConditions: QueryCategoriesHasTypeWhereHasConditions;
  QueryCategoriesHasTypeWhereHasConditionsRelation: QueryCategoriesHasTypeWhereHasConditionsRelation;
  QueryCategoriesOrderByColumn: QueryCategoriesOrderByColumn;
  QueryCategoriesOrderByOrderByClause: QueryCategoriesOrderByOrderByClause;
  QueryManufacturersHasTypeColumn: QueryManufacturersHasTypeColumn;
  QueryManufacturersHasTypeWhereHasConditions: QueryManufacturersHasTypeWhereHasConditions;
  QueryManufacturersHasTypeWhereHasConditionsRelation: QueryManufacturersHasTypeWhereHasConditionsRelation;
  QueryManufacturersOrderByColumn: QueryManufacturersOrderByColumn;
  QueryManufacturersOrderByOrderByClause: QueryManufacturersOrderByOrderByClause;
  QueryMyQuestionsOrderByOrderByClause: QueryMyQuestionsOrderByOrderByClause;
  QueryMyReportsOrderByColumn: QueryMyReportsOrderByColumn;
  QueryMyReportsOrderByOrderByClause: QueryMyReportsOrderByOrderByClause;
  QueryOrderFilesOrderByOrderByClause: QueryOrderFilesOrderByOrderByClause;
  QueryOrderStatusesOrderByColumn: QueryOrderStatusesOrderByColumn;
  QueryOrderStatusesOrderByOrderByClause: QueryOrderStatusesOrderByOrderByClause;
  QueryProductsHasAuthorColumn: QueryProductsHasAuthorColumn;
  QueryProductsHasAuthorWhereHasConditions: QueryProductsHasAuthorWhereHasConditions;
  QueryProductsHasAuthorWhereHasConditionsRelation: QueryProductsHasAuthorWhereHasConditionsRelation;
  QueryProductsHasCategoriesColumn: QueryProductsHasCategoriesColumn;
  QueryProductsHasCategoriesWhereHasConditions: QueryProductsHasCategoriesWhereHasConditions;
  QueryProductsHasCategoriesWhereHasConditionsRelation: QueryProductsHasCategoriesWhereHasConditionsRelation;
  QueryProductsHasManufacturerColumn: QueryProductsHasManufacturerColumn;
  QueryProductsHasManufacturerWhereHasConditions: QueryProductsHasManufacturerWhereHasConditions;
  QueryProductsHasManufacturerWhereHasConditionsRelation: QueryProductsHasManufacturerWhereHasConditionsRelation;
  QueryProductsHasTagsColumn: QueryProductsHasTagsColumn;
  QueryProductsHasTagsWhereHasConditions: QueryProductsHasTagsWhereHasConditions;
  QueryProductsHasTagsWhereHasConditionsRelation: QueryProductsHasTagsWhereHasConditionsRelation;
  QueryProductsHasTypeColumn: QueryProductsHasTypeColumn;
  QueryProductsHasTypeWhereHasConditions: QueryProductsHasTypeWhereHasConditions;
  QueryProductsHasTypeWhereHasConditionsRelation: QueryProductsHasTypeWhereHasConditionsRelation;
  QueryQuestionsOrderByOrderByClause: QueryQuestionsOrderByOrderByClause;
  QueryReviewsOrderByColumn: QueryReviewsOrderByColumn;
  QueryReviewsOrderByOrderByClause: QueryReviewsOrderByOrderByClause;
  QueryShippingClassesOrderByColumn: QueryShippingClassesOrderByColumn;
  QueryShippingClassesOrderByOrderByClause: QueryShippingClassesOrderByOrderByClause;
  QueryTagsHasTypeColumn: QueryTagsHasTypeColumn;
  QueryTagsHasTypeWhereHasConditions: QueryTagsHasTypeWhereHasConditions;
  QueryTagsHasTypeWhereHasConditionsRelation: QueryTagsHasTypeWhereHasConditionsRelation;
  QueryTagsOrderByColumn: QueryTagsOrderByColumn;
  QueryTagsOrderByOrderByClause: QueryTagsOrderByOrderByClause;
  QueryTaxClassesOrderByColumn: QueryTaxClassesOrderByColumn;
  QueryTaxClassesOrderByOrderByClause: QueryTaxClassesOrderByOrderByClause;
  QueryTypesOrderByColumn: QueryTypesOrderByColumn;
  QueryTypesOrderByOrderByClause: QueryTypesOrderByOrderByClause;
  QueryUsersOrderByColumn: QueryUsersOrderByColumn;
  QueryUsersOrderByOrderByClause: QueryUsersOrderByOrderByClause;
  Question: ResolverTypeWrapper<Question>;
  QuestionPaginator: ResolverTypeWrapper<QuestionPaginator>;
  ReadAllNoticeInput: ReadAllNoticeInput;
  ReadSingleNoticeInput: ReadSingleNoticeInput;
  Refund: ResolverTypeWrapper<Refund>;
  RefundInputType: RefundInputType;
  RefundPaginator: ResolverTypeWrapper<RefundPaginator>;
  RefundPoliciesPaginator: ResolverTypeWrapper<RefundPoliciesPaginator>;
  RefundPolicy: ResolverTypeWrapper<RefundPolicy>;
  RefundPolicyStatus: RefundPolicyStatus;
  RefundPolicyTarget: RefundPolicyTarget;
  RefundReason: ResolverTypeWrapper<RefundReason>;
  RefundReasonInputType: RefundReasonInputType;
  RefundReasonsPaginator: ResolverTypeWrapper<RefundReasonsPaginator>;
  RefundStatus: RefundStatus;
  RegisterInput: RegisterInput;
  ResetPasswordInput: ResetPasswordInput;
  Review: ResolverTypeWrapper<Review>;
  ReviewInputType: ReviewInputType;
  ReviewPaginator: ResolverTypeWrapper<ReviewPaginator>;
  ReviewSystem: ResolverTypeWrapper<ReviewSystem>;
  ReviewSystemInput: ReviewSystemInput;
  SQLOperator: SqlOperator;
  SaleBuilder: ResolverTypeWrapper<SaleBuilder>;
  SaleBuilderInput: SaleBuilderInput;
  SavePaymentMethodInput: SavePaymentMethodInput;
  SeenMessageInput: SeenMessageInput;
  SeoSettings: ResolverTypeWrapper<SeoSettings>;
  SeoSettingsInputType: SeoSettingsInputType;
  ServerInfo: ResolverTypeWrapper<ServerInfo>;
  ServerInfoInputType: ServerInfoInputType;
  Settings: ResolverTypeWrapper<Settings>;
  SettingsInput: SettingsInput;
  SettingsOptions: ResolverTypeWrapper<SettingsOptions>;
  SettingsOptionsInput: SettingsOptionsInput;
  Shipping: ResolverTypeWrapper<Shipping>;
  ShippingType: ShippingType;
  Shop: ResolverTypeWrapper<Shop>;
  ShopInputType: ShopInputType;
  ShopPaginator: ResolverTypeWrapper<ShopPaginator>;
  ShopSettings: ResolverTypeWrapper<ShopSettings>;
  ShopSettingsInputType: ShopSettingsInputType;
  ShopSocialInput: ShopSocialInput;
  ShopSocials: ResolverTypeWrapper<ShopSocials>;
  Social: ResolverTypeWrapper<Social>;
  SocialInputType: SocialInputType;
  SocialLoginInput: SocialLoginInput;
  SortOrder: SortOrder;
  StoreNotice: ResolverTypeWrapper<StoreNotice>;
  StoreNoticePriority: StoreNoticePriority;
  StoreNoticeRead: ResolverTypeWrapper<StoreNoticeRead>;
  StoreNoticeType: StoreNoticeType;
  StoreNoticeUserPivot: ResolverTypeWrapper<StoreNoticeUserPivot>;
  StoreNoticesPaginator: ResolverTypeWrapper<StoreNoticesPaginator>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  SuccessResponse: ResolverTypeWrapper<SuccessResponse>;
  Tag: ResolverTypeWrapper<Tag>;
  TagInputType: TagInputType;
  TagPaginator: ResolverTypeWrapper<TagPaginator>;
  Tax: ResolverTypeWrapper<Tax>;
  TermsAndConditionPaginator: ResolverTypeWrapper<TermsAndConditionPaginator>;
  TermsAndConditions: ResolverTypeWrapper<TermsAndConditions>;
  TopRatedProduct: ResolverTypeWrapper<TopRatedProduct>;
  TotalYearSaleByMonth: ResolverTypeWrapper<TotalYearSaleByMonth>;
  Type: ResolverTypeWrapper<Type>;
  TypeInputType: TypeInputType;
  TypeSettings: ResolverTypeWrapper<TypeSettings>;
  TypeSettingsInput: TypeSettingsInput;
  UpdateAddressInput: UpdateAddressInput;
  UpdateAttributeInput: UpdateAttributeInput;
  UpdateAuthorInput: UpdateAuthorInput;
  UpdateCardInput: UpdateCardInput;
  UpdateCategoryInput: UpdateCategoryInput;
  UpdateCouponInput: UpdateCouponInput;
  UpdateEmailUserInput: UpdateEmailUserInput;
  UpdateFaqInput: UpdateFaqInput;
  UpdateFlashSaleInput: UpdateFlashSaleInput;
  UpdateFlashSaleRequestInput: UpdateFlashSaleRequestInput;
  UpdateManufacturerInput: UpdateManufacturerInput;
  UpdateNotifyLogInput: UpdateNotifyLogInput;
  UpdateOrderInput: UpdateOrderInput;
  UpdateOrderStatusInput: UpdateOrderStatusInput;
  UpdateProductInput: UpdateProductInput;
  UpdateQuestionInput: UpdateQuestionInput;
  UpdateRefundInput: UpdateRefundInput;
  UpdateRefundPolicyInput: UpdateRefundPolicyInput;
  UpdateRefundReasonInput: UpdateRefundReasonInput;
  UpdateReviewInput: UpdateReviewInput;
  UpdateShippingInput: UpdateShippingInput;
  UpdateShopInput: UpdateShopInput;
  UpdateStoreNoticeInput: UpdateStoreNoticeInput;
  UpdateTagInput: UpdateTagInput;
  UpdateTaxInput: UpdateTaxInput;
  UpdateTermsConditionsInput: UpdateTermsConditionsInput;
  UpdateTypeInput: UpdateTypeInput;
  UpdateUserInput: UpdateUserInput;
  Upload: ResolverTypeWrapper<Scalars['Upload']['output']>;
  UpsertVariationsHasMany: UpsertVariationsHasMany;
  User: ResolverTypeWrapper<User>;
  UserAddress: ResolverTypeWrapper<UserAddress>;
  UserAddressInput: UserAddressInput;
  UserAddressInputType: UserAddressInputType;
  UserAddressUpsertInput: UserAddressUpsertInput;
  UserInputType: UserInputType;
  UserPaginator: ResolverTypeWrapper<UserPaginator>;
  UserProfileInput: UserProfileInput;
  UserToNotify: ResolverTypeWrapper<UserToNotify>;
  Variation: ResolverTypeWrapper<Variation>;
  VariationDigitalFile: ResolverTypeWrapper<VariationDigitalFile>;
  VariationDigitalFileInputType: VariationDigitalFileInputType;
  VariationInput: VariationInput;
  VariationInputType: VariationInputType;
  VariationOption: ResolverTypeWrapper<VariationOption>;
  VariationOptionInputType: VariationOptionInputType;
  Vendor: ResolverTypeWrapper<Vendor>;
  VendorInputType: VendorInputType;
  VerifiedCheckoutData: ResolverTypeWrapper<VerifiedCheckoutData>;
  VerifyCouponInput: VerifyCouponInput;
  VerifyCouponItemInput: VerifyCouponItemInput;
  VerifyCouponResponse: ResolverTypeWrapper<VerifyCouponResponse>;
  VerifyForgetPasswordTokenInput: VerifyForgetPasswordTokenInput;
  VerifyOtpInput: VerifyOtpInput;
  Video: ResolverTypeWrapper<Video>;
  VideoInputType: VideoInputType;
  Wallet: ResolverTypeWrapper<Wallet>;
  WalletInputType: WalletInputType;
  WalletPoint: ResolverTypeWrapper<WalletPoint>;
  WalletPointInputType: WalletPointInputType;
  Withdraw: ResolverTypeWrapper<Withdraw>;
  WithdrawPaginator: ResolverTypeWrapper<WithdrawPaginator>;
  WithdrawStatus: WithdrawStatus;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AbusiveReport: AbusiveReport;
  AbusiveReportInputType: AbusiveReportInputType;
  AcceptAbusiveReportInput: AcceptAbusiveReportInput;
  AddNewCardInput: AddNewCardInput;
  AddPointsInput: AddPointsInput;
  AddStaffInput: AddStaffInput;
  Address: Address;
  AddressHasMany: AddressHasMany;
  AddressInputType: AddressInputType;
  Admin: Admin;
  AdminInputType: AdminInputType;
  Ai: Ai;
  AiInput: AiInput;
  AllInput: AllInput;
  AllInputInput: AllInputInput;
  Analytics: Analytics;
  ApproveShopInput: ApproveShopInput;
  ApproveWithdrawInput: ApproveWithdrawInput;
  Attachment: Attachment;
  AttachmentInput: AttachmentInput;
  Attribute: Attribute;
  AttributeInputType: AttributeInputType;
  AttributeValue: AttributeValue;
  AttributeValueInput: AttributeValueInput;
  AttributeValueInputType: AttributeValueInputType;
  AuthResponse: AuthResponse;
  Author: Author;
  AuthorInputType: AuthorInputType;
  AuthorPaginator: AuthorPaginator;
  Balance: Balance;
  BalanceInput: BalanceInput;
  BalanceInputType: BalanceInputType;
  Banner: Banner;
  BannerInputType: BannerInputType;
  Boolean: Scalars['Boolean']['output'];
  Card: Card;
  CardInput: CardInput;
  Category: Category;
  CategoryInputType: CategoryInputType;
  CategoryPaginator: CategoryPaginator;
  CategoryWiseProduct: CategoryWiseProduct;
  CategoryWiseProductSale: CategoryWiseProductSale;
  ChangePasswordInput: ChangePasswordInput;
  CheckoutVerificationInput: CheckoutVerificationInput;
  CompactBestSellingInput: CompactBestSellingInput;
  CompactBestSellingInputType: CompactBestSellingInputType;
  CompactDemoAuthorsInput: CompactDemoAuthorsInput;
  CompactDemoAuthorsInputType: CompactDemoAuthorsInputType;
  CompactDemoCategoryInput: CompactDemoCategoryInput;
  CompactDemoCategoryInputType: CompactDemoCategoryInputType;
  CompactDemoHandpickedProductsInput: CompactDemoHandpickedProductsInput;
  CompactDemoHandpickedProductsInputType: CompactDemoHandpickedProductsInputType;
  CompactDemoManufacturesInput: CompactDemoManufacturesInput;
  CompactDemoManufacturesInputType: CompactDemoManufacturesInputType;
  CompactDemoNewArrivalInput: CompactDemoNewArrivalInput;
  CompactDemoNewArrivalInputType: CompactDemoNewArrivalInputType;
  CompactDemoPopularProductsInput: CompactDemoPopularProductsInput;
  CompactDemoPopularProductsInputType: CompactDemoPopularProductsInputType;
  CompactProductInput: CompactProductInput;
  CompactProductInputType: CompactProductInputType;
  CompactTypeProductCardInput: CompactTypeProductCardInput;
  CompactTypeProductCardInputType: CompactTypeProductCardInputType;
  CompactTypeSettingsInput: CompactTypeSettingsInput;
  CompactTypeSettingsInputType: CompactTypeSettingsInputType;
  ConnectBelongsTo: ConnectBelongsTo;
  ConnectProductOrderPivot: ConnectProductOrderPivot;
  ConnectTypeBelongsTo: ConnectTypeBelongsTo;
  ContactDetails: ContactDetails;
  ContactDetailsInput: ContactDetailsInput;
  ContactInput: ContactInput;
  ContactResponse: ContactResponse;
  Conversation: Conversation;
  ConversationPaginator: ConversationPaginator;
  Coupon: Coupon;
  CouponInputType: CouponInputType;
  CouponPaginator: CouponPaginator;
  CreateAbusiveReportInput: CreateAbusiveReportInput;
  CreateAddressInput: CreateAddressInput;
  CreateAttributeInput: CreateAttributeInput;
  CreateAuthorInput: CreateAuthorInput;
  CreateCategoryInput: CreateCategoryInput;
  CreateConversationInput: CreateConversationInput;
  CreateCouponInput: CreateCouponInput;
  CreateFaqInput: CreateFaqInput;
  CreateFeedbackInput: CreateFeedbackInput;
  CreateFlashSaleInput: CreateFlashSaleInput;
  CreateFlashSaleRequestInput: CreateFlashSaleRequestInput;
  CreateManufacturerInput: CreateManufacturerInput;
  CreateMessageInput: CreateMessageInput;
  CreateOrderInput: CreateOrderInput;
  CreateOrderPaymentInput: CreateOrderPaymentInput;
  CreateOrderStatusInput: CreateOrderStatusInput;
  CreateProductInput: CreateProductInput;
  CreateQuestionInput: CreateQuestionInput;
  CreateRefundInput: CreateRefundInput;
  CreateRefundPolicyInput: CreateRefundPolicyInput;
  CreateRefundReasonInput: CreateRefundReasonInput;
  CreateReviewInput: CreateReviewInput;
  CreateShippingInput: CreateShippingInput;
  CreateShopInput: CreateShopInput;
  CreateStoreNoticeInput: CreateStoreNoticeInput;
  CreateTagInput: CreateTagInput;
  CreateTaxInput: CreateTaxInput;
  CreateTermsConditionsInput: CreateTermsConditionsInput;
  CreateTypeInput: CreateTypeInput;
  CreateWishlistInput: CreateWishlistInput;
  CreateWithdrawInput: CreateWithdrawInput;
  CurrencyOptions: CurrencyOptions;
  CurrencyOptionsInputType: CurrencyOptionsInputType;
  Customer: Customer;
  CustomerInputType: CustomerInputType;
  DateTime: Scalars['DateTime']['output'];
  DeliveryTime: DeliveryTime;
  DeliveryTimeInputType: DeliveryTimeInputType;
  DigitalFile: Omit<DigitalFile, 'fileable'> & { fileable?: Maybe<ResolversParentTypes['FileableUnion']> };
  EventSettings: EventSettings;
  EventSettingsInputType: EventSettingsInputType;
  FacebookSettings: FacebookSettings;
  FacebookSettingsInputType: FacebookSettingsInputType;
  FaqPaginator: FaqPaginator;
  Faqs: Faqs;
  Feedback: Feedback;
  FeedbackInputType: FeedbackInputType;
  FileableUnion: ResolversUnionTypes<ResolversParentTypes>['FileableUnion'];
  FlashSale: FlashSale;
  FlashSalePaginator: FlashSalePaginator;
  FlashSaleRequestPaginator: FlashSaleRequestPaginator;
  FlashSaleRequests: FlashSaleRequests;
  Float: Scalars['Float']['output'];
  ForgetPasswordInput: ForgetPasswordInput;
  GenerateDownloadableUrlInput: GenerateDownloadableUrlInput;
  GenerateInvoiceDownloadUrlInput: GenerateInvoiceDownloadUrlInput;
  GenerateOrderExportUrlInput: GenerateOrderExportUrlInput;
  GoogleMapLocation: GoogleMapLocation;
  GoogleMapLocationInput: GoogleMapLocationInput;
  GoogleSettings: GoogleSettings;
  GoogleSettingsInputType: GoogleSettingsInputType;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  InvoiceTranslatedLanguages: InvoiceTranslatedLanguages;
  Location: Location;
  LocationInput: LocationInput;
  LoginInput: LoginInput;
  Maintenance: Maintenance;
  MaintenanceInput: MaintenanceInput;
  MakeOrRevokeAdminInput: MakeOrRevokeAdminInput;
  Manufacturer: Manufacturer;
  ManufacturerInputType: ManufacturerInputType;
  ManufacturerPaginator: ManufacturerPaginator;
  Message: Message;
  MessagePaginator: MessagePaginator;
  Mutation: {};
  MyQuestionPaginator: MyQuestionPaginator;
  MyReportPaginator: MyReportPaginator;
  Notifications: Notifications;
  NotificationsInputType: NotificationsInputType;
  NotifyLogs: NotifyLogs;
  NotifyLogsPaginator: NotifyLogsPaginator;
  Order: Order;
  OrderByStatus: OrderByStatus;
  OrderFiles: OrderFiles;
  OrderInputType: OrderInputType;
  OrderPaginator: OrderPaginator;
  OrderProductPivot: OrderProductPivot;
  OrderStatus: OrderStatus;
  OrderStatusPaginator: OrderStatusPaginator;
  OrderedFilePaginator: OrderedFilePaginator;
  OtpInput: OtpInput;
  OtpLoginInput: OtpLoginInput;
  OtpResponse: OtpResponse;
  PaginatorInfo: PaginatorInfo;
  PasswordChangeResponse: PasswordChangeResponse;
  PaymentGateWay: PaymentGateWay;
  PaymentGateway: PaymentGateway;
  PaymentGatewayInputType: PaymentGatewayInputType;
  PaymentInfo: PaymentInfo;
  PaymentInfoInput: PaymentInfoInput;
  PaymentIntent: PaymentIntent;
  PaymentIntentInfo: PaymentIntentInfo;
  PaymentIntentInfoType: PaymentIntentInfoType;
  PaymentIntentType: PaymentIntentType;
  Permissions: Permissions;
  PermissionsInputType: PermissionsInputType;
  PivotInputType: PivotInputType;
  PopUpNotShow: PopUpNotShow;
  PopUpNotShowInput: PopUpNotShowInput;
  PriceRange: PriceRange;
  Product: Product;
  ProductInputType: ProductInputType;
  ProductPaginator: ProductPaginator;
  Profile: Profile;
  ProfileHasOne: ProfileHasOne;
  ProfileInput: ProfileInput;
  ProfileInputType: ProfileInputType;
  PromoPopup: PromoPopup;
  PromoPopupInput: PromoPopupInput;
  PushNotification: PushNotification;
  PushNotificationInput: PushNotificationInput;
  Query: {};
  QueryAttributesOrderByOrderByClause: QueryAttributesOrderByOrderByClause;
  QueryAuthorsOrderByOrderByClause: QueryAuthorsOrderByOrderByClause;
  QueryCategoriesHasTypeWhereHasConditions: QueryCategoriesHasTypeWhereHasConditions;
  QueryCategoriesHasTypeWhereHasConditionsRelation: QueryCategoriesHasTypeWhereHasConditionsRelation;
  QueryCategoriesOrderByOrderByClause: QueryCategoriesOrderByOrderByClause;
  QueryManufacturersHasTypeWhereHasConditions: QueryManufacturersHasTypeWhereHasConditions;
  QueryManufacturersHasTypeWhereHasConditionsRelation: QueryManufacturersHasTypeWhereHasConditionsRelation;
  QueryManufacturersOrderByOrderByClause: QueryManufacturersOrderByOrderByClause;
  QueryMyQuestionsOrderByOrderByClause: QueryMyQuestionsOrderByOrderByClause;
  QueryMyReportsOrderByOrderByClause: QueryMyReportsOrderByOrderByClause;
  QueryOrderFilesOrderByOrderByClause: QueryOrderFilesOrderByOrderByClause;
  QueryOrderStatusesOrderByOrderByClause: QueryOrderStatusesOrderByOrderByClause;
  QueryProductsHasAuthorWhereHasConditions: QueryProductsHasAuthorWhereHasConditions;
  QueryProductsHasAuthorWhereHasConditionsRelation: QueryProductsHasAuthorWhereHasConditionsRelation;
  QueryProductsHasCategoriesWhereHasConditions: QueryProductsHasCategoriesWhereHasConditions;
  QueryProductsHasCategoriesWhereHasConditionsRelation: QueryProductsHasCategoriesWhereHasConditionsRelation;
  QueryProductsHasManufacturerWhereHasConditions: QueryProductsHasManufacturerWhereHasConditions;
  QueryProductsHasManufacturerWhereHasConditionsRelation: QueryProductsHasManufacturerWhereHasConditionsRelation;
  QueryProductsHasTagsWhereHasConditions: QueryProductsHasTagsWhereHasConditions;
  QueryProductsHasTagsWhereHasConditionsRelation: QueryProductsHasTagsWhereHasConditionsRelation;
  QueryProductsHasTypeWhereHasConditions: QueryProductsHasTypeWhereHasConditions;
  QueryProductsHasTypeWhereHasConditionsRelation: QueryProductsHasTypeWhereHasConditionsRelation;
  QueryQuestionsOrderByOrderByClause: QueryQuestionsOrderByOrderByClause;
  QueryReviewsOrderByOrderByClause: QueryReviewsOrderByOrderByClause;
  QueryShippingClassesOrderByOrderByClause: QueryShippingClassesOrderByOrderByClause;
  QueryTagsHasTypeWhereHasConditions: QueryTagsHasTypeWhereHasConditions;
  QueryTagsHasTypeWhereHasConditionsRelation: QueryTagsHasTypeWhereHasConditionsRelation;
  QueryTagsOrderByOrderByClause: QueryTagsOrderByOrderByClause;
  QueryTaxClassesOrderByOrderByClause: QueryTaxClassesOrderByOrderByClause;
  QueryTypesOrderByOrderByClause: QueryTypesOrderByOrderByClause;
  QueryUsersOrderByOrderByClause: QueryUsersOrderByOrderByClause;
  Question: Question;
  QuestionPaginator: QuestionPaginator;
  ReadAllNoticeInput: ReadAllNoticeInput;
  ReadSingleNoticeInput: ReadSingleNoticeInput;
  Refund: Refund;
  RefundInputType: RefundInputType;
  RefundPaginator: RefundPaginator;
  RefundPoliciesPaginator: RefundPoliciesPaginator;
  RefundPolicy: RefundPolicy;
  RefundReason: RefundReason;
  RefundReasonInputType: RefundReasonInputType;
  RefundReasonsPaginator: RefundReasonsPaginator;
  RegisterInput: RegisterInput;
  ResetPasswordInput: ResetPasswordInput;
  Review: Review;
  ReviewInputType: ReviewInputType;
  ReviewPaginator: ReviewPaginator;
  ReviewSystem: ReviewSystem;
  ReviewSystemInput: ReviewSystemInput;
  SaleBuilder: SaleBuilder;
  SaleBuilderInput: SaleBuilderInput;
  SavePaymentMethodInput: SavePaymentMethodInput;
  SeenMessageInput: SeenMessageInput;
  SeoSettings: SeoSettings;
  SeoSettingsInputType: SeoSettingsInputType;
  ServerInfo: ServerInfo;
  ServerInfoInputType: ServerInfoInputType;
  Settings: Settings;
  SettingsInput: SettingsInput;
  SettingsOptions: SettingsOptions;
  SettingsOptionsInput: SettingsOptionsInput;
  Shipping: Shipping;
  Shop: Shop;
  ShopInputType: ShopInputType;
  ShopPaginator: ShopPaginator;
  ShopSettings: ShopSettings;
  ShopSettingsInputType: ShopSettingsInputType;
  ShopSocialInput: ShopSocialInput;
  ShopSocials: ShopSocials;
  Social: Social;
  SocialInputType: SocialInputType;
  SocialLoginInput: SocialLoginInput;
  StoreNotice: StoreNotice;
  StoreNoticeRead: StoreNoticeRead;
  StoreNoticeUserPivot: StoreNoticeUserPivot;
  StoreNoticesPaginator: StoreNoticesPaginator;
  String: Scalars['String']['output'];
  SuccessResponse: SuccessResponse;
  Tag: Tag;
  TagInputType: TagInputType;
  TagPaginator: TagPaginator;
  Tax: Tax;
  TermsAndConditionPaginator: TermsAndConditionPaginator;
  TermsAndConditions: TermsAndConditions;
  TopRatedProduct: TopRatedProduct;
  TotalYearSaleByMonth: TotalYearSaleByMonth;
  Type: Type;
  TypeInputType: TypeInputType;
  TypeSettings: TypeSettings;
  TypeSettingsInput: TypeSettingsInput;
  UpdateAddressInput: UpdateAddressInput;
  UpdateAttributeInput: UpdateAttributeInput;
  UpdateAuthorInput: UpdateAuthorInput;
  UpdateCardInput: UpdateCardInput;
  UpdateCategoryInput: UpdateCategoryInput;
  UpdateCouponInput: UpdateCouponInput;
  UpdateEmailUserInput: UpdateEmailUserInput;
  UpdateFaqInput: UpdateFaqInput;
  UpdateFlashSaleInput: UpdateFlashSaleInput;
  UpdateFlashSaleRequestInput: UpdateFlashSaleRequestInput;
  UpdateManufacturerInput: UpdateManufacturerInput;
  UpdateNotifyLogInput: UpdateNotifyLogInput;
  UpdateOrderInput: UpdateOrderInput;
  UpdateOrderStatusInput: UpdateOrderStatusInput;
  UpdateProductInput: UpdateProductInput;
  UpdateQuestionInput: UpdateQuestionInput;
  UpdateRefundInput: UpdateRefundInput;
  UpdateRefundPolicyInput: UpdateRefundPolicyInput;
  UpdateRefundReasonInput: UpdateRefundReasonInput;
  UpdateReviewInput: UpdateReviewInput;
  UpdateShippingInput: UpdateShippingInput;
  UpdateShopInput: UpdateShopInput;
  UpdateStoreNoticeInput: UpdateStoreNoticeInput;
  UpdateTagInput: UpdateTagInput;
  UpdateTaxInput: UpdateTaxInput;
  UpdateTermsConditionsInput: UpdateTermsConditionsInput;
  UpdateTypeInput: UpdateTypeInput;
  UpdateUserInput: UpdateUserInput;
  Upload: Scalars['Upload']['output'];
  UpsertVariationsHasMany: UpsertVariationsHasMany;
  User: User;
  UserAddress: UserAddress;
  UserAddressInput: UserAddressInput;
  UserAddressInputType: UserAddressInputType;
  UserAddressUpsertInput: UserAddressUpsertInput;
  UserInputType: UserInputType;
  UserPaginator: UserPaginator;
  UserProfileInput: UserProfileInput;
  UserToNotify: UserToNotify;
  Variation: Variation;
  VariationDigitalFile: VariationDigitalFile;
  VariationDigitalFileInputType: VariationDigitalFileInputType;
  VariationInput: VariationInput;
  VariationInputType: VariationInputType;
  VariationOption: VariationOption;
  VariationOptionInputType: VariationOptionInputType;
  Vendor: Vendor;
  VendorInputType: VendorInputType;
  VerifiedCheckoutData: VerifiedCheckoutData;
  VerifyCouponInput: VerifyCouponInput;
  VerifyCouponItemInput: VerifyCouponItemInput;
  VerifyCouponResponse: VerifyCouponResponse;
  VerifyForgetPasswordTokenInput: VerifyForgetPasswordTokenInput;
  VerifyOtpInput: VerifyOtpInput;
  Video: Video;
  VideoInputType: VideoInputType;
  Wallet: Wallet;
  WalletInputType: WalletInputType;
  WalletPoint: WalletPoint;
  WalletPointInputType: WalletPointInputType;
  Withdraw: Withdraw;
  WithdrawPaginator: WithdrawPaginator;
};

export type AbusiveReportResolvers<ContextType = any, ParentType extends ResolversParentTypes['AbusiveReport'] = ResolversParentTypes['AbusiveReport']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  model_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  model_type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['Address'] = ResolversParentTypes['Address']> = {
  address?: Resolver<Maybe<ResolversTypes['UserAddress']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['GoogleMapLocation']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdminResolvers<ContextType = any, ParentType extends ResolversParentTypes['Admin'] = ResolversParentTypes['Admin']> = {
  paymentOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  refundOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  statusChangeOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AiResolvers<ContextType = any, ParentType extends ResolversParentTypes['Ai'] = ResolversParentTypes['Ai']> = {
  result?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AllInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['AllInput'] = ResolversParentTypes['AllInput']> = {
  all?: Resolver<Maybe<ResolversTypes['PushNotification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AnalyticsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Analytics'] = ResolversParentTypes['Analytics']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  monthlyTotalOrderByStatus?: Resolver<Maybe<ResolversTypes['OrderByStatus']>, ParentType, ContextType>;
  newCustomers?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  todayTotalOrderByStatus?: Resolver<Maybe<ResolversTypes['OrderByStatus']>, ParentType, ContextType>;
  todaysRevenue?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalOrders?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalRefunds?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalRevenue?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalShops?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalVendors?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalYearSaleByMonth?: Resolver<Maybe<Array<ResolversTypes['TotalYearSaleByMonth']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  weeklyTotalOrderByStatus?: Resolver<Maybe<ResolversTypes['OrderByStatus']>, ParentType, ContextType>;
  yearlyTotalOrderByStatus?: Resolver<Maybe<ResolversTypes['OrderByStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttachmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Attachment'] = ResolversParentTypes['Attachment']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  original?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Attribute'] = ResolversParentTypes['Attribute']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  shop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType>;
  shop_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  values?: Resolver<Array<ResolversTypes['AttributeValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AttributeValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['AttributeValue'] = ResolversParentTypes['AttributeValue']> = {
  attribute?: Resolver<ResolversTypes['Attribute'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  meta?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shop_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthResponse'] = ResolversParentTypes['AuthResponse']> = {
  permissions?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Author'] = ResolversParentTypes['Author']> = {
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  born?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cover_image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  death?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  is_approved?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  languages?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  products_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  quote?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socials?: Resolver<Maybe<Array<ResolversTypes['ShopSocials']>>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorPaginator'] = ResolversParentTypes['AuthorPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Author']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BalanceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Balance'] = ResolversParentTypes['Balance']> = {
  admin_commission_rate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  current_balance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  payment_info?: Resolver<Maybe<ResolversTypes['PaymentInfo']>, ParentType, ContextType>;
  shop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType>;
  total_earnings?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  withdrawn_amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BannerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Banner'] = ResolversParentTypes['Banner']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CardResolvers<ContextType = any, ParentType extends ResolversParentTypes['Card'] = ResolversParentTypes['Card']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  default_card?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  expires?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  method_key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  origin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  owner_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_gateway_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  payment_gateways?: Resolver<Maybe<ResolversTypes['PaymentGateWay']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  verification_check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Category'] = ResolversParentTypes['Category']> = {
  children?: Resolver<Maybe<Array<Maybe<ResolversTypes['Category']>>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['Category']>, ParentType, ContextType>;
  parent_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<Maybe<ResolversTypes['Product']>>>, ParentType, ContextType>;
  products_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sub_categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['Category']>>>, ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryPaginator'] = ResolversParentTypes['CategoryPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Category']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryWiseProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryWiseProduct'] = ResolversParentTypes['CategoryWiseProduct']> = {
  category_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  category_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shop_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CategoryWiseProductSaleResolvers<ContextType = any, ParentType extends ResolversParentTypes['CategoryWiseProductSale'] = ResolversParentTypes['CategoryWiseProductSale']> = {
  category_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  category_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  shop_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  total_sales?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactBestSellingInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactBestSellingInput'] = ResolversParentTypes['CompactBestSellingInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoAuthorsInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoAuthorsInput'] = ResolversParentTypes['CompactDemoAuthorsInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoCategoryInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoCategoryInput'] = ResolversParentTypes['CompactDemoCategoryInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoHandpickedProductsInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoHandpickedProductsInput'] = ResolversParentTypes['CompactDemoHandpickedProductsInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enableSlider?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  products?: Resolver<Maybe<Array<ResolversTypes['CompactProductInput']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoManufacturesInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoManufacturesInput'] = ResolversParentTypes['CompactDemoManufacturesInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoNewArrivalInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoNewArrivalInput'] = ResolversParentTypes['CompactDemoNewArrivalInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactDemoPopularProductsInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactDemoPopularProductsInput'] = ResolversParentTypes['CompactDemoPopularProductsInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactProductInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactProductInput'] = ResolversParentTypes['CompactProductInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  external_product_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  is_external?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  max_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  min_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  regular_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sale_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['CompactTypeSettingsInput']>, ParentType, ContextType>;
  unit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactTypeProductCardInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactTypeProductCardInput'] = ResolversParentTypes['CompactTypeProductCardInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  productCard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CompactTypeSettingsInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompactTypeSettingsInput'] = ResolversParentTypes['CompactTypeSettingsInput']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  settings?: Resolver<Maybe<ResolversTypes['CompactTypeProductCardInput']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactDetails'] = ResolversParentTypes['ContactDetails']> = {
  contact?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['Location']>, ParentType, ContextType>;
  socials?: Resolver<Maybe<Array<ResolversTypes['ShopSocials']>>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactResponse'] = ResolversParentTypes['ContactResponse']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConversationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Conversation'] = ResolversParentTypes['Conversation']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  latest_message?: Resolver<Maybe<ResolversTypes['Message']>, ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  shop_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  unseen?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  user_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConversationPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConversationPaginator'] = ResolversParentTypes['ConversationPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Conversation']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CouponResolvers<ContextType = any, ParentType extends ResolversParentTypes['Coupon'] = ResolversParentTypes['Coupon']> = {
  active_from?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expire_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  is_approve?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_valid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  minimum_cart_amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  orders?: Resolver<Maybe<Array<ResolversTypes['Order']>>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sub_total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CouponPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CouponPaginator'] = ResolversParentTypes['CouponPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Coupon']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyOptionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyOptions'] = ResolversParentTypes['CurrencyOptions']> = {
  formation?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fractions?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CustomerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Customer'] = ResolversParentTypes['Customer']> = {
  answerQuestion?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  paymentOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  refundOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  statusChangeOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DeliveryTimeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeliveryTime'] = ResolversParentTypes['DeliveryTime']> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DigitalFileResolvers<ContextType = any, ParentType extends ResolversParentTypes['DigitalFile'] = ResolversParentTypes['DigitalFile']> = {
  attachment_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  fileable?: Resolver<Maybe<ResolversTypes['FileableUnion']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EventSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['EventSettings'] = ResolversParentTypes['EventSettings']> = {
  admin?: Resolver<Maybe<ResolversTypes['Admin']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
  vendor?: Resolver<Maybe<ResolversTypes['Vendor']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FacebookSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['FacebookSettings'] = ResolversParentTypes['FacebookSettings']> = {
  appId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isEnable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  pageId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FaqPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['FaqPaginator'] = ResolversParentTypes['FaqPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Faqs']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FaqsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Faqs'] = ResolversParentTypes['Faqs']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  faq_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  faq_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  faq_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  issued_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeedbackResolvers<ContextType = any, ParentType extends ResolversParentTypes['Feedback'] = ResolversParentTypes['Feedback']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  model_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  model_type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  negative?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  positive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FileableUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FileableUnion'] = ResolversParentTypes['FileableUnion']> = {
  __resolveType: TypeResolveFn<'Product' | 'Variation', ParentType, ContextType>;
};

export type FlashSaleResolvers<ContextType = any, ParentType extends ResolversParentTypes['FlashSale'] = ResolversParentTypes['FlashSale']> = {
  cover_image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  end_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<ResolversTypes['Product']>>, ParentType, ContextType>;
  rate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sale_builder?: Resolver<Maybe<ResolversTypes['SaleBuilder']>, ParentType, ContextType>;
  sale_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FlashSalePaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['FlashSalePaginator'] = ResolversParentTypes['FlashSalePaginator']> = {
  data?: Resolver<Array<ResolversTypes['FlashSale']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FlashSaleRequestPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['FlashSaleRequestPaginator'] = ResolversParentTypes['FlashSaleRequestPaginator']> = {
  data?: Resolver<Array<ResolversTypes['FlashSaleRequests']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FlashSaleRequestsResolvers<ContextType = any, ParentType extends ResolversParentTypes['FlashSaleRequests'] = ResolversParentTypes['FlashSaleRequests']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  deleted_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  flash_sale?: Resolver<Maybe<ResolversTypes['FlashSale']>, ParentType, ContextType>;
  flash_sale_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  request_status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GoogleMapLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['GoogleMapLocation'] = ResolversParentTypes['GoogleMapLocation']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  formattedAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lat?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lng?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street_address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GoogleSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['GoogleSettings'] = ResolversParentTypes['GoogleSettings']> = {
  isEnable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  tagManagerId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  formattedAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lat?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lng?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street_address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MaintenanceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Maintenance'] = ResolversParentTypes['Maintenance']> = {
  aboutUsDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  aboutUsTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  buttonTitleOne?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  buttonTitleTwo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactUsTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  isOverlayColor?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  newsLetterDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  newsLetterTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  overlayColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  overlayColorRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  until?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ManufacturerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Manufacturer'] = ResolversParentTypes['Manufacturer']> = {
  cover_image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  is_approved?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  products_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socials?: Resolver<Maybe<Array<ResolversTypes['ShopSocials']>>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type'], ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ManufacturerPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ManufacturerPaginator'] = ResolversParentTypes['ManufacturerPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Manufacturer']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Message'] = ResolversParentTypes['Message']> = {
  body?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  conversation?: Resolver<Maybe<ResolversTypes['Conversation']>, ParentType, ContextType>;
  conversation_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  user_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessagePaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['MessagePaginator'] = ResolversParentTypes['MessagePaginator']> = {
  data?: Resolver<Array<ResolversTypes['Message']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  activeUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationActiveUserArgs, 'id'>>;
  addNewCard?: Resolver<ResolversTypes['Card'], ParentType, ContextType, RequireFields<MutationAddNewCardArgs, 'input'>>;
  addPoints?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationAddPointsArgs, 'input'>>;
  addStaff?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationAddStaffArgs, 'input'>>;
  approveCoupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, RequireFields<MutationApproveCouponArgs, 'id'>>;
  approveFlashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, RequireFields<MutationApproveFlashSaleRequestArgs, 'id'>>;
  approveShop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType, RequireFields<MutationApproveShopArgs, 'input'>>;
  approveTermsConditions?: Resolver<ResolversTypes['TermsAndConditions'], ParentType, ContextType, RequireFields<MutationApproveTermsConditionsArgs, 'id'>>;
  approveWithdraw?: Resolver<ResolversTypes['Withdraw'], ParentType, ContextType, RequireFields<MutationApproveWithdrawArgs, 'input'>>;
  banUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationBanUserArgs, 'id'>>;
  changePassword?: Resolver<ResolversTypes['PasswordChangeResponse'], ParentType, ContextType, RequireFields<MutationChangePasswordArgs, 'input'>>;
  contactUs?: Resolver<ResolversTypes['ContactResponse'], ParentType, ContextType, Partial<MutationContactUsArgs>>;
  createAbusiveReport?: Resolver<ResolversTypes['AbusiveReport'], ParentType, ContextType, RequireFields<MutationCreateAbusiveReportArgs, 'input'>>;
  createAddress?: Resolver<ResolversTypes['Address'], ParentType, ContextType, RequireFields<MutationCreateAddressArgs, 'input'>>;
  createAttribute?: Resolver<ResolversTypes['Attribute'], ParentType, ContextType, RequireFields<MutationCreateAttributeArgs, 'input'>>;
  createAuthor?: Resolver<ResolversTypes['Author'], ParentType, ContextType, RequireFields<MutationCreateAuthorArgs, 'input'>>;
  createCategory?: Resolver<ResolversTypes['Category'], ParentType, ContextType, RequireFields<MutationCreateCategoryArgs, 'input'>>;
  createConversation?: Resolver<ResolversTypes['Conversation'], ParentType, ContextType, RequireFields<MutationCreateConversationArgs, 'input'>>;
  createCoupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, RequireFields<MutationCreateCouponArgs, 'input'>>;
  createFaq?: Resolver<ResolversTypes['Faqs'], ParentType, ContextType, RequireFields<MutationCreateFaqArgs, 'input'>>;
  createFeedback?: Resolver<ResolversTypes['Feedback'], ParentType, ContextType, RequireFields<MutationCreateFeedbackArgs, 'input'>>;
  createFlashSale?: Resolver<ResolversTypes['FlashSale'], ParentType, ContextType, RequireFields<MutationCreateFlashSaleArgs, 'input'>>;
  createFlashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, RequireFields<MutationCreateFlashSaleRequestArgs, 'input'>>;
  createManufacturer?: Resolver<ResolversTypes['Manufacturer'], ParentType, ContextType, RequireFields<MutationCreateManufacturerArgs, 'input'>>;
  createMessage?: Resolver<ResolversTypes['Message'], ParentType, ContextType, RequireFields<MutationCreateMessageArgs, 'input'>>;
  createOrder?: Resolver<ResolversTypes['Order'], ParentType, ContextType, RequireFields<MutationCreateOrderArgs, 'input'>>;
  createOrderPayment?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationCreateOrderPaymentArgs, 'input'>>;
  createOrderStatus?: Resolver<ResolversTypes['OrderStatus'], ParentType, ContextType, RequireFields<MutationCreateOrderStatusArgs, 'input'>>;
  createProduct?: Resolver<ResolversTypes['Product'], ParentType, ContextType, RequireFields<MutationCreateProductArgs, 'input'>>;
  createProfile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType, RequireFields<MutationCreateProfileArgs, 'input'>>;
  createQuestion?: Resolver<ResolversTypes['Question'], ParentType, ContextType, RequireFields<MutationCreateQuestionArgs, 'input'>>;
  createRefund?: Resolver<ResolversTypes['Refund'], ParentType, ContextType, RequireFields<MutationCreateRefundArgs, 'input'>>;
  createRefundPolicy?: Resolver<ResolversTypes['RefundPolicy'], ParentType, ContextType, RequireFields<MutationCreateRefundPolicyArgs, 'input'>>;
  createRefundReason?: Resolver<ResolversTypes['RefundReason'], ParentType, ContextType, RequireFields<MutationCreateRefundReasonArgs, 'input'>>;
  createReview?: Resolver<ResolversTypes['Review'], ParentType, ContextType, RequireFields<MutationCreateReviewArgs, 'input'>>;
  createShipping?: Resolver<ResolversTypes['Shipping'], ParentType, ContextType, RequireFields<MutationCreateShippingArgs, 'input'>>;
  createShop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType, RequireFields<MutationCreateShopArgs, 'input'>>;
  createStoreNotice?: Resolver<ResolversTypes['StoreNotice'], ParentType, ContextType, RequireFields<MutationCreateStoreNoticeArgs, 'input'>>;
  createTag?: Resolver<ResolversTypes['Tag'], ParentType, ContextType, RequireFields<MutationCreateTagArgs, 'input'>>;
  createTax?: Resolver<ResolversTypes['Tax'], ParentType, ContextType, RequireFields<MutationCreateTaxArgs, 'input'>>;
  createTermsConditions?: Resolver<ResolversTypes['TermsAndConditions'], ParentType, ContextType, RequireFields<MutationCreateTermsConditionsArgs, 'input'>>;
  createType?: Resolver<ResolversTypes['Type'], ParentType, ContextType, RequireFields<MutationCreateTypeArgs, 'input'>>;
  createWithdraw?: Resolver<ResolversTypes['Withdraw'], ParentType, ContextType, RequireFields<MutationCreateWithdrawArgs, 'input'>>;
  deleteAddress?: Resolver<ResolversTypes['Address'], ParentType, ContextType, RequireFields<MutationDeleteAddressArgs, 'id'>>;
  deleteAttribute?: Resolver<ResolversTypes['Attribute'], ParentType, ContextType, RequireFields<MutationDeleteAttributeArgs, 'id'>>;
  deleteAuthor?: Resolver<ResolversTypes['Author'], ParentType, ContextType, RequireFields<MutationDeleteAuthorArgs, 'id'>>;
  deleteCard?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteCardArgs, 'id'>>;
  deleteCategory?: Resolver<ResolversTypes['Category'], ParentType, ContextType, RequireFields<MutationDeleteCategoryArgs, 'id'>>;
  deleteCoupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, RequireFields<MutationDeleteCouponArgs, 'id'>>;
  deleteFaq?: Resolver<ResolversTypes['Faqs'], ParentType, ContextType, RequireFields<MutationDeleteFaqArgs, 'id'>>;
  deleteFlashSale?: Resolver<ResolversTypes['FlashSale'], ParentType, ContextType, RequireFields<MutationDeleteFlashSaleArgs, 'id'>>;
  deleteFlashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, RequireFields<MutationDeleteFlashSaleRequestArgs, 'id'>>;
  deleteManufacturer?: Resolver<ResolversTypes['Manufacturer'], ParentType, ContextType, RequireFields<MutationDeleteManufacturerArgs, 'id'>>;
  deleteNotifyLog?: Resolver<ResolversTypes['NotifyLogs'], ParentType, ContextType, RequireFields<MutationDeleteNotifyLogArgs, 'id'>>;
  deleteOrder?: Resolver<ResolversTypes['Order'], ParentType, ContextType, RequireFields<MutationDeleteOrderArgs, 'id'>>;
  deleteOrderStatus?: Resolver<ResolversTypes['OrderStatus'], ParentType, ContextType, RequireFields<MutationDeleteOrderStatusArgs, 'id'>>;
  deleteProduct?: Resolver<ResolversTypes['Product'], ParentType, ContextType, RequireFields<MutationDeleteProductArgs, 'id'>>;
  deleteProfile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType, RequireFields<MutationDeleteProfileArgs, 'id'>>;
  deleteQuestion?: Resolver<ResolversTypes['Question'], ParentType, ContextType, RequireFields<MutationDeleteQuestionArgs, 'id'>>;
  deleteRefund?: Resolver<ResolversTypes['Refund'], ParentType, ContextType, RequireFields<MutationDeleteRefundArgs, 'id'>>;
  deleteRefundPolicy?: Resolver<ResolversTypes['RefundPolicy'], ParentType, ContextType, RequireFields<MutationDeleteRefundPolicyArgs, 'id'>>;
  deleteRefundReason?: Resolver<ResolversTypes['RefundReason'], ParentType, ContextType, RequireFields<MutationDeleteRefundReasonArgs, 'id'>>;
  deleteReview?: Resolver<ResolversTypes['Review'], ParentType, ContextType, RequireFields<MutationDeleteReviewArgs, 'id'>>;
  deleteShipping?: Resolver<ResolversTypes['Shipping'], ParentType, ContextType, RequireFields<MutationDeleteShippingArgs, 'id'>>;
  deleteShop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType, RequireFields<MutationDeleteShopArgs, 'id'>>;
  deleteStoreNotice?: Resolver<ResolversTypes['StoreNotice'], ParentType, ContextType, RequireFields<MutationDeleteStoreNoticeArgs, 'id'>>;
  deleteTag?: Resolver<ResolversTypes['Tag'], ParentType, ContextType, RequireFields<MutationDeleteTagArgs, 'id'>>;
  deleteTax?: Resolver<ResolversTypes['Tax'], ParentType, ContextType, RequireFields<MutationDeleteTaxArgs, 'id'>>;
  deleteTermsConditions?: Resolver<ResolversTypes['TermsAndConditions'], ParentType, ContextType, RequireFields<MutationDeleteTermsConditionsArgs, 'id'>>;
  deleteType?: Resolver<ResolversTypes['Type'], ParentType, ContextType, RequireFields<MutationDeleteTypeArgs, 'id'>>;
  deleteWishlist?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationDeleteWishlistArgs, 'slug'>>;
  deleteWithdraw?: Resolver<ResolversTypes['Withdraw'], ParentType, ContextType, RequireFields<MutationDeleteWithdrawArgs, 'id'>>;
  disApproveFlashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, RequireFields<MutationDisApproveFlashSaleRequestArgs, 'id'>>;
  disApproveTermsConditions?: Resolver<ResolversTypes['TermsAndConditions'], ParentType, ContextType, RequireFields<MutationDisApproveTermsConditionsArgs, 'id'>>;
  disapproveCoupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, RequireFields<MutationDisapproveCouponArgs, 'id'>>;
  disapproveShop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType, RequireFields<MutationDisapproveShopArgs, 'id'>>;
  forgetPassword?: Resolver<ResolversTypes['PasswordChangeResponse'], ParentType, ContextType, RequireFields<MutationForgetPasswordArgs, 'input'>>;
  generateDescriptions?: Resolver<ResolversTypes['Ai'], ParentType, ContextType, RequireFields<MutationGenerateDescriptionsArgs, 'input'>>;
  generateDownloadableUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<MutationGenerateDownloadableUrlArgs, 'input'>>;
  generateInvoiceDownloadUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<MutationGenerateInvoiceDownloadUrlArgs, 'input'>>;
  generateOrderExportUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<MutationGenerateOrderExportUrlArgs, 'input'>>;
  importAttributes?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationImportAttributesArgs, 'csv' | 'shop_id'>>;
  importProducts?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationImportProductsArgs, 'csv' | 'shop_id'>>;
  importVariationOptions?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationImportVariationOptionsArgs, 'csv' | 'shop_id'>>;
  licenseKeyValidation?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationLicenseKeyValidationArgs, 'license_key'>>;
  login?: Resolver<ResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<MutationLoginArgs, 'input'>>;
  logout?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  makeOrRevokeAdmin?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationMakeOrRevokeAdminArgs, 'input'>>;
  notifyLogAllRead?: Resolver<Array<ResolversTypes['NotifyLogs']>, ParentType, ContextType, RequireFields<MutationNotifyLogAllReadArgs, 'input'>>;
  otpLogin?: Resolver<ResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<MutationOtpLoginArgs, 'input'>>;
  readAllNotice?: Resolver<ResolversTypes['StoreNoticeUserPivot'], ParentType, ContextType, RequireFields<MutationReadAllNoticeArgs, 'input'>>;
  readNotice?: Resolver<ResolversTypes['StoreNoticeUserPivot'], ParentType, ContextType, RequireFields<MutationReadNoticeArgs, 'input'>>;
  readNotifyLogs?: Resolver<ResolversTypes['NotifyLogs'], ParentType, ContextType, RequireFields<MutationReadNotifyLogsArgs, 'id'>>;
  register?: Resolver<ResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<MutationRegisterArgs, 'input'>>;
  rejectAbusiveReport?: Resolver<ResolversTypes['AbusiveReport'], ParentType, ContextType, RequireFields<MutationRejectAbusiveReportArgs, 'input'>>;
  removeStaff?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationRemoveStaffArgs, 'id'>>;
  removeUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationRemoveUserArgs, 'id'>>;
  resendVerificationEmail?: Resolver<ResolversTypes['SuccessResponse'], ParentType, ContextType>;
  resetPassword?: Resolver<ResolversTypes['PasswordChangeResponse'], ParentType, ContextType, RequireFields<MutationResetPasswordArgs, 'input'>>;
  savePaymentMethod?: Resolver<ResolversTypes['Card'], ParentType, ContextType, RequireFields<MutationSavePaymentMethodArgs, 'input'>>;
  seenMessage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationSeenMessageArgs, 'input'>>;
  sendOtpCode?: Resolver<ResolversTypes['OtpResponse'], ParentType, ContextType, RequireFields<MutationSendOtpCodeArgs, 'input'>>;
  setDefaultPaymentMethod?: Resolver<ResolversTypes['Card'], ParentType, ContextType, RequireFields<MutationSetDefaultPaymentMethodArgs, 'method_id'>>;
  socialLogin?: Resolver<ResolversTypes['AuthResponse'], ParentType, ContextType, RequireFields<MutationSocialLoginArgs, 'input'>>;
  subscribeToNewsletter?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationSubscribeToNewsletterArgs, 'email'>>;
  toggleWishlist?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationToggleWishlistArgs, 'input'>>;
  updateAddress?: Resolver<ResolversTypes['Address'], ParentType, ContextType, RequireFields<MutationUpdateAddressArgs, 'input'>>;
  updateAttribute?: Resolver<ResolversTypes['Attribute'], ParentType, ContextType, RequireFields<MutationUpdateAttributeArgs, 'input'>>;
  updateAuthor?: Resolver<ResolversTypes['Author'], ParentType, ContextType, RequireFields<MutationUpdateAuthorArgs, 'input'>>;
  updateCard?: Resolver<ResolversTypes['Card'], ParentType, ContextType, RequireFields<MutationUpdateCardArgs, 'input'>>;
  updateCategory?: Resolver<ResolversTypes['Category'], ParentType, ContextType, RequireFields<MutationUpdateCategoryArgs, 'input'>>;
  updateCoupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, RequireFields<MutationUpdateCouponArgs, 'input'>>;
  updateFaq?: Resolver<ResolversTypes['Faqs'], ParentType, ContextType, RequireFields<MutationUpdateFaqArgs, 'input'>>;
  updateFlashSale?: Resolver<ResolversTypes['FlashSale'], ParentType, ContextType, RequireFields<MutationUpdateFlashSaleArgs, 'input'>>;
  updateFlashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, RequireFields<MutationUpdateFlashSaleRequestArgs, 'input'>>;
  updateManufacturer?: Resolver<ResolversTypes['Manufacturer'], ParentType, ContextType, RequireFields<MutationUpdateManufacturerArgs, 'input'>>;
  updateOrder?: Resolver<ResolversTypes['Order'], ParentType, ContextType, RequireFields<MutationUpdateOrderArgs, 'input'>>;
  updateOrderStatus?: Resolver<ResolversTypes['OrderStatus'], ParentType, ContextType, RequireFields<MutationUpdateOrderStatusArgs, 'input'>>;
  updateProduct?: Resolver<ResolversTypes['Product'], ParentType, ContextType, RequireFields<MutationUpdateProductArgs, 'input'>>;
  updateProfile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType, RequireFields<MutationUpdateProfileArgs, 'id' | 'input'>>;
  updateQuestion?: Resolver<ResolversTypes['Question'], ParentType, ContextType, RequireFields<MutationUpdateQuestionArgs, 'id' | 'input'>>;
  updateRefund?: Resolver<ResolversTypes['Refund'], ParentType, ContextType, RequireFields<MutationUpdateRefundArgs, 'input'>>;
  updateRefundPolicy?: Resolver<ResolversTypes['RefundPolicy'], ParentType, ContextType, RequireFields<MutationUpdateRefundPolicyArgs, 'input'>>;
  updateRefundReason?: Resolver<ResolversTypes['RefundReason'], ParentType, ContextType, RequireFields<MutationUpdateRefundReasonArgs, 'input'>>;
  updateReview?: Resolver<ResolversTypes['Review'], ParentType, ContextType, RequireFields<MutationUpdateReviewArgs, 'id' | 'input'>>;
  updateSettings?: Resolver<ResolversTypes['Settings'], ParentType, ContextType, RequireFields<MutationUpdateSettingsArgs, 'input'>>;
  updateShipping?: Resolver<ResolversTypes['Shipping'], ParentType, ContextType, RequireFields<MutationUpdateShippingArgs, 'input'>>;
  updateShop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType, RequireFields<MutationUpdateShopArgs, 'input'>>;
  updateStoreNotice?: Resolver<ResolversTypes['StoreNotice'], ParentType, ContextType, RequireFields<MutationUpdateStoreNoticeArgs, 'input'>>;
  updateTag?: Resolver<ResolversTypes['Tag'], ParentType, ContextType, RequireFields<MutationUpdateTagArgs, 'input'>>;
  updateTax?: Resolver<ResolversTypes['Tax'], ParentType, ContextType, RequireFields<MutationUpdateTaxArgs, 'input'>>;
  updateTermsConditions?: Resolver<ResolversTypes['TermsAndConditions'], ParentType, ContextType, RequireFields<MutationUpdateTermsConditionsArgs, 'input'>>;
  updateType?: Resolver<ResolversTypes['Type'], ParentType, ContextType, RequireFields<MutationUpdateTypeArgs, 'input'>>;
  updateUser?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<MutationUpdateUserArgs, 'input'>>;
  updateUserEmail?: Resolver<ResolversTypes['SuccessResponse'], ParentType, ContextType, RequireFields<MutationUpdateUserEmailArgs, 'input'>>;
  upload?: Resolver<Array<ResolversTypes['Attachment']>, ParentType, ContextType, Partial<MutationUploadArgs>>;
  verifyCheckout?: Resolver<ResolversTypes['VerifiedCheckoutData'], ParentType, ContextType, RequireFields<MutationVerifyCheckoutArgs, 'input'>>;
  verifyCoupon?: Resolver<ResolversTypes['VerifyCouponResponse'], ParentType, ContextType, RequireFields<MutationVerifyCouponArgs, 'input'>>;
  verifyForgetPasswordToken?: Resolver<ResolversTypes['PasswordChangeResponse'], ParentType, ContextType, RequireFields<MutationVerifyForgetPasswordTokenArgs, 'input'>>;
  verifyOtpCode?: Resolver<ResolversTypes['SuccessResponse'], ParentType, ContextType, RequireFields<MutationVerifyOtpCodeArgs, 'input'>>;
};

export type MyQuestionPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['MyQuestionPaginator'] = ResolversParentTypes['MyQuestionPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Question']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MyReportPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['MyReportPaginator'] = ResolversParentTypes['MyReportPaginator']> = {
  data?: Resolver<Array<ResolversTypes['AbusiveReport']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Notifications'] = ResolversParentTypes['Notifications']> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotifyLogsResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotifyLogs'] = ResolversParentTypes['NotifyLogs']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  deleted_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_read?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  notify_receiver_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notify_text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  notify_tracker?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  notify_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  receiver_user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sender_user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotifyLogsPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotifyLogsPaginator'] = ResolversParentTypes['NotifyLogsPaginator']> = {
  data?: Resolver<Array<ResolversTypes['NotifyLogs']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderResolvers<ContextType = any, ParentType extends ResolversParentTypes['Order'] = ResolversParentTypes['Order']> = {
  altered_payment_gateway?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  billing_address?: Resolver<Maybe<ResolversTypes['UserAddress']>, ParentType, ContextType>;
  children?: Resolver<Array<ResolversTypes['Order']>, ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  customer_contact?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  customer_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  delivery_fee?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  delivery_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paid_total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  parent_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  parent_order?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType>;
  payment_gateway?: Resolver<ResolversTypes['PaymentGatewayType'], ParentType, ContextType>;
  payment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_intent?: Resolver<Maybe<ResolversTypes['PaymentIntent']>, ParentType, ContextType>;
  payment_status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  products?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType>;
  refund?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType>;
  reviews?: Resolver<Maybe<Array<ResolversTypes['Review']>>, ParentType, ContextType>;
  sales_tax?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  shipping_address?: Resolver<Maybe<ResolversTypes['UserAddress']>, ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  tracking_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  wallet_point?: Resolver<Maybe<ResolversTypes['WalletPoint']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderByStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderByStatus'] = ResolversParentTypes['OrderByStatus']> = {
  cancelled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  complete?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  failed?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  localFacility?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  outForDelivery?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  pending?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  processing?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderFilesResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderFiles'] = ResolversParentTypes['OrderFiles']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  digital_file?: Resolver<Maybe<ResolversTypes['DigitalFile']>, ParentType, ContextType>;
  digital_file_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['DigitalFile']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType>;
  purchase_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tracking_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderPaginator'] = ResolversParentTypes['OrderPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Order']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderProductPivotResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderProductPivot'] = ResolversParentTypes['OrderProductPivot']> = {
  order_quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  unit_price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  variation_option_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderStatus'] = ResolversParentTypes['OrderStatus']> = {
  color?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  serial?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderStatusPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderStatusPaginator'] = ResolversParentTypes['OrderStatusPaginator']> = {
  data?: Resolver<Array<ResolversTypes['OrderStatus']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrderedFilePaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrderedFilePaginator'] = ResolversParentTypes['OrderedFilePaginator']> = {
  data?: Resolver<Array<ResolversTypes['OrderFiles']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OtpResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['OtpResponse'] = ResolversParentTypes['OtpResponse']> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_contact_exist?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phone_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaginatorInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaginatorInfo'] = ResolversParentTypes['PaginatorInfo']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currentPage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  firstItem?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hasMorePages?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastItem?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastPage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  perPage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PasswordChangeResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PasswordChangeResponse'] = ResolversParentTypes['PasswordChangeResponse']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentGateWayResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentGateWay'] = ResolversParentTypes['PaymentGateWay']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gateway_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user_id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentGatewayResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentGateway'] = ResolversParentTypes['PaymentGateway']> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentInfo'] = ResolversParentTypes['PaymentInfo']> = {
  account?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  bank?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentIntentResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentIntent'] = ResolversParentTypes['PaymentIntent']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  payment_gateway?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  payment_intent_info?: Resolver<Maybe<ResolversTypes['PaymentIntentInfo']>, ParentType, ContextType>;
  tracking_number?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaymentIntentInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PaymentIntentInfo'] = ResolversParentTypes['PaymentIntentInfo']> = {
  amount?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  client_secret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  is_redirect?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  payment_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  redirect_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Permissions'] = ResolversParentTypes['Permissions']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PopUpNotShowResolvers<ContextType = any, ParentType extends ResolversParentTypes['PopUpNotShow'] = ResolversParentTypes['PopUpNotShow']> = {
  popUpExpiredIn?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['Product'] = ResolversParentTypes['Product']> = {
  author?: Resolver<Maybe<ResolversTypes['Author']>, ParentType, ContextType>;
  author_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<ResolversTypes['Category']>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  digital_file?: Resolver<Maybe<ResolversTypes['DigitalFile']>, ParentType, ContextType>;
  external_product_button_text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  external_product_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gallery?: Resolver<Maybe<Array<ResolversTypes['Attachment']>>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  in_flash_sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  in_stock?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  in_wishlist?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_digital?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_external?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_taxable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  length?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Manufacturer']>, ParentType, ContextType>;
  manufacturer_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  max_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  min_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  my_review?: Resolver<Maybe<Array<ResolversTypes['Review']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  orders?: Resolver<Maybe<Array<ResolversTypes['Order']>>, ParentType, ContextType>;
  pivot?: Resolver<Maybe<ResolversTypes['OrderProductPivot']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  product_type?: Resolver<ResolversTypes['ProductType'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  ratings?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<ResolversTypes['Product']>>, ParentType, ContextType, Partial<ProductRelated_ProductsArgs>>;
  sale_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sold_quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ProductStatus'], ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['Tag']>>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type']>, ParentType, ContextType>;
  type_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  unit?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  variation_options?: Resolver<Maybe<Array<ResolversTypes['Variation']>>, ParentType, ContextType>;
  variations?: Resolver<Maybe<Array<ResolversTypes['AttributeValue']>>, ParentType, ContextType>;
  video?: Resolver<Maybe<Array<ResolversTypes['Video']>>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProductPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProductPaginator'] = ResolversParentTypes['ProductPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProfileResolvers<ContextType = any, ParentType extends ResolversParentTypes['Profile'] = ResolversParentTypes['Profile']> = {
  avatar?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contact?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  notifications?: Resolver<Maybe<ResolversTypes['Notifications']>, ParentType, ContextType>;
  socials?: Resolver<Maybe<Array<ResolversTypes['Social']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PromoPopupResolvers<ContextType = any, ParentType extends ResolversParentTypes['PromoPopup'] = ResolversParentTypes['PromoPopup']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  isPopUpNotShow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  popUpDelay?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  popUpExpiredIn?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  popUpNotShow?: Resolver<Maybe<ResolversTypes['PopUpNotShow']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PushNotificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['PushNotification'] = ResolversParentTypes['PushNotification']> = {
  message?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  storeNotice?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  address?: Resolver<ResolversTypes['Address'], ParentType, ContextType, RequireFields<QueryAddressArgs, 'id'>>;
  addresses?: Resolver<Array<ResolversTypes['Address']>, ParentType, ContextType>;
  all_questions?: Resolver<ResolversTypes['QuestionPaginator'], ParentType, ContextType, RequireFields<QueryAll_QuestionsArgs, 'first' | 'page'>>;
  analytics?: Resolver<ResolversTypes['Analytics'], ParentType, ContextType>;
  attribute?: Resolver<ResolversTypes['Attribute'], ParentType, ContextType, Partial<QueryAttributeArgs>>;
  attributes?: Resolver<Array<ResolversTypes['Attribute']>, ParentType, ContextType, Partial<QueryAttributesArgs>>;
  author?: Resolver<ResolversTypes['Author'], ParentType, ContextType, Partial<QueryAuthorArgs>>;
  authors?: Resolver<ResolversTypes['AuthorPaginator'], ParentType, ContextType, RequireFields<QueryAuthorsArgs, 'first' | 'page'>>;
  bestSellingProducts?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, Partial<QueryBestSellingProductsArgs>>;
  cards?: Resolver<Array<ResolversTypes['Card']>, ParentType, ContextType>;
  categories?: Resolver<ResolversTypes['CategoryPaginator'], ParentType, ContextType, RequireFields<QueryCategoriesArgs, 'first' | 'page' | 'parent'>>;
  category?: Resolver<ResolversTypes['Category'], ParentType, ContextType, Partial<QueryCategoryArgs>>;
  categoryWiseProduct?: Resolver<Array<ResolversTypes['CategoryWiseProduct']>, ParentType, ContextType, Partial<QueryCategoryWiseProductArgs>>;
  categoryWiseProductSale?: Resolver<Array<ResolversTypes['CategoryWiseProductSale']>, ParentType, ContextType, Partial<QueryCategoryWiseProductSaleArgs>>;
  conversation?: Resolver<Maybe<ResolversTypes['Conversation']>, ParentType, ContextType, Partial<QueryConversationArgs>>;
  conversations?: Resolver<ResolversTypes['ConversationPaginator'], ParentType, ContextType, RequireFields<QueryConversationsArgs, 'first' | 'page'>>;
  coupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType, Partial<QueryCouponArgs>>;
  coupons?: Resolver<ResolversTypes['CouponPaginator'], ParentType, ContextType, RequireFields<QueryCouponsArgs, 'first' | 'page'>>;
  downloads?: Resolver<ResolversTypes['OrderedFilePaginator'], ParentType, ContextType, RequireFields<QueryDownloadsArgs, 'first' | 'page'>>;
  faq?: Resolver<Maybe<ResolversTypes['Faqs']>, ParentType, ContextType, Partial<QueryFaqArgs>>;
  faqs?: Resolver<ResolversTypes['FaqPaginator'], ParentType, ContextType, RequireFields<QueryFaqsArgs, 'first' | 'page'>>;
  fetchRequestedProducts?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryFetchRequestedProductsArgs, 'first' | 'page'>>;
  findShopDistance?: Resolver<Array<ResolversTypes['Shop']>, ParentType, ContextType, Partial<QueryFindShopDistanceArgs>>;
  flashSale?: Resolver<ResolversTypes['FlashSale'], ParentType, ContextType, Partial<QueryFlashSaleArgs>>;
  flashSaleInfoByProductID?: Resolver<ResolversTypes['FlashSale'], ParentType, ContextType, Partial<QueryFlashSaleInfoByProductIdArgs>>;
  flashSaleRequest?: Resolver<ResolversTypes['FlashSaleRequests'], ParentType, ContextType, Partial<QueryFlashSaleRequestArgs>>;
  flashSaleRequests?: Resolver<ResolversTypes['FlashSaleRequestPaginator'], ParentType, ContextType, RequireFields<QueryFlashSaleRequestsArgs, 'first' | 'page'>>;
  flashSales?: Resolver<ResolversTypes['FlashSalePaginator'], ParentType, ContextType, RequireFields<QueryFlashSalesArgs, 'first' | 'page'>>;
  getPaymentIntent?: Resolver<ResolversTypes['PaymentIntent'], ParentType, ContextType, RequireFields<QueryGetPaymentIntentArgs, 'payment_gateway' | 'recall_gateway' | 'tracking_number'>>;
  in_wishlist?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<QueryIn_WishlistArgs, 'product_id'>>;
  lowStockProducts?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, Partial<QueryLowStockProductsArgs>>;
  manufacturer?: Resolver<ResolversTypes['Manufacturer'], ParentType, ContextType, Partial<QueryManufacturerArgs>>;
  manufacturers?: Resolver<ResolversTypes['ManufacturerPaginator'], ParentType, ContextType, RequireFields<QueryManufacturersArgs, 'first' | 'page'>>;
  me?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  messages?: Resolver<ResolversTypes['MessagePaginator'], ParentType, ContextType, RequireFields<QueryMessagesArgs, 'conversation_id' | 'first' | 'page'>>;
  myQuestions?: Resolver<ResolversTypes['MyQuestionPaginator'], ParentType, ContextType, RequireFields<QueryMyQuestionsArgs, 'first' | 'page'>>;
  myReports?: Resolver<ResolversTypes['MyReportPaginator'], ParentType, ContextType, RequireFields<QueryMyReportsArgs, 'first' | 'page'>>;
  myStaffs?: Resolver<ResolversTypes['UserPaginator'], ParentType, ContextType, RequireFields<QueryMyStaffsArgs, 'first' | 'page'>>;
  notifyLog?: Resolver<Maybe<ResolversTypes['NotifyLogs']>, ParentType, ContextType, Partial<QueryNotifyLogArgs>>;
  notifyLogs?: Resolver<ResolversTypes['NotifyLogsPaginator'], ParentType, ContextType, RequireFields<QueryNotifyLogsArgs, 'first' | 'page'>>;
  order?: Resolver<ResolversTypes['Order'], ParentType, ContextType, Partial<QueryOrderArgs>>;
  orderStatus?: Resolver<ResolversTypes['OrderStatus'], ParentType, ContextType, Partial<QueryOrderStatusArgs>>;
  orderStatuses?: Resolver<ResolversTypes['OrderStatusPaginator'], ParentType, ContextType, RequireFields<QueryOrderStatusesArgs, 'first' | 'page'>>;
  orders?: Resolver<ResolversTypes['OrderPaginator'], ParentType, ContextType, RequireFields<QueryOrdersArgs, 'first' | 'page'>>;
  popularProducts?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, Partial<QueryPopularProductsArgs>>;
  product?: Resolver<ResolversTypes['Product'], ParentType, ContextType, Partial<QueryProductArgs>>;
  products?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryProductsArgs, 'first' | 'page'>>;
  productsByFlashSale?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryProductsByFlashSaleArgs, 'first' | 'page'>>;
  productsDraft?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryProductsDraftArgs, 'first' | 'page'>>;
  productsStock?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryProductsStockArgs, 'first' | 'page'>>;
  question?: Resolver<Maybe<ResolversTypes['Question']>, ParentType, ContextType, Partial<QueryQuestionArgs>>;
  questions?: Resolver<ResolversTypes['QuestionPaginator'], ParentType, ContextType, RequireFields<QueryQuestionsArgs, 'first' | 'page'>>;
  refund?: Resolver<ResolversTypes['Refund'], ParentType, ContextType, RequireFields<QueryRefundArgs, 'id'>>;
  refundPolicies?: Resolver<ResolversTypes['RefundPoliciesPaginator'], ParentType, ContextType, RequireFields<QueryRefundPoliciesArgs, 'first' | 'page'>>;
  refundPolicy?: Resolver<ResolversTypes['RefundPolicy'], ParentType, ContextType, Partial<QueryRefundPolicyArgs>>;
  refundReason?: Resolver<Maybe<ResolversTypes['RefundReason']>, ParentType, ContextType, Partial<QueryRefundReasonArgs>>;
  refundReasons?: Resolver<ResolversTypes['RefundReasonsPaginator'], ParentType, ContextType, RequireFields<QueryRefundReasonsArgs, 'first' | 'page'>>;
  refunds?: Resolver<ResolversTypes['RefundPaginator'], ParentType, ContextType, RequireFields<QueryRefundsArgs, 'first' | 'page'>>;
  review?: Resolver<ResolversTypes['Review'], ParentType, ContextType, Partial<QueryReviewArgs>>;
  reviews?: Resolver<ResolversTypes['ReviewPaginator'], ParentType, ContextType, RequireFields<QueryReviewsArgs, 'first' | 'page'>>;
  settings?: Resolver<ResolversTypes['Settings'], ParentType, ContextType, Partial<QuerySettingsArgs>>;
  shippingClass?: Resolver<ResolversTypes['Shipping'], ParentType, ContextType, RequireFields<QueryShippingClassArgs, 'id'>>;
  shippingClasses?: Resolver<Array<ResolversTypes['Shipping']>, ParentType, ContextType, Partial<QueryShippingClassesArgs>>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType, Partial<QueryShopArgs>>;
  shops?: Resolver<ResolversTypes['ShopPaginator'], ParentType, ContextType, RequireFields<QueryShopsArgs, 'first' | 'page'>>;
  staffs?: Resolver<ResolversTypes['UserPaginator'], ParentType, ContextType, RequireFields<QueryStaffsArgs, 'first' | 'page'>>;
  storeNotice?: Resolver<ResolversTypes['StoreNotice'], ParentType, ContextType, Partial<QueryStoreNoticeArgs>>;
  storeNoticeReceiver?: Resolver<Array<ResolversTypes['UserToNotify']>, ParentType, ContextType, Partial<QueryStoreNoticeReceiverArgs>>;
  storeNoticeTypes?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<QueryStoreNoticeTypesArgs>>;
  storeNotices?: Resolver<ResolversTypes['StoreNoticesPaginator'], ParentType, ContextType, RequireFields<QueryStoreNoticesArgs, 'first' | 'page'>>;
  tag?: Resolver<Maybe<ResolversTypes['Tag']>, ParentType, ContextType, Partial<QueryTagArgs>>;
  tags?: Resolver<ResolversTypes['TagPaginator'], ParentType, ContextType, RequireFields<QueryTagsArgs, 'first' | 'page'>>;
  taxClass?: Resolver<ResolversTypes['Tax'], ParentType, ContextType, RequireFields<QueryTaxClassArgs, 'id'>>;
  taxClasses?: Resolver<Array<ResolversTypes['Tax']>, ParentType, ContextType, Partial<QueryTaxClassesArgs>>;
  termsCondition?: Resolver<Maybe<ResolversTypes['TermsAndConditions']>, ParentType, ContextType, Partial<QueryTermsConditionArgs>>;
  termsConditions?: Resolver<ResolversTypes['TermsAndConditionPaginator'], ParentType, ContextType, RequireFields<QueryTermsConditionsArgs, 'first' | 'page'>>;
  topAuthors?: Resolver<Array<ResolversTypes['Author']>, ParentType, ContextType, Partial<QueryTopAuthorsArgs>>;
  topManufacturers?: Resolver<Array<ResolversTypes['Manufacturer']>, ParentType, ContextType, Partial<QueryTopManufacturersArgs>>;
  topRatedProducts?: Resolver<Array<ResolversTypes['TopRatedProduct']>, ParentType, ContextType, Partial<QueryTopRatedProductsArgs>>;
  type?: Resolver<ResolversTypes['Type'], ParentType, ContextType, Partial<QueryTypeArgs>>;
  types?: Resolver<Array<ResolversTypes['Type']>, ParentType, ContextType, Partial<QueryTypesArgs>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUserArgs, 'id'>>;
  users?: Resolver<ResolversTypes['UserPaginator'], ParentType, ContextType, RequireFields<QueryUsersArgs, 'first' | 'page'>>;
  usersByPermission?: Resolver<ResolversTypes['UserPaginator'], ParentType, ContextType, Partial<QueryUsersByPermissionArgs>>;
  wishlists?: Resolver<ResolversTypes['ProductPaginator'], ParentType, ContextType, RequireFields<QueryWishlistsArgs, 'first' | 'page'>>;
  withdraw?: Resolver<Maybe<ResolversTypes['Withdraw']>, ParentType, ContextType, RequireFields<QueryWithdrawArgs, 'id'>>;
  withdraws?: Resolver<ResolversTypes['WithdrawPaginator'], ParentType, ContextType, RequireFields<QueryWithdrawsArgs, 'first' | 'page'>>;
};

export type QuestionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Question'] = ResolversParentTypes['Question']> = {
  answer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  feedbacks?: Resolver<Maybe<Array<ResolversTypes['Feedback']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  my_feedback?: Resolver<Maybe<ResolversTypes['Feedback']>, ParentType, ContextType>;
  negative_feedbacks_count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  positive_feedbacks_count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['Product']>, ParentType, ContextType>;
  product_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  question?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QuestionPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['QuestionPaginator'] = ResolversParentTypes['QuestionPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Question']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundResolvers<ContextType = any, ParentType extends ResolversParentTypes['Refund'] = ResolversParentTypes['Refund']> = {
  amount?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  images?: Resolver<Maybe<Array<ResolversTypes['Attachment']>>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType>;
  refund_reason?: Resolver<Maybe<ResolversTypes['RefundReason']>, ParentType, ContextType>;
  refund_reason_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['RefundStatus']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefundPaginator'] = ResolversParentTypes['RefundPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Refund']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundPoliciesPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefundPoliciesPaginator'] = ResolversParentTypes['RefundPoliciesPaginator']> = {
  data?: Resolver<Array<ResolversTypes['RefundPolicy']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundPolicyResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefundPolicy'] = ResolversParentTypes['RefundPolicy']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['RefundPolicyStatus']>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['RefundPolicyTarget']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundReasonResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefundReason'] = ResolversParentTypes['RefundReason']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RefundReasonsPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['RefundReasonsPaginator'] = ResolversParentTypes['RefundReasonsPaginator']> = {
  data?: Resolver<Array<ResolversTypes['RefundReason']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewResolvers<ContextType = any, ParentType extends ResolversParentTypes['Review'] = ResolversParentTypes['Review']> = {
  abusive_reports?: Resolver<Maybe<Array<ResolversTypes['AbusiveReport']>>, ParentType, ContextType>;
  abusive_reports_count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  comment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  feedbacks?: Resolver<Maybe<Array<ResolversTypes['Feedback']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  my_feedback?: Resolver<Maybe<ResolversTypes['Feedback']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  negative_feedbacks_count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  order?: Resolver<ResolversTypes['Order'], ParentType, ContextType>;
  photos?: Resolver<Array<ResolversTypes['Attachment']>, ParentType, ContextType>;
  positive_feedbacks_count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['Product'], ParentType, ContextType>;
  product_id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  rating?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  shop?: Resolver<ResolversTypes['Shop'], ParentType, ContextType>;
  shop_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  user_id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  variation_option_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewPaginator'] = ResolversParentTypes['ReviewPaginator']> = {
  abusive_reports?: Resolver<Maybe<Array<ResolversTypes['AbusiveReport']>>, ParentType, ContextType>;
  data?: Resolver<Array<ResolversTypes['Review']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewSystemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewSystem'] = ResolversParentTypes['ReviewSystem']> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SaleBuilderResolvers<ContextType = any, ParentType extends ResolversParentTypes['SaleBuilder'] = ResolversParentTypes['SaleBuilder']> = {
  data_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_ids?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SeoSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SeoSettings'] = ResolversParentTypes['SeoSettings']> = {
  canonicalUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metaDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metaTags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metaTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ogDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ogImage?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  ogTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  twitterCardType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  twitterHandle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ServerInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['ServerInfo'] = ResolversParentTypes['ServerInfo']> = {
  max_execution_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  max_input_time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  memory_limit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post_max_size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  upload_max_filesize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Settings'] = ResolversParentTypes['Settings']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  options?: Resolver<Maybe<ResolversTypes['SettingsOptions']>, ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SettingsOptionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingsOptions'] = ResolversParentTypes['SettingsOptions']> = {
  StripeCardOnly?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  collapseLogo?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  contactDetails?: Resolver<Maybe<ResolversTypes['ContactDetails']>, ParentType, ContextType>;
  copyrightText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currencyOptions?: Resolver<Maybe<ResolversTypes['CurrencyOptions']>, ParentType, ContextType>;
  currencyToWalletRatio?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  defaultAi?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultPaymentGateway?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deliveryTime?: Resolver<Maybe<Array<ResolversTypes['DeliveryTime']>>, ParentType, ContextType>;
  emailEvent?: Resolver<Maybe<ResolversTypes['EventSettings']>, ParentType, ContextType>;
  enableCoupons?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enableReviewPopup?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  enableTerms?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  externalLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  externalText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  facebook?: Resolver<Maybe<ResolversTypes['FacebookSettings']>, ParentType, ContextType>;
  freeShipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  freeShippingAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  google?: Resolver<Maybe<ResolversTypes['GoogleSettings']>, ParentType, ContextType>;
  guestCheckout?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isProductReview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isPromoPopUp?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isUnderMaintenance?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  maintenance?: Resolver<Maybe<ResolversTypes['Maintenance']>, ParentType, ContextType>;
  maxShopDistance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  maximumQuestionLimit?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  minimumOrderAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  paymentGateway?: Resolver<Maybe<Array<ResolversTypes['PaymentGateway']>>, ParentType, ContextType>;
  promoPopup?: Resolver<Maybe<ResolversTypes['PromoPopup']>, ParentType, ContextType>;
  pushNotification?: Resolver<Maybe<ResolversTypes['AllInput']>, ParentType, ContextType>;
  reviewSystem?: Resolver<Maybe<ResolversTypes['ReviewSystem']>, ParentType, ContextType>;
  seo?: Resolver<Maybe<ResolversTypes['SeoSettings']>, ParentType, ContextType>;
  server_info?: Resolver<Maybe<ResolversTypes['ServerInfo']>, ParentType, ContextType>;
  shippingClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  signupPoints?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  siteLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  siteSubtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  siteTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  smsEvent?: Resolver<Maybe<ResolversTypes['EventSettings']>, ParentType, ContextType>;
  taxClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  useAi?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  useCashOnDelivery?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  useEnableGateway?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  useGoogleMap?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  useMustVerifyEmail?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  useOtp?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShippingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Shipping'] = ResolversParentTypes['Shipping']> = {
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_global?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ShippingType'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShopResolvers<ContextType = any, ParentType extends ResolversParentTypes['Shop'] = ResolversParentTypes['Shop']> = {
  address?: Resolver<Maybe<ResolversTypes['UserAddress']>, ParentType, ContextType>;
  balance?: Resolver<Maybe<ResolversTypes['Balance']>, ParentType, ContextType>;
  cover_image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  distance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lat?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lng?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orders_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  owner_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  products_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  refunds?: Resolver<Maybe<Array<ResolversTypes['Refund']>>, ParentType, ContextType>;
  settings?: Resolver<Maybe<ResolversTypes['ShopSettings']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  staffs?: Resolver<Maybe<Array<ResolversTypes['User']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShopPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShopPaginator'] = ResolversParentTypes['ShopPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Shop']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShopSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShopSettings'] = ResolversParentTypes['ShopSettings']> = {
  contact?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['Location']>, ParentType, ContextType>;
  notifications?: Resolver<Maybe<ResolversTypes['Notifications']>, ParentType, ContextType>;
  socials?: Resolver<Maybe<Array<ResolversTypes['ShopSocials']>>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ShopSocialsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShopSocials'] = ResolversParentTypes['ShopSocials']> = {
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Social'] = ResolversParentTypes['Social']> = {
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreNoticeResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreNotice'] = ResolversParentTypes['StoreNotice']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  created_by?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  creator?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  creator_role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deleted_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  effective_from?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expire_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  expired_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_read?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  notice?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  priority?: Resolver<ResolversTypes['StoreNoticePriority'], ParentType, ContextType>;
  read_status?: Resolver<Maybe<ResolversTypes['StoreNoticeRead']>, ParentType, ContextType>;
  received_by?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  shops?: Resolver<Maybe<Array<ResolversTypes['Shop']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['StoreNoticeType']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  updated_by?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  users?: Resolver<Maybe<Array<ResolversTypes['User']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreNoticeReadResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreNoticeRead'] = ResolversParentTypes['StoreNoticeRead']> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pivot?: Resolver<Maybe<ResolversTypes['StoreNoticeUserPivot']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreNoticeUserPivotResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreNoticeUserPivot'] = ResolversParentTypes['StoreNoticeUserPivot']> = {
  is_read?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  store_notice_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StoreNoticesPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['StoreNoticesPaginator'] = ResolversParentTypes['StoreNoticesPaginator']> = {
  data?: Resolver<Array<ResolversTypes['StoreNotice']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SuccessResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SuccessResponse'] = ResolversParentTypes['SuccessResponse']> = {
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tag'] = ResolversParentTypes['Tag']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<ResolversTypes['Product']>>, ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  translated_languages?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagPaginator'] = ResolversParentTypes['TagPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Tag']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TaxResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tax'] = ResolversParentTypes['Tax']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_global?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  on_shipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TermsAndConditionPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TermsAndConditionPaginator'] = ResolversParentTypes['TermsAndConditionPaginator']> = {
  data?: Resolver<Array<ResolversTypes['TermsAndConditions']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TermsAndConditionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['TermsAndConditions'] = ResolversParentTypes['TermsAndConditions']> = {
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_approved?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  issued_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  user_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TopRatedProductResolvers<ContextType = any, ParentType extends ResolversParentTypes['TopRatedProduct'] = ResolversParentTypes['TopRatedProduct']> = {
  actual_rating?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  max_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  min_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rating_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  regular_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sale_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  total_rating?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  type_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type_slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TotalYearSaleByMonthResolvers<ContextType = any, ParentType extends ResolversParentTypes['TotalYearSaleByMonth'] = ResolversParentTypes['TotalYearSaleByMonth']> = {
  month?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Type'] = ResolversParentTypes['Type']> = {
  banners?: Resolver<Maybe<Array<ResolversTypes['Banner']>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  promotional_sliders?: Resolver<Maybe<Array<ResolversTypes['Attachment']>>, ParentType, ContextType>;
  settings?: Resolver<Maybe<ResolversTypes['TypeSettings']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  translated_languages?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TypeSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['TypeSettings'] = ResolversParentTypes['TypeSettings']> = {
  authors?: Resolver<Maybe<ResolversTypes['CompactDemoAuthorsInput']>, ParentType, ContextType>;
  bestSelling?: Resolver<Maybe<ResolversTypes['CompactBestSellingInput']>, ParentType, ContextType>;
  category?: Resolver<Maybe<ResolversTypes['CompactDemoCategoryInput']>, ParentType, ContextType>;
  handpickedProducts?: Resolver<Maybe<ResolversTypes['CompactDemoHandpickedProductsInput']>, ParentType, ContextType>;
  isHome?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  layoutType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  manufactures?: Resolver<Maybe<ResolversTypes['CompactDemoManufacturesInput']>, ParentType, ContextType>;
  newArrival?: Resolver<Maybe<ResolversTypes['CompactDemoNewArrivalInput']>, ParentType, ContextType>;
  popularProducts?: Resolver<Maybe<ResolversTypes['CompactDemoPopularProductsInput']>, ParentType, ContextType>;
  productCard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface UploadScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  address?: Resolver<Maybe<Array<ResolversTypes['Address']>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  last_order?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType>;
  managed_shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  orders?: Resolver<Maybe<Array<ResolversTypes['Order']>>, ParentType, ContextType>;
  password?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissions?: Resolver<Array<ResolversTypes['Permissions']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['Profile']>, ParentType, ContextType>;
  refunds?: Resolver<Maybe<Array<ResolversTypes['Refund']>>, ParentType, ContextType>;
  shop_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  shops?: Resolver<Maybe<Array<ResolversTypes['Shop']>>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  wallet?: Resolver<Maybe<ResolversTypes['Wallet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserAddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserAddress'] = ResolversParentTypes['UserAddress']> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street_address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserPaginator'] = ResolversParentTypes['UserPaginator']> = {
  data?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserToNotifyResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserToNotify'] = ResolversParentTypes['UserToNotify']> = {
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VariationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Variation'] = ResolversParentTypes['Variation']> = {
  digital_file?: Resolver<Maybe<ResolversTypes['VariationDigitalFile']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Attachment']>, ParentType, ContextType>;
  is_digital?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_disable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  options?: Resolver<Array<ResolversTypes['VariationOption']>, ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['Product']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sale_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sold_quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VariationDigitalFileResolvers<ContextType = any, ParentType extends ResolversParentTypes['VariationDigitalFile'] = ResolversParentTypes['VariationDigitalFile']> = {
  attachment_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VariationOptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['VariationOption'] = ResolversParentTypes['VariationOption']> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Vendor'] = ResolversParentTypes['Vendor']> = {
  createQuestion?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  createReview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  paymentOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  refundOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  statusChangeOrder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerifiedCheckoutDataResolvers<ContextType = any, ParentType extends ResolversParentTypes['VerifiedCheckoutData'] = ResolversParentTypes['VerifiedCheckoutData']> = {
  shipping_charge?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  unavailable_products?: Resolver<Array<ResolversTypes['ID']>, ParentType, ContextType>;
  wallet_amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  wallet_currency?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerifyCouponResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['VerifyCouponResponse'] = ResolversParentTypes['VerifyCouponResponse']> = {
  coupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType>;
  is_valid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VideoResolvers<ContextType = any, ParentType extends ResolversParentTypes['Video'] = ResolversParentTypes['Video']> = {
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WalletResolvers<ContextType = any, ParentType extends ResolversParentTypes['Wallet'] = ResolversParentTypes['Wallet']> = {
  available_points?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  points_used?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total_points?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WalletPointResolvers<ContextType = any, ParentType extends ResolversParentTypes['WalletPoint'] = ResolversParentTypes['WalletPoint']> = {
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WithdrawResolvers<ContextType = any, ParentType extends ResolversParentTypes['Withdraw'] = ResolversParentTypes['Withdraw']> = {
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  details?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  note?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  payment_method?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  shop?: Resolver<Maybe<ResolversTypes['Shop']>, ParentType, ContextType>;
  shop_id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['WithdrawStatus']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WithdrawPaginatorResolvers<ContextType = any, ParentType extends ResolversParentTypes['WithdrawPaginator'] = ResolversParentTypes['WithdrawPaginator']> = {
  data?: Resolver<Array<ResolversTypes['Withdraw']>, ParentType, ContextType>;
  paginatorInfo?: Resolver<ResolversTypes['PaginatorInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  AbusiveReport?: AbusiveReportResolvers<ContextType>;
  Address?: AddressResolvers<ContextType>;
  Admin?: AdminResolvers<ContextType>;
  Ai?: AiResolvers<ContextType>;
  AllInput?: AllInputResolvers<ContextType>;
  Analytics?: AnalyticsResolvers<ContextType>;
  Attachment?: AttachmentResolvers<ContextType>;
  Attribute?: AttributeResolvers<ContextType>;
  AttributeValue?: AttributeValueResolvers<ContextType>;
  AuthResponse?: AuthResponseResolvers<ContextType>;
  Author?: AuthorResolvers<ContextType>;
  AuthorPaginator?: AuthorPaginatorResolvers<ContextType>;
  Balance?: BalanceResolvers<ContextType>;
  Banner?: BannerResolvers<ContextType>;
  Card?: CardResolvers<ContextType>;
  Category?: CategoryResolvers<ContextType>;
  CategoryPaginator?: CategoryPaginatorResolvers<ContextType>;
  CategoryWiseProduct?: CategoryWiseProductResolvers<ContextType>;
  CategoryWiseProductSale?: CategoryWiseProductSaleResolvers<ContextType>;
  CompactBestSellingInput?: CompactBestSellingInputResolvers<ContextType>;
  CompactDemoAuthorsInput?: CompactDemoAuthorsInputResolvers<ContextType>;
  CompactDemoCategoryInput?: CompactDemoCategoryInputResolvers<ContextType>;
  CompactDemoHandpickedProductsInput?: CompactDemoHandpickedProductsInputResolvers<ContextType>;
  CompactDemoManufacturesInput?: CompactDemoManufacturesInputResolvers<ContextType>;
  CompactDemoNewArrivalInput?: CompactDemoNewArrivalInputResolvers<ContextType>;
  CompactDemoPopularProductsInput?: CompactDemoPopularProductsInputResolvers<ContextType>;
  CompactProductInput?: CompactProductInputResolvers<ContextType>;
  CompactTypeProductCardInput?: CompactTypeProductCardInputResolvers<ContextType>;
  CompactTypeSettingsInput?: CompactTypeSettingsInputResolvers<ContextType>;
  ContactDetails?: ContactDetailsResolvers<ContextType>;
  ContactResponse?: ContactResponseResolvers<ContextType>;
  Conversation?: ConversationResolvers<ContextType>;
  ConversationPaginator?: ConversationPaginatorResolvers<ContextType>;
  Coupon?: CouponResolvers<ContextType>;
  CouponPaginator?: CouponPaginatorResolvers<ContextType>;
  CurrencyOptions?: CurrencyOptionsResolvers<ContextType>;
  Customer?: CustomerResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DeliveryTime?: DeliveryTimeResolvers<ContextType>;
  DigitalFile?: DigitalFileResolvers<ContextType>;
  EventSettings?: EventSettingsResolvers<ContextType>;
  FacebookSettings?: FacebookSettingsResolvers<ContextType>;
  FaqPaginator?: FaqPaginatorResolvers<ContextType>;
  Faqs?: FaqsResolvers<ContextType>;
  Feedback?: FeedbackResolvers<ContextType>;
  FileableUnion?: FileableUnionResolvers<ContextType>;
  FlashSale?: FlashSaleResolvers<ContextType>;
  FlashSalePaginator?: FlashSalePaginatorResolvers<ContextType>;
  FlashSaleRequestPaginator?: FlashSaleRequestPaginatorResolvers<ContextType>;
  FlashSaleRequests?: FlashSaleRequestsResolvers<ContextType>;
  GoogleMapLocation?: GoogleMapLocationResolvers<ContextType>;
  GoogleSettings?: GoogleSettingsResolvers<ContextType>;
  Location?: LocationResolvers<ContextType>;
  Maintenance?: MaintenanceResolvers<ContextType>;
  Manufacturer?: ManufacturerResolvers<ContextType>;
  ManufacturerPaginator?: ManufacturerPaginatorResolvers<ContextType>;
  Message?: MessageResolvers<ContextType>;
  MessagePaginator?: MessagePaginatorResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  MyQuestionPaginator?: MyQuestionPaginatorResolvers<ContextType>;
  MyReportPaginator?: MyReportPaginatorResolvers<ContextType>;
  Notifications?: NotificationsResolvers<ContextType>;
  NotifyLogs?: NotifyLogsResolvers<ContextType>;
  NotifyLogsPaginator?: NotifyLogsPaginatorResolvers<ContextType>;
  Order?: OrderResolvers<ContextType>;
  OrderByStatus?: OrderByStatusResolvers<ContextType>;
  OrderFiles?: OrderFilesResolvers<ContextType>;
  OrderPaginator?: OrderPaginatorResolvers<ContextType>;
  OrderProductPivot?: OrderProductPivotResolvers<ContextType>;
  OrderStatus?: OrderStatusResolvers<ContextType>;
  OrderStatusPaginator?: OrderStatusPaginatorResolvers<ContextType>;
  OrderedFilePaginator?: OrderedFilePaginatorResolvers<ContextType>;
  OtpResponse?: OtpResponseResolvers<ContextType>;
  PaginatorInfo?: PaginatorInfoResolvers<ContextType>;
  PasswordChangeResponse?: PasswordChangeResponseResolvers<ContextType>;
  PaymentGateWay?: PaymentGateWayResolvers<ContextType>;
  PaymentGateway?: PaymentGatewayResolvers<ContextType>;
  PaymentInfo?: PaymentInfoResolvers<ContextType>;
  PaymentIntent?: PaymentIntentResolvers<ContextType>;
  PaymentIntentInfo?: PaymentIntentInfoResolvers<ContextType>;
  Permissions?: PermissionsResolvers<ContextType>;
  PopUpNotShow?: PopUpNotShowResolvers<ContextType>;
  Product?: ProductResolvers<ContextType>;
  ProductPaginator?: ProductPaginatorResolvers<ContextType>;
  Profile?: ProfileResolvers<ContextType>;
  PromoPopup?: PromoPopupResolvers<ContextType>;
  PushNotification?: PushNotificationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Question?: QuestionResolvers<ContextType>;
  QuestionPaginator?: QuestionPaginatorResolvers<ContextType>;
  Refund?: RefundResolvers<ContextType>;
  RefundPaginator?: RefundPaginatorResolvers<ContextType>;
  RefundPoliciesPaginator?: RefundPoliciesPaginatorResolvers<ContextType>;
  RefundPolicy?: RefundPolicyResolvers<ContextType>;
  RefundReason?: RefundReasonResolvers<ContextType>;
  RefundReasonsPaginator?: RefundReasonsPaginatorResolvers<ContextType>;
  Review?: ReviewResolvers<ContextType>;
  ReviewPaginator?: ReviewPaginatorResolvers<ContextType>;
  ReviewSystem?: ReviewSystemResolvers<ContextType>;
  SaleBuilder?: SaleBuilderResolvers<ContextType>;
  SeoSettings?: SeoSettingsResolvers<ContextType>;
  ServerInfo?: ServerInfoResolvers<ContextType>;
  Settings?: SettingsResolvers<ContextType>;
  SettingsOptions?: SettingsOptionsResolvers<ContextType>;
  Shipping?: ShippingResolvers<ContextType>;
  Shop?: ShopResolvers<ContextType>;
  ShopPaginator?: ShopPaginatorResolvers<ContextType>;
  ShopSettings?: ShopSettingsResolvers<ContextType>;
  ShopSocials?: ShopSocialsResolvers<ContextType>;
  Social?: SocialResolvers<ContextType>;
  StoreNotice?: StoreNoticeResolvers<ContextType>;
  StoreNoticeRead?: StoreNoticeReadResolvers<ContextType>;
  StoreNoticeUserPivot?: StoreNoticeUserPivotResolvers<ContextType>;
  StoreNoticesPaginator?: StoreNoticesPaginatorResolvers<ContextType>;
  SuccessResponse?: SuccessResponseResolvers<ContextType>;
  Tag?: TagResolvers<ContextType>;
  TagPaginator?: TagPaginatorResolvers<ContextType>;
  Tax?: TaxResolvers<ContextType>;
  TermsAndConditionPaginator?: TermsAndConditionPaginatorResolvers<ContextType>;
  TermsAndConditions?: TermsAndConditionsResolvers<ContextType>;
  TopRatedProduct?: TopRatedProductResolvers<ContextType>;
  TotalYearSaleByMonth?: TotalYearSaleByMonthResolvers<ContextType>;
  Type?: TypeResolvers<ContextType>;
  TypeSettings?: TypeSettingsResolvers<ContextType>;
  Upload?: GraphQLScalarType;
  User?: UserResolvers<ContextType>;
  UserAddress?: UserAddressResolvers<ContextType>;
  UserPaginator?: UserPaginatorResolvers<ContextType>;
  UserToNotify?: UserToNotifyResolvers<ContextType>;
  Variation?: VariationResolvers<ContextType>;
  VariationDigitalFile?: VariationDigitalFileResolvers<ContextType>;
  VariationOption?: VariationOptionResolvers<ContextType>;
  Vendor?: VendorResolvers<ContextType>;
  VerifiedCheckoutData?: VerifiedCheckoutDataResolvers<ContextType>;
  VerifyCouponResponse?: VerifyCouponResponseResolvers<ContextType>;
  Video?: VideoResolvers<ContextType>;
  Wallet?: WalletResolvers<ContextType>;
  WalletPoint?: WalletPointResolvers<ContextType>;
  Withdraw?: WithdrawResolvers<ContextType>;
  WithdrawPaginator?: WithdrawPaginatorResolvers<ContextType>;
};

