/* 8151f96b5fc13b8c8e151455ea9f563363d8d943
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type LoginMutationVariables = Types.Exact<{
  input: Types.LoginInput;
}>;


export type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'AuthResponse', token: string, permissions: Array<string> } };

export type SocialLoginMutationVariables = Types.Exact<{
  input: Types.SocialLoginInput;
}>;


export type SocialLoginMutation = { __typename?: 'Mutation', socialLogin: { __typename?: 'AuthResponse', token: string, permissions: Array<string> } };

export type SendOtpCodeMutationVariables = Types.Exact<{
  input: Types.OtpInput;
}>;


export type SendOtpCodeMutation = { __typename?: 'Mutation', sendOtpCode: { __typename?: 'OtpResponse', id: string, message: string, success: boolean, provider: string, phone_number: string, is_contact_exist: boolean } };

export type VerifyOtpCodeMutationVariables = Types.Exact<{
  input: Types.VerifyOtpInput;
}>;


export type VerifyOtpCodeMutation = { __typename?: 'Mutation', verifyOtpCode: { __typename?: 'SuccessResponse', message: string, success: boolean } };

export type OtpLoginMutationVariables = Types.Exact<{
  input: Types.OtpLoginInput;
}>;


export type OtpLoginMutation = { __typename?: 'Mutation', otpLogin: { __typename?: 'AuthResponse', token: string, permissions: Array<string> } };

export type LogoutMutationVariables = Types.Exact<{ [key: string]: never; }>;


export type LogoutMutation = { __typename?: 'Mutation', logout: boolean };

export type RegisterMutationVariables = Types.Exact<{
  input: Types.RegisterInput;
}>;


export type RegisterMutation = { __typename?: 'Mutation', register: { __typename?: 'AuthResponse', token: string, permissions: Array<string> } };

export type ChangePasswordMutationVariables = Types.Exact<{
  input: Types.ChangePasswordInput;
}>;


export type ChangePasswordMutation = { __typename?: 'Mutation', changePassword: { __typename?: 'PasswordChangeResponse', message: string, success: boolean } };

export type ForgetPasswordMutationVariables = Types.Exact<{
  input: Types.ForgetPasswordInput;
}>;


export type ForgetPasswordMutation = { __typename?: 'Mutation', forgetPassword: { __typename?: 'PasswordChangeResponse', message: string, success: boolean } };

export type VerifyForgetPasswordTokenMutationVariables = Types.Exact<{
  input: Types.VerifyForgetPasswordTokenInput;
}>;


export type VerifyForgetPasswordTokenMutation = { __typename?: 'Mutation', verifyForgetPasswordToken: { __typename?: 'PasswordChangeResponse', message: string, success: boolean } };

export type ResendVerificationEmailMutationVariables = Types.Exact<{ [key: string]: never; }>;


export type ResendVerificationEmailMutation = { __typename?: 'Mutation', resendVerificationEmail: { __typename?: 'SuccessResponse', message: string, success: boolean } };

export type ResetPasswordMutationVariables = Types.Exact<{
  input: Types.ResetPasswordInput;
}>;


export type ResetPasswordMutation = { __typename?: 'Mutation', resetPassword: { __typename?: 'PasswordChangeResponse', message: string, success: boolean } };

export type UpdateUserEmailMutationVariables = Types.Exact<{
  input: Types.UpdateEmailUserInput;
}>;


export type UpdateUserEmailMutation = { __typename?: 'Mutation', updateUserEmail: { __typename?: 'SuccessResponse', message: string, success: boolean } };

export type UpdateCustomerMutationVariables = Types.Exact<{
  input: Types.UpdateUserInput;
}>;


export type UpdateCustomerMutation = { __typename?: 'Mutation', updateUser: { __typename?: 'User', id: string, name: string, email: string, profile?: { __typename?: 'Profile', id: string, bio?: string | null, contact?: string | null, avatar?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, socials?: Array<{ __typename?: 'Social', type: string, link: string }> | null } | null, address?: Array<{ __typename?: 'Address', title?: string | null, default?: boolean | null, type?: string | null, address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null }> | null } };

export type CustomerQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CustomerQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, name: string, email: string, profile?: { __typename?: 'Profile', id: string, bio?: string | null, contact?: string | null, avatar?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, socials?: Array<{ __typename?: 'Social', type: string, link: string }> | null } | null, address?: Array<{ __typename?: 'Address', id: string, title?: string | null, default?: boolean | null, type?: string | null, address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null, street_address?: string | null } | null, location?: { __typename?: 'GoogleMapLocation', lat?: number | null, lng?: number | null, street_number?: string | null, route?: string | null, street_address?: string | null, city?: string | null, state?: string | null, country?: string | null, zip?: string | null, formattedAddress?: string | null } | null }> | null, wallet?: { __typename?: 'Wallet', id: string, total_points: number, points_used: number, available_points: number } | null, last_order?: { __typename?: 'Order', id: string, tracking_number: string, customer_name?: string | null, customer_contact: string, language: string, order_status?: string | null, payment_status?: string | null, amount: number, sales_tax: number, total: number, paid_total?: number | null, payment_id?: string | null, payment_gateway: Types.PaymentGatewayType, altered_payment_gateway?: string | null, discount?: number | null, delivery_fee: number, delivery_time?: string | null, created_at?: any | null, updated_at?: any | null, note?: string | null, customer: { __typename?: 'User', name: string, email: string }, payment_intent?: { __typename?: 'PaymentIntent', id: string, order_id: string, payment_gateway: string, tracking_number: string, payment_intent_info?: { __typename?: 'PaymentIntentInfo', client_secret?: string | null, is_redirect: boolean, payment_id: string, redirect_url?: string | null, amount: string, currency: string } | null } | null, products: Array<{ __typename?: 'Product', id: string, name: string, slug: string, price?: number | null, sale_price?: number | null, created_at?: any | null, shop_id?: string | null, quantity: number, unit: string, my_review?: Array<{ __typename?: 'Review', id: string, variation_option_id?: string | null, rating: number, comment: string, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }> }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, variation_options?: Array<{ __typename?: 'Variation', id: string, title: string }> | null, pivot?: { __typename?: 'OrderProductPivot', variation_option_id?: string | null, order_quantity: number, unit_price: number, subtotal: number } | null }>, coupon?: { __typename?: 'Coupon', code?: string | null, amount?: number | null, type?: string | null, id: string } | null, billing_address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null, street_address?: string | null } | null, shipping_address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null, street_address?: string | null } | null, refund?: { __typename?: 'Refund', id: string, title: string, amount: string, status?: Types.RefundStatus | null } | null, wallet_point?: { __typename?: 'WalletPoint', id: string, amount: number } | null, reviews?: Array<{ __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null }> | null } | null } };

export type OrderPartsFragment = { __typename?: 'Order', id: string, tracking_number: string, customer_name?: string | null, customer_contact: string, language: string, order_status?: string | null, payment_status?: string | null, amount: number, sales_tax: number, total: number, paid_total?: number | null, payment_id?: string | null, payment_gateway: Types.PaymentGatewayType, altered_payment_gateway?: string | null, discount?: number | null, delivery_fee: number, delivery_time?: string | null, created_at?: any | null, updated_at?: any | null, note?: string | null, customer: { __typename?: 'User', name: string, email: string }, payment_intent?: { __typename?: 'PaymentIntent', id: string, order_id: string, payment_gateway: string, tracking_number: string, payment_intent_info?: { __typename?: 'PaymentIntentInfo', client_secret?: string | null, is_redirect: boolean, payment_id: string, redirect_url?: string | null, amount: string, currency: string } | null } | null, products: Array<{ __typename?: 'Product', id: string, name: string, slug: string, price?: number | null, sale_price?: number | null, created_at?: any | null, shop_id?: string | null, quantity: number, unit: string, my_review?: Array<{ __typename?: 'Review', id: string, variation_option_id?: string | null, rating: number, comment: string, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }> }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, variation_options?: Array<{ __typename?: 'Variation', id: string, title: string }> | null, pivot?: { __typename?: 'OrderProductPivot', variation_option_id?: string | null, order_quantity: number, unit_price: number, subtotal: number } | null }>, coupon?: { __typename?: 'Coupon', code?: string | null, amount?: number | null, type?: string | null, id: string } | null, billing_address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null, street_address?: string | null } | null, shipping_address?: { __typename?: 'UserAddress', country?: string | null, city?: string | null, state?: string | null, zip?: string | null, street_address?: string | null } | null, refund?: { __typename?: 'Refund', id: string, title: string, amount: string, status?: Types.RefundStatus | null } | null, wallet_point?: { __typename?: 'WalletPoint', id: string, amount: number } | null, reviews?: Array<{ __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null }> | null };

export type PaymentIntentPartsFragment = { __typename?: 'PaymentIntent', id: string, order_id: string, payment_gateway: string, tracking_number: string, payment_intent_info?: { __typename?: 'PaymentIntentInfo', client_secret?: string | null, is_redirect: boolean, payment_id: string, redirect_url?: string | null, amount: string, currency: string } | null };

export type ReviewPartsFragment = { __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null };

export const PaymentIntentPartsFragmentDoc = gql`
    fragment PaymentIntentParts on PaymentIntent {
  id
  order_id
  payment_gateway
  tracking_number
  payment_intent_info {
    client_secret
    is_redirect
    payment_id
    redirect_url
    amount
    currency
  }
}
    `;
export const ReviewPartsFragmentDoc = gql`
    fragment ReviewParts on Review {
  id
  comment
  rating
  photos {
    id
    thumbnail
    original
  }
  user {
    id
    name
  }
  positive_feedbacks_count
  negative_feedbacks_count
  my_feedback {
    id
    positive
    negative
  }
}
    `;
export const OrderPartsFragmentDoc = gql`
    fragment OrderParts on Order {
  id
  tracking_number
  customer_name
  customer_contact
  customer_name
  language
  customer {
    name
    email
  }
  order_status
  payment_status
  payment_intent {
    ...PaymentIntentParts
  }
  products {
    id
    name
    slug
    price
    sale_price
    created_at
    my_review {
      id
      variation_option_id
      rating
      comment
      photos {
        id
        thumbnail
        original
      }
    }
    image {
      id
      original
      thumbnail
    }
    variation_options {
      id
      title
    }
    pivot {
      variation_option_id
      order_quantity
      unit_price
      subtotal
    }
    shop_id
    quantity
    unit
  }
  amount
  sales_tax
  total
  paid_total
  payment_id
  payment_gateway
  altered_payment_gateway
  coupon {
    code
    amount
    type
  }
  discount
  delivery_fee
  delivery_time
  coupon {
    id
    code
  }
  billing_address {
    country
    city
    state
    zip
    street_address
  }
  shipping_address {
    country
    city
    state
    zip
    street_address
  }
  refund {
    id
    title
    amount
    status
  }
  wallet_point {
    id
    amount
  }
  created_at
  updated_at
  note
  reviews {
    ...ReviewParts
  }
}
    ${PaymentIntentPartsFragmentDoc}
${ReviewPartsFragmentDoc}`;
export const LoginDocument = gql`
    mutation Login($input: LoginInput!) {
  login(input: $input) {
    token
    permissions
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const SocialLoginDocument = gql`
    mutation SocialLogin($input: SocialLoginInput!) {
  socialLogin(input: $input) {
    token
    permissions
  }
}
    `;
export type SocialLoginMutationFn = Apollo.MutationFunction<SocialLoginMutation, SocialLoginMutationVariables>;

/**
 * __useSocialLoginMutation__
 *
 * To run a mutation, you first call `useSocialLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSocialLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [socialLoginMutation, { data, loading, error }] = useSocialLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSocialLoginMutation(baseOptions?: Apollo.MutationHookOptions<SocialLoginMutation, SocialLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SocialLoginMutation, SocialLoginMutationVariables>(SocialLoginDocument, options);
      }
export type SocialLoginMutationHookResult = ReturnType<typeof useSocialLoginMutation>;
export type SocialLoginMutationResult = Apollo.MutationResult<SocialLoginMutation>;
export type SocialLoginMutationOptions = Apollo.BaseMutationOptions<SocialLoginMutation, SocialLoginMutationVariables>;
export const SendOtpCodeDocument = gql`
    mutation SendOtpCode($input: OtpInput!) {
  sendOtpCode(input: $input) {
    id
    message
    success
    provider
    phone_number
    is_contact_exist
  }
}
    `;
export type SendOtpCodeMutationFn = Apollo.MutationFunction<SendOtpCodeMutation, SendOtpCodeMutationVariables>;

/**
 * __useSendOtpCodeMutation__
 *
 * To run a mutation, you first call `useSendOtpCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendOtpCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendOtpCodeMutation, { data, loading, error }] = useSendOtpCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendOtpCodeMutation(baseOptions?: Apollo.MutationHookOptions<SendOtpCodeMutation, SendOtpCodeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SendOtpCodeMutation, SendOtpCodeMutationVariables>(SendOtpCodeDocument, options);
      }
export type SendOtpCodeMutationHookResult = ReturnType<typeof useSendOtpCodeMutation>;
export type SendOtpCodeMutationResult = Apollo.MutationResult<SendOtpCodeMutation>;
export type SendOtpCodeMutationOptions = Apollo.BaseMutationOptions<SendOtpCodeMutation, SendOtpCodeMutationVariables>;
export const VerifyOtpCodeDocument = gql`
    mutation VerifyOtpCode($input: VerifyOtpInput!) {
  verifyOtpCode(input: $input) {
    message
    success
  }
}
    `;
export type VerifyOtpCodeMutationFn = Apollo.MutationFunction<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>;

/**
 * __useVerifyOtpCodeMutation__
 *
 * To run a mutation, you first call `useVerifyOtpCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyOtpCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyOtpCodeMutation, { data, loading, error }] = useVerifyOtpCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useVerifyOtpCodeMutation(baseOptions?: Apollo.MutationHookOptions<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>(VerifyOtpCodeDocument, options);
      }
export type VerifyOtpCodeMutationHookResult = ReturnType<typeof useVerifyOtpCodeMutation>;
export type VerifyOtpCodeMutationResult = Apollo.MutationResult<VerifyOtpCodeMutation>;
export type VerifyOtpCodeMutationOptions = Apollo.BaseMutationOptions<VerifyOtpCodeMutation, VerifyOtpCodeMutationVariables>;
export const OtpLoginDocument = gql`
    mutation OtpLogin($input: OtpLoginInput!) {
  otpLogin(input: $input) {
    token
    permissions
  }
}
    `;
export type OtpLoginMutationFn = Apollo.MutationFunction<OtpLoginMutation, OtpLoginMutationVariables>;

/**
 * __useOtpLoginMutation__
 *
 * To run a mutation, you first call `useOtpLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useOtpLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [otpLoginMutation, { data, loading, error }] = useOtpLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useOtpLoginMutation(baseOptions?: Apollo.MutationHookOptions<OtpLoginMutation, OtpLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<OtpLoginMutation, OtpLoginMutationVariables>(OtpLoginDocument, options);
      }
export type OtpLoginMutationHookResult = ReturnType<typeof useOtpLoginMutation>;
export type OtpLoginMutationResult = Apollo.MutationResult<OtpLoginMutation>;
export type OtpLoginMutationOptions = Apollo.BaseMutationOptions<OtpLoginMutation, OtpLoginMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout
}
    `;
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const RegisterDocument = gql`
    mutation Register($input: RegisterInput!) {
  register(input: $input) {
    token
    permissions
  }
}
    `;
export type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);
      }
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;
export type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;
export const ChangePasswordDocument = gql`
    mutation ChangePassword($input: ChangePasswordInput!) {
  changePassword(input: $input) {
    message
    success
  }
}
    `;
export type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;

/**
 * __useChangePasswordMutation__
 *
 * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, options);
      }
export type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;
export type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;
export type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;
export const ForgetPasswordDocument = gql`
    mutation ForgetPassword($input: ForgetPasswordInput!) {
  forgetPassword(input: $input) {
    message
    success
  }
}
    `;
export type ForgetPasswordMutationFn = Apollo.MutationFunction<ForgetPasswordMutation, ForgetPasswordMutationVariables>;

/**
 * __useForgetPasswordMutation__
 *
 * To run a mutation, you first call `useForgetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgetPasswordMutation, { data, loading, error }] = useForgetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useForgetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgetPasswordMutation, ForgetPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ForgetPasswordMutation, ForgetPasswordMutationVariables>(ForgetPasswordDocument, options);
      }
export type ForgetPasswordMutationHookResult = ReturnType<typeof useForgetPasswordMutation>;
export type ForgetPasswordMutationResult = Apollo.MutationResult<ForgetPasswordMutation>;
export type ForgetPasswordMutationOptions = Apollo.BaseMutationOptions<ForgetPasswordMutation, ForgetPasswordMutationVariables>;
export const VerifyForgetPasswordTokenDocument = gql`
    mutation VerifyForgetPasswordToken($input: VerifyForgetPasswordTokenInput!) {
  verifyForgetPasswordToken(input: $input) {
    message
    success
  }
}
    `;
export type VerifyForgetPasswordTokenMutationFn = Apollo.MutationFunction<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>;

/**
 * __useVerifyForgetPasswordTokenMutation__
 *
 * To run a mutation, you first call `useVerifyForgetPasswordTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyForgetPasswordTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyForgetPasswordTokenMutation, { data, loading, error }] = useVerifyForgetPasswordTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useVerifyForgetPasswordTokenMutation(baseOptions?: Apollo.MutationHookOptions<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>(VerifyForgetPasswordTokenDocument, options);
      }
export type VerifyForgetPasswordTokenMutationHookResult = ReturnType<typeof useVerifyForgetPasswordTokenMutation>;
export type VerifyForgetPasswordTokenMutationResult = Apollo.MutationResult<VerifyForgetPasswordTokenMutation>;
export type VerifyForgetPasswordTokenMutationOptions = Apollo.BaseMutationOptions<VerifyForgetPasswordTokenMutation, VerifyForgetPasswordTokenMutationVariables>;
export const ResendVerificationEmailDocument = gql`
    mutation ResendVerificationEmail {
  resendVerificationEmail {
    message
    success
  }
}
    `;
export type ResendVerificationEmailMutationFn = Apollo.MutationFunction<ResendVerificationEmailMutation, ResendVerificationEmailMutationVariables>;

/**
 * __useResendVerificationEmailMutation__
 *
 * To run a mutation, you first call `useResendVerificationEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendVerificationEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendVerificationEmailMutation, { data, loading, error }] = useResendVerificationEmailMutation({
 *   variables: {
 *   },
 * });
 */
export function useResendVerificationEmailMutation(baseOptions?: Apollo.MutationHookOptions<ResendVerificationEmailMutation, ResendVerificationEmailMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ResendVerificationEmailMutation, ResendVerificationEmailMutationVariables>(ResendVerificationEmailDocument, options);
      }
export type ResendVerificationEmailMutationHookResult = ReturnType<typeof useResendVerificationEmailMutation>;
export type ResendVerificationEmailMutationResult = Apollo.MutationResult<ResendVerificationEmailMutation>;
export type ResendVerificationEmailMutationOptions = Apollo.BaseMutationOptions<ResendVerificationEmailMutation, ResendVerificationEmailMutationVariables>;
export const ResetPasswordDocument = gql`
    mutation ResetPassword($input: ResetPasswordInput!) {
  resetPassword(input: $input) {
    message
    success
  }
}
    `;
export type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options);
      }
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export const UpdateUserEmailDocument = gql`
    mutation UpdateUserEmail($input: UpdateEmailUserInput!) {
  updateUserEmail(input: $input) {
    message
    success
  }
}
    `;
export type UpdateUserEmailMutationFn = Apollo.MutationFunction<UpdateUserEmailMutation, UpdateUserEmailMutationVariables>;

/**
 * __useUpdateUserEmailMutation__
 *
 * To run a mutation, you first call `useUpdateUserEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserEmailMutation, { data, loading, error }] = useUpdateUserEmailMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateUserEmailMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserEmailMutation, UpdateUserEmailMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserEmailMutation, UpdateUserEmailMutationVariables>(UpdateUserEmailDocument, options);
      }
export type UpdateUserEmailMutationHookResult = ReturnType<typeof useUpdateUserEmailMutation>;
export type UpdateUserEmailMutationResult = Apollo.MutationResult<UpdateUserEmailMutation>;
export type UpdateUserEmailMutationOptions = Apollo.BaseMutationOptions<UpdateUserEmailMutation, UpdateUserEmailMutationVariables>;
export const UpdateCustomerDocument = gql`
    mutation UpdateCustomer($input: UpdateUserInput!) {
  updateUser(input: $input) {
    id
    name
    email
    profile {
      id
      avatar {
        id
        thumbnail
        original
      }
      bio
      socials {
        type
        link
      }
      contact
    }
    address {
      title
      default
      address {
        country
        city
        state
        zip
      }
      type
    }
  }
}
    `;
export type UpdateCustomerMutationFn = Apollo.MutationFunction<UpdateCustomerMutation, UpdateCustomerMutationVariables>;

/**
 * __useUpdateCustomerMutation__
 *
 * To run a mutation, you first call `useUpdateCustomerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomerMutation, { data, loading, error }] = useUpdateCustomerMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCustomerMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCustomerMutation, UpdateCustomerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCustomerMutation, UpdateCustomerMutationVariables>(UpdateCustomerDocument, options);
      }
export type UpdateCustomerMutationHookResult = ReturnType<typeof useUpdateCustomerMutation>;
export type UpdateCustomerMutationResult = Apollo.MutationResult<UpdateCustomerMutation>;
export type UpdateCustomerMutationOptions = Apollo.BaseMutationOptions<UpdateCustomerMutation, UpdateCustomerMutationVariables>;
export const CustomerDocument = gql`
    query Customer {
  me {
    id
    name
    email
    profile {
      id
      avatar {
        id
        thumbnail
        original
      }
      bio
      socials {
        type
        link
      }
      contact
    }
    address {
      id
      title
      default
      type
      address {
        country
        city
        state
        zip
        street_address
      }
      location {
        lat
        lng
        street_number
        route
        street_address
        city
        state
        country
        zip
        formattedAddress
      }
    }
    wallet {
      id
      total_points
      points_used
      available_points
    }
    last_order {
      ...OrderParts
    }
  }
}
    ${OrderPartsFragmentDoc}`;

/**
 * __useCustomerQuery__
 *
 * To run a query within a React component, call `useCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomerQuery({
 *   variables: {
 *   },
 * });
 */
export function useCustomerQuery(baseOptions?: Apollo.QueryHookOptions<CustomerQuery, CustomerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustomerQuery, CustomerQueryVariables>(CustomerDocument, options);
      }
export function useCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomerQuery, CustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustomerQuery, CustomerQueryVariables>(CustomerDocument, options);
        }
export function useCustomerSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CustomerQuery, CustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CustomerQuery, CustomerQueryVariables>(CustomerDocument, options);
        }
export type CustomerQueryHookResult = ReturnType<typeof useCustomerQuery>;
export type CustomerLazyQueryHookResult = ReturnType<typeof useCustomerLazyQuery>;
export type CustomerSuspenseQueryHookResult = ReturnType<typeof useCustomerSuspenseQuery>;
export type CustomerQueryResult = Apollo.QueryResult<CustomerQuery, CustomerQueryVariables>;