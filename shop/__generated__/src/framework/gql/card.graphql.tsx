/* 3cf094241e7245110047ec2caa9b96aa40d64a4f
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type CardsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CardsQuery = { __typename?: 'Query', cards: Array<{ __typename?: 'Card', id: string, method_key: string, payment_gateway_id?: number | null, default_card: boolean, owner_name?: string | null, network?: string | null, type?: string | null, last4?: string | null, expires?: string | null, origin?: string | null }> };

export type CardPartsFragment = { __typename?: 'Card', id: string, method_key: string, payment_gateway_id?: number | null, default_card: boolean, owner_name?: string | null, network?: string | null, type?: string | null, last4?: string | null, expires?: string | null, origin?: string | null };

export type AddNewCardMutationVariables = Types.Exact<{
  input: Types.AddNewCardInput;
}>;


export type AddNewCardMutation = { __typename?: 'Mutation', addNewCard: { __typename?: 'Card', id: string, method_key: string, payment_gateway_id?: number | null, default_card: boolean, owner_name?: string | null, network?: string | null, type?: string | null, last4?: string | null, expires?: string | null, origin?: string | null } };

export type SetDefaultPaymentMethodMutationVariables = Types.Exact<{
  method_id: Types.Scalars['ID']['input'];
}>;


export type SetDefaultPaymentMethodMutation = { __typename?: 'Mutation', setDefaultPaymentMethod: { __typename?: 'Card', id: string, method_key: string, payment_gateway_id?: number | null, default_card: boolean, owner_name?: string | null, network?: string | null, type?: string | null, last4?: string | null, expires?: string | null, origin?: string | null } };

export type DeleteCardMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']['input'];
}>;


export type DeleteCardMutation = { __typename?: 'Mutation', deleteCard: boolean };

export const CardPartsFragmentDoc = gql`
    fragment CardParts on Card {
  id
  method_key
  payment_gateway_id
  default_card
  owner_name
  network
  type
  last4
  expires
  origin
}
    `;
export const CardsDocument = gql`
    query Cards {
  cards {
    ...CardParts
  }
}
    ${CardPartsFragmentDoc}`;

/**
 * __useCardsQuery__
 *
 * To run a query within a React component, call `useCardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCardsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCardsQuery({
 *   variables: {
 *   },
 * });
 */
export function useCardsQuery(baseOptions?: Apollo.QueryHookOptions<CardsQuery, CardsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CardsQuery, CardsQueryVariables>(CardsDocument, options);
      }
export function useCardsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CardsQuery, CardsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CardsQuery, CardsQueryVariables>(CardsDocument, options);
        }
export function useCardsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CardsQuery, CardsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CardsQuery, CardsQueryVariables>(CardsDocument, options);
        }
export type CardsQueryHookResult = ReturnType<typeof useCardsQuery>;
export type CardsLazyQueryHookResult = ReturnType<typeof useCardsLazyQuery>;
export type CardsSuspenseQueryHookResult = ReturnType<typeof useCardsSuspenseQuery>;
export type CardsQueryResult = Apollo.QueryResult<CardsQuery, CardsQueryVariables>;
export const AddNewCardDocument = gql`
    mutation AddNewCard($input: AddNewCardInput!) {
  addNewCard(input: $input) {
    ...CardParts
  }
}
    ${CardPartsFragmentDoc}`;
export type AddNewCardMutationFn = Apollo.MutationFunction<AddNewCardMutation, AddNewCardMutationVariables>;

/**
 * __useAddNewCardMutation__
 *
 * To run a mutation, you first call `useAddNewCardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddNewCardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addNewCardMutation, { data, loading, error }] = useAddNewCardMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddNewCardMutation(baseOptions?: Apollo.MutationHookOptions<AddNewCardMutation, AddNewCardMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddNewCardMutation, AddNewCardMutationVariables>(AddNewCardDocument, options);
      }
export type AddNewCardMutationHookResult = ReturnType<typeof useAddNewCardMutation>;
export type AddNewCardMutationResult = Apollo.MutationResult<AddNewCardMutation>;
export type AddNewCardMutationOptions = Apollo.BaseMutationOptions<AddNewCardMutation, AddNewCardMutationVariables>;
export const SetDefaultPaymentMethodDocument = gql`
    mutation SetDefaultPaymentMethod($method_id: ID!) {
  setDefaultPaymentMethod(method_id: $method_id) {
    ...CardParts
  }
}
    ${CardPartsFragmentDoc}`;
export type SetDefaultPaymentMethodMutationFn = Apollo.MutationFunction<SetDefaultPaymentMethodMutation, SetDefaultPaymentMethodMutationVariables>;

/**
 * __useSetDefaultPaymentMethodMutation__
 *
 * To run a mutation, you first call `useSetDefaultPaymentMethodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetDefaultPaymentMethodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setDefaultPaymentMethodMutation, { data, loading, error }] = useSetDefaultPaymentMethodMutation({
 *   variables: {
 *      method_id: // value for 'method_id'
 *   },
 * });
 */
export function useSetDefaultPaymentMethodMutation(baseOptions?: Apollo.MutationHookOptions<SetDefaultPaymentMethodMutation, SetDefaultPaymentMethodMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetDefaultPaymentMethodMutation, SetDefaultPaymentMethodMutationVariables>(SetDefaultPaymentMethodDocument, options);
      }
export type SetDefaultPaymentMethodMutationHookResult = ReturnType<typeof useSetDefaultPaymentMethodMutation>;
export type SetDefaultPaymentMethodMutationResult = Apollo.MutationResult<SetDefaultPaymentMethodMutation>;
export type SetDefaultPaymentMethodMutationOptions = Apollo.BaseMutationOptions<SetDefaultPaymentMethodMutation, SetDefaultPaymentMethodMutationVariables>;
export const DeleteCardDocument = gql`
    mutation DeleteCard($id: ID!) {
  deleteCard(id: $id)
}
    `;
export type DeleteCardMutationFn = Apollo.MutationFunction<DeleteCardMutation, DeleteCardMutationVariables>;

/**
 * __useDeleteCardMutation__
 *
 * To run a mutation, you first call `useDeleteCardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCardMutation, { data, loading, error }] = useDeleteCardMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCardMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCardMutation, DeleteCardMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCardMutation, DeleteCardMutationVariables>(DeleteCardDocument, options);
      }
export type DeleteCardMutationHookResult = ReturnType<typeof useDeleteCardMutation>;
export type DeleteCardMutationResult = Apollo.MutationResult<DeleteCardMutation>;
export type DeleteCardMutationOptions = Apollo.BaseMutationOptions<DeleteCardMutation, DeleteCardMutationVariables>;