/* 886c216bd30f9473cba38da616fbd1f158148297
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type CategoryPartsFragment = { __typename?: 'Category', id: string, name: string, slug: string, language: string, translated_languages: Array<string>, details?: string | null, parent_id?: string | null, products_count?: number | null, icon?: string | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null };

export type CategoriesQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryCategoriesOrderByOrderByClause> | Types.QueryCategoriesOrderByOrderByClause>;
  hasType?: Types.InputMaybe<Types.QueryCategoriesHasTypeWhereHasConditions>;
  name?: Types.InputMaybe<Types.Scalars['String']['input']>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  parent?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type CategoriesQuery = { __typename?: 'Query', categories: { __typename?: 'CategoryPaginator', data: Array<{ __typename?: 'Category', id: string, name: string, slug: string, language: string, translated_languages: Array<string>, details?: string | null, parent_id?: string | null, products_count?: number | null, icon?: string | null, children?: Array<{ __typename?: 'Category', id: string, name: string, slug: string, language: string, translated_languages: Array<string>, details?: string | null, parent_id?: string | null, products_count?: number | null, icon?: string | null, children?: Array<{ __typename?: 'Category', id: string, name: string, slug: string, language: string, translated_languages: Array<string>, details?: string | null, parent_id?: string | null, products_count?: number | null, icon?: string | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null } | null> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null } | null> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export const CategoryPartsFragmentDoc = gql`
    fragment CategoryParts on Category {
  id
  name
  slug
  language
  translated_languages
  details
  parent_id
  products_count
  image {
    id
    original
    thumbnail
  }
  icon
  type {
    id
    name
    slug
  }
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const CategoriesDocument = gql`
    query Categories($orderBy: [QueryCategoriesOrderByOrderByClause!], $hasType: QueryCategoriesHasTypeWhereHasConditions, $name: String, $first: Int = 2, $page: Int, $parent: ID, $language: String) {
  categories(
    hasType: $hasType
    orderBy: $orderBy
    name: $name
    first: $first
    page: $page
    parent: $parent
    language: $language
  ) {
    data {
      ...CategoryParts
      children {
        ...CategoryParts
        children {
          ...CategoryParts
        }
      }
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${CategoryPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useCategoriesQuery__
 *
 * To run a query within a React component, call `useCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCategoriesQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      hasType: // value for 'hasType'
 *      name: // value for 'name'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      parent: // value for 'parent'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesQuery, CategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CategoriesQuery, CategoriesQueryVariables>(CategoriesDocument, options);
      }
export function useCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CategoriesQuery, CategoriesQueryVariables>(CategoriesDocument, options);
        }
export function useCategoriesSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CategoriesQuery, CategoriesQueryVariables>(CategoriesDocument, options);
        }
export type CategoriesQueryHookResult = ReturnType<typeof useCategoriesQuery>;
export type CategoriesLazyQueryHookResult = ReturnType<typeof useCategoriesLazyQuery>;
export type CategoriesSuspenseQueryHookResult = ReturnType<typeof useCategoriesSuspenseQuery>;
export type CategoriesQueryResult = Apollo.QueryResult<CategoriesQuery, CategoriesQueryVariables>;