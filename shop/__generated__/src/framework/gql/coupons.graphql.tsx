/* 7ac153da87efda6cd217412bef4b1d7298f6667b
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type CouponPartsFragment = { __typename?: 'Coupon', id: string, description?: string | null, code?: string | null, type?: string | null, amount?: number | null, minimum_cart_amount?: number | null, expire_at: string, active_from: string, target?: boolean | null, is_valid?: boolean | null, is_approve?: boolean | null, language?: string | null, translated_languages?: Array<string> | null, shop_id?: string | null, user_id?: string | null, message?: string | null, sub_total?: number | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null };

export type CouponQueryVariables = Types.Exact<{
  id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  code?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type CouponQuery = { __typename?: 'Query', coupon: { __typename?: 'Coupon', id: string, code?: string | null, type?: string | null, amount?: number | null, is_valid?: boolean | null } };

export type VerifyCouponMutationVariables = Types.Exact<{
  input: Types.VerifyCouponInput;
}>;


export type VerifyCouponMutation = { __typename?: 'Mutation', verifyCoupon: { __typename?: 'VerifyCouponResponse', is_valid: boolean, message: string, coupon: { __typename?: 'Coupon', id: string, code?: string | null, type?: string | null, amount?: number | null, is_valid?: boolean | null } } };

export type CouponsQueryVariables = Types.Exact<{
  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
  searchJoin?: Types.InputMaybe<Types.Scalars['String']['input']>;
  type?: Types.InputMaybe<Types.Scalars['String']['input']>;
  is_approve?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
}>;


export type CouponsQuery = { __typename?: 'Query', coupons: { __typename?: 'CouponPaginator', data: Array<{ __typename?: 'Coupon', id: string, description?: string | null, code?: string | null, type?: string | null, amount?: number | null, minimum_cart_amount?: number | null, expire_at: string, active_from: string, target?: boolean | null, is_valid?: boolean | null, is_approve?: boolean | null, language?: string | null, translated_languages?: Array<string> | null, shop_id?: string | null, user_id?: string | null, message?: string | null, sub_total?: number | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export const CouponPartsFragmentDoc = gql`
    fragment CouponParts on Coupon {
  id
  description
  code
  image {
    id
    original
    thumbnail
  }
  type
  amount
  minimum_cart_amount
  expire_at
  active_from
  target
  is_valid
  is_approve
  language
  translated_languages
  shop_id
  user_id
  message
  sub_total
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const CouponDocument = gql`
    query Coupon($id: ID, $code: String, $language: String) {
  coupon(id: $id, code: $code, language: $language) {
    id
    code
    type
    amount
    is_valid
  }
}
    `;

/**
 * __useCouponQuery__
 *
 * To run a query within a React component, call `useCouponQuery` and pass it any options that fit your needs.
 * When your component renders, `useCouponQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCouponQuery({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useCouponQuery(baseOptions?: Apollo.QueryHookOptions<CouponQuery, CouponQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CouponQuery, CouponQueryVariables>(CouponDocument, options);
      }
export function useCouponLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CouponQuery, CouponQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CouponQuery, CouponQueryVariables>(CouponDocument, options);
        }
export function useCouponSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CouponQuery, CouponQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CouponQuery, CouponQueryVariables>(CouponDocument, options);
        }
export type CouponQueryHookResult = ReturnType<typeof useCouponQuery>;
export type CouponLazyQueryHookResult = ReturnType<typeof useCouponLazyQuery>;
export type CouponSuspenseQueryHookResult = ReturnType<typeof useCouponSuspenseQuery>;
export type CouponQueryResult = Apollo.QueryResult<CouponQuery, CouponQueryVariables>;
export const VerifyCouponDocument = gql`
    mutation VerifyCoupon($input: VerifyCouponInput!) {
  verifyCoupon(input: $input) {
    is_valid
    coupon {
      id
      code
      type
      amount
      is_valid
    }
    message
  }
}
    `;
export type VerifyCouponMutationFn = Apollo.MutationFunction<VerifyCouponMutation, VerifyCouponMutationVariables>;

/**
 * __useVerifyCouponMutation__
 *
 * To run a mutation, you first call `useVerifyCouponMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyCouponMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyCouponMutation, { data, loading, error }] = useVerifyCouponMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useVerifyCouponMutation(baseOptions?: Apollo.MutationHookOptions<VerifyCouponMutation, VerifyCouponMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<VerifyCouponMutation, VerifyCouponMutationVariables>(VerifyCouponDocument, options);
      }
export type VerifyCouponMutationHookResult = ReturnType<typeof useVerifyCouponMutation>;
export type VerifyCouponMutationResult = Apollo.MutationResult<VerifyCouponMutation>;
export type VerifyCouponMutationOptions = Apollo.BaseMutationOptions<VerifyCouponMutation, VerifyCouponMutationVariables>;
export const CouponsDocument = gql`
    query Coupons($search: String, $orderBy: String, $sortedBy: String, $language: String, $searchJoin: String, $type: String, $is_approve: Boolean, $first: Int = 15, $page: Int, $shop_id: ID) {
  coupons(
    search: $search
    orderBy: $orderBy
    sortedBy: $sortedBy
    language: $language
    searchJoin: $searchJoin
    type: $type
    first: $first
    is_approve: $is_approve
    page: $page
    shop_id: $shop_id
  ) {
    data {
      ...CouponParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${CouponPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useCouponsQuery__
 *
 * To run a query within a React component, call `useCouponsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCouponsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      language: // value for 'language'
 *      searchJoin: // value for 'searchJoin'
 *      type: // value for 'type'
 *      is_approve: // value for 'is_approve'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      shop_id: // value for 'shop_id'
 *   },
 * });
 */
export function useCouponsQuery(baseOptions?: Apollo.QueryHookOptions<CouponsQuery, CouponsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CouponsQuery, CouponsQueryVariables>(CouponsDocument, options);
      }
export function useCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CouponsQuery, CouponsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CouponsQuery, CouponsQueryVariables>(CouponsDocument, options);
        }
export function useCouponsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CouponsQuery, CouponsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CouponsQuery, CouponsQueryVariables>(CouponsDocument, options);
        }
export type CouponsQueryHookResult = ReturnType<typeof useCouponsQuery>;
export type CouponsLazyQueryHookResult = ReturnType<typeof useCouponsLazyQuery>;
export type CouponsSuspenseQueryHookResult = ReturnType<typeof useCouponsSuspenseQuery>;
export type CouponsQueryResult = Apollo.QueryResult<CouponsQuery, CouponsQueryVariables>;