/* 38f528dc6a13800709794672db0458da142a2f1f
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type FaqPartsFragment = { __typename?: 'Faqs', id: string, shop_id?: string | null, slug?: string | null, faq_description?: string | null, faq_title?: string | null, faq_type?: string | null, issued_by?: string | null, language?: string | null, translated_languages?: Array<string> | null };

export type FaqsQueryVariables = Types.Exact<{
  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
  searchJoin?: Types.InputMaybe<Types.Scalars['String']['input']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  faq_type?: Types.InputMaybe<Types.Scalars['String']['input']>;
  issued_by?: Types.InputMaybe<Types.Scalars['String']['input']>;
  first: Types.Scalars['Int']['input'];
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type FaqsQuery = { __typename?: 'Query', faqs: { __typename?: 'FaqPaginator', data: Array<{ __typename?: 'Faqs', id: string, shop_id?: string | null, slug?: string | null, faq_description?: string | null, faq_title?: string | null, faq_type?: string | null, issued_by?: string | null, language?: string | null, translated_languages?: Array<string> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export const FaqPartsFragmentDoc = gql`
    fragment FaqParts on Faqs {
  id
  shop_id
  slug
  faq_description
  faq_title
  faq_type
  issued_by
  language
  translated_languages
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const FaqsDocument = gql`
    query Faqs($search: String, $orderBy: String, $sortedBy: String, $language: String, $searchJoin: String, $shop_id: ID, $faq_type: String, $issued_by: String, $first: Int!, $page: Int) {
  faqs(
    search: $search
    orderBy: $orderBy
    sortedBy: $sortedBy
    searchJoin: $searchJoin
    shop_id: $shop_id
    faq_type: $faq_type
    issued_by: $issued_by
    language: $language
    first: $first
    page: $page
  ) {
    data {
      ...FaqParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${FaqPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useFaqsQuery__
 *
 * To run a query within a React component, call `useFaqsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFaqsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFaqsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      language: // value for 'language'
 *      searchJoin: // value for 'searchJoin'
 *      shop_id: // value for 'shop_id'
 *      faq_type: // value for 'faq_type'
 *      issued_by: // value for 'issued_by'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useFaqsQuery(baseOptions: Apollo.QueryHookOptions<FaqsQuery, FaqsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FaqsQuery, FaqsQueryVariables>(FaqsDocument, options);
      }
export function useFaqsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FaqsQuery, FaqsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FaqsQuery, FaqsQueryVariables>(FaqsDocument, options);
        }
export function useFaqsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<FaqsQuery, FaqsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FaqsQuery, FaqsQueryVariables>(FaqsDocument, options);
        }
export type FaqsQueryHookResult = ReturnType<typeof useFaqsQuery>;
export type FaqsLazyQueryHookResult = ReturnType<typeof useFaqsLazyQuery>;
export type FaqsSuspenseQueryHookResult = ReturnType<typeof useFaqsSuspenseQuery>;
export type FaqsQueryResult = Apollo.QueryResult<FaqsQuery, FaqsQueryVariables>;