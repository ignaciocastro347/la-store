/* aaac3fc663e6e4f83a53564bc51663994b8bd542
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type TypePartsFragment = { __typename?: 'Type', id: string, name?: string | null, slug?: string | null, language?: string | null, translated_languages?: Array<string> | null, icon?: string | null, banners?: Array<{ __typename?: 'Banner', title?: string | null, description?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null }> | null, settings?: { __typename?: 'TypeSettings', isHome?: boolean | null, layoutType?: string | null, productCard?: string | null, bestSelling?: { __typename?: 'CompactBestSellingInput', enable?: boolean | null, title?: string | null } | null, popularProducts?: { __typename?: 'CompactDemoPopularProductsInput', enable?: boolean | null, title?: string | null } | null, category?: { __typename?: 'CompactDemoCategoryInput', enable?: boolean | null, title?: string | null } | null, handpickedProducts?: { __typename?: 'CompactDemoHandpickedProductsInput', enable?: boolean | null, title?: string | null, enableSlider?: boolean | null, products?: Array<{ __typename?: 'CompactProductInput', id: string, name?: string | null, slug?: string | null, regular_price?: number | null, sale_price?: number | null, min_price?: number | null, max_price?: number | null, product_type?: string | null, quantity?: number | null, is_external?: boolean | null, unit?: string | null, price?: number | null, external_product_url?: string | null, status?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, type?: { __typename?: 'CompactTypeSettingsInput', settings?: { __typename?: 'CompactTypeProductCardInput', productCard?: string | null } | null } | null }> | null } | null, newArrival?: { __typename?: 'CompactDemoNewArrivalInput', enable?: boolean | null, title?: string | null } | null, authors?: { __typename?: 'CompactDemoAuthorsInput', enable?: boolean | null, title?: string | null } | null, manufactures?: { __typename?: 'CompactDemoManufacturesInput', enable?: boolean | null, title?: string | null } | null } | null, promotional_sliders?: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }> | null };

export type GroupsQueryVariables = Types.Exact<{
  text?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryTypesOrderByOrderByClause> | Types.QueryTypesOrderByOrderByClause>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type GroupsQuery = { __typename?: 'Query', types: Array<{ __typename?: 'Type', id: string, name?: string | null, slug?: string | null, language?: string | null, translated_languages?: Array<string> | null, icon?: string | null, banners?: Array<{ __typename?: 'Banner', title?: string | null, description?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null }> | null, settings?: { __typename?: 'TypeSettings', isHome?: boolean | null, layoutType?: string | null, productCard?: string | null, bestSelling?: { __typename?: 'CompactBestSellingInput', enable?: boolean | null, title?: string | null } | null, popularProducts?: { __typename?: 'CompactDemoPopularProductsInput', enable?: boolean | null, title?: string | null } | null, category?: { __typename?: 'CompactDemoCategoryInput', enable?: boolean | null, title?: string | null } | null, handpickedProducts?: { __typename?: 'CompactDemoHandpickedProductsInput', enable?: boolean | null, title?: string | null, enableSlider?: boolean | null, products?: Array<{ __typename?: 'CompactProductInput', id: string, name?: string | null, slug?: string | null, regular_price?: number | null, sale_price?: number | null, min_price?: number | null, max_price?: number | null, product_type?: string | null, quantity?: number | null, is_external?: boolean | null, unit?: string | null, price?: number | null, external_product_url?: string | null, status?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, type?: { __typename?: 'CompactTypeSettingsInput', settings?: { __typename?: 'CompactTypeProductCardInput', productCard?: string | null } | null } | null }> | null } | null, newArrival?: { __typename?: 'CompactDemoNewArrivalInput', enable?: boolean | null, title?: string | null } | null, authors?: { __typename?: 'CompactDemoAuthorsInput', enable?: boolean | null, title?: string | null } | null, manufactures?: { __typename?: 'CompactDemoManufacturesInput', enable?: boolean | null, title?: string | null } | null } | null, promotional_sliders?: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }> | null }> };

export type GroupQueryVariables = Types.Exact<{
  slug?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type GroupQuery = { __typename?: 'Query', type: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null, language?: string | null, translated_languages?: Array<string> | null, icon?: string | null, banners?: Array<{ __typename?: 'Banner', title?: string | null, description?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null }> | null, settings?: { __typename?: 'TypeSettings', isHome?: boolean | null, layoutType?: string | null, productCard?: string | null, bestSelling?: { __typename?: 'CompactBestSellingInput', enable?: boolean | null, title?: string | null } | null, popularProducts?: { __typename?: 'CompactDemoPopularProductsInput', enable?: boolean | null, title?: string | null } | null, category?: { __typename?: 'CompactDemoCategoryInput', enable?: boolean | null, title?: string | null } | null, handpickedProducts?: { __typename?: 'CompactDemoHandpickedProductsInput', enable?: boolean | null, title?: string | null, enableSlider?: boolean | null, products?: Array<{ __typename?: 'CompactProductInput', id: string, name?: string | null, slug?: string | null, regular_price?: number | null, sale_price?: number | null, min_price?: number | null, max_price?: number | null, product_type?: string | null, quantity?: number | null, is_external?: boolean | null, unit?: string | null, price?: number | null, external_product_url?: string | null, status?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, type?: { __typename?: 'CompactTypeSettingsInput', settings?: { __typename?: 'CompactTypeProductCardInput', productCard?: string | null } | null } | null }> | null } | null, newArrival?: { __typename?: 'CompactDemoNewArrivalInput', enable?: boolean | null, title?: string | null } | null, authors?: { __typename?: 'CompactDemoAuthorsInput', enable?: boolean | null, title?: string | null } | null, manufactures?: { __typename?: 'CompactDemoManufacturesInput', enable?: boolean | null, title?: string | null } | null } | null, promotional_sliders?: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }> | null } };

export const TypePartsFragmentDoc = gql`
    fragment TypeParts on Type {
  id
  name
  slug
  language
  translated_languages
  icon
  banners {
    title
    description
    image {
      id
      thumbnail
      original
    }
  }
  settings {
    isHome
    layoutType
    productCard
    bestSelling {
      enable
      title
    }
    popularProducts {
      enable
      title
    }
    category {
      enable
      title
    }
    handpickedProducts {
      enable
      title
      enableSlider
      products {
        id
        name
        slug
        image {
          id
          thumbnail
          original
        }
        regular_price
        sale_price
        min_price
        max_price
        product_type
        quantity
        is_external
        unit
        price
        external_product_url
        status
        type {
          settings {
            productCard
          }
        }
      }
    }
    newArrival {
      enable
      title
    }
    authors {
      enable
      title
    }
    manufactures {
      enable
      title
    }
  }
  promotional_sliders {
    id
    thumbnail
    original
  }
}
    `;
export const GroupsDocument = gql`
    query Groups($text: String, $orderBy: [QueryTypesOrderByOrderByClause!], $language: String) {
  types(text: $text, orderBy: $orderBy, language: $language) {
    ...TypeParts
  }
}
    ${TypePartsFragmentDoc}`;

/**
 * __useGroupsQuery__
 *
 * To run a query within a React component, call `useGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGroupsQuery({
 *   variables: {
 *      text: // value for 'text'
 *      orderBy: // value for 'orderBy'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useGroupsQuery(baseOptions?: Apollo.QueryHookOptions<GroupsQuery, GroupsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GroupsQuery, GroupsQueryVariables>(GroupsDocument, options);
      }
export function useGroupsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GroupsQuery, GroupsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GroupsQuery, GroupsQueryVariables>(GroupsDocument, options);
        }
export function useGroupsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<GroupsQuery, GroupsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GroupsQuery, GroupsQueryVariables>(GroupsDocument, options);
        }
export type GroupsQueryHookResult = ReturnType<typeof useGroupsQuery>;
export type GroupsLazyQueryHookResult = ReturnType<typeof useGroupsLazyQuery>;
export type GroupsSuspenseQueryHookResult = ReturnType<typeof useGroupsSuspenseQuery>;
export type GroupsQueryResult = Apollo.QueryResult<GroupsQuery, GroupsQueryVariables>;
export const GroupDocument = gql`
    query Group($slug: String, $language: String) {
  type(slug: $slug, language: $language) {
    ...TypeParts
  }
}
    ${TypePartsFragmentDoc}`;

/**
 * __useGroupQuery__
 *
 * To run a query within a React component, call `useGroupQuery` and pass it any options that fit your needs.
 * When your component renders, `useGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGroupQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useGroupQuery(baseOptions?: Apollo.QueryHookOptions<GroupQuery, GroupQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GroupQuery, GroupQueryVariables>(GroupDocument, options);
      }
export function useGroupLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GroupQuery, GroupQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GroupQuery, GroupQueryVariables>(GroupDocument, options);
        }
export function useGroupSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<GroupQuery, GroupQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GroupQuery, GroupQueryVariables>(GroupDocument, options);
        }
export type GroupQueryHookResult = ReturnType<typeof useGroupQuery>;
export type GroupLazyQueryHookResult = ReturnType<typeof useGroupLazyQuery>;
export type GroupSuspenseQueryHookResult = ReturnType<typeof useGroupSuspenseQuery>;
export type GroupQueryResult = Apollo.QueryResult<GroupQuery, GroupQueryVariables>;