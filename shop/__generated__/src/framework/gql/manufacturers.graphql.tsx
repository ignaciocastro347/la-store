/* b6db1d7904aa36ae818d67d521c095adeeee29a2
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type ManufacturerPartsFragment = { __typename?: 'Manufacturer', id: string, name: string, is_approved?: boolean | null, slug?: string | null, description?: string | null, website?: string | null, socials?: Array<{ __typename?: 'ShopSocials', url?: string | null, icon?: string | null }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null }, cover_image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null };

export type ManufacturersQueryVariables = Types.Exact<{
  hasType?: Types.InputMaybe<Types.QueryManufacturersHasTypeWhereHasConditions>;
  text?: Types.InputMaybe<Types.Scalars['String']['input']>;
  is_approved?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryManufacturersOrderByOrderByClause> | Types.QueryManufacturersOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type ManufacturersQuery = { __typename?: 'Query', manufacturers: { __typename?: 'ManufacturerPaginator', data: Array<{ __typename?: 'Manufacturer', id: string, name: string, is_approved?: boolean | null, slug?: string | null, description?: string | null, website?: string | null, socials?: Array<{ __typename?: 'ShopSocials', url?: string | null, icon?: string | null }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null }, cover_image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export type TopManufacturersQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type TopManufacturersQuery = { __typename?: 'Query', topManufacturers: Array<{ __typename?: 'Manufacturer', id: string, name: string, is_approved?: boolean | null, slug?: string | null, description?: string | null, website?: string | null, socials?: Array<{ __typename?: 'ShopSocials', url?: string | null, icon?: string | null }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null }, cover_image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null }> };

export type ManufacturerQueryVariables = Types.Exact<{
  slug?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type ManufacturerQuery = { __typename?: 'Query', manufacturer: { __typename?: 'Manufacturer', id: string, name: string, is_approved?: boolean | null, slug?: string | null, description?: string | null, website?: string | null, socials?: Array<{ __typename?: 'ShopSocials', url?: string | null, icon?: string | null }> | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null }, cover_image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null } };

export const ManufacturerPartsFragmentDoc = gql`
    fragment ManufacturerParts on Manufacturer {
  id
  name
  is_approved
  slug
  description
  website
  socials {
    url
    icon
  }
  image {
    id
    original
    thumbnail
  }
  type {
    id
    name
    slug
  }
  cover_image {
    id
    original
    thumbnail
  }
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const ManufacturersDocument = gql`
    query Manufacturers($hasType: QueryManufacturersHasTypeWhereHasConditions, $text: String, $is_approved: Boolean, $orderBy: [QueryManufacturersOrderByOrderByClause!], $first: Int = 15, $page: Int, $language: String) {
  manufacturers(
    text: $text
    orderBy: $orderBy
    hasType: $hasType
    is_approved: $is_approved
    first: $first
    page: $page
    language: $language
  ) {
    data {
      ...ManufacturerParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${ManufacturerPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useManufacturersQuery__
 *
 * To run a query within a React component, call `useManufacturersQuery` and pass it any options that fit your needs.
 * When your component renders, `useManufacturersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManufacturersQuery({
 *   variables: {
 *      hasType: // value for 'hasType'
 *      text: // value for 'text'
 *      is_approved: // value for 'is_approved'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useManufacturersQuery(baseOptions?: Apollo.QueryHookOptions<ManufacturersQuery, ManufacturersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ManufacturersQuery, ManufacturersQueryVariables>(ManufacturersDocument, options);
      }
export function useManufacturersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ManufacturersQuery, ManufacturersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ManufacturersQuery, ManufacturersQueryVariables>(ManufacturersDocument, options);
        }
export function useManufacturersSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ManufacturersQuery, ManufacturersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ManufacturersQuery, ManufacturersQueryVariables>(ManufacturersDocument, options);
        }
export type ManufacturersQueryHookResult = ReturnType<typeof useManufacturersQuery>;
export type ManufacturersLazyQueryHookResult = ReturnType<typeof useManufacturersLazyQuery>;
export type ManufacturersSuspenseQueryHookResult = ReturnType<typeof useManufacturersSuspenseQuery>;
export type ManufacturersQueryResult = Apollo.QueryResult<ManufacturersQuery, ManufacturersQueryVariables>;
export const TopManufacturersDocument = gql`
    query TopManufacturers($limit: Int = 15, $language: String) {
  topManufacturers(limit: $limit, language: $language) {
    ...ManufacturerParts
  }
}
    ${ManufacturerPartsFragmentDoc}`;

/**
 * __useTopManufacturersQuery__
 *
 * To run a query within a React component, call `useTopManufacturersQuery` and pass it any options that fit your needs.
 * When your component renders, `useTopManufacturersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTopManufacturersQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useTopManufacturersQuery(baseOptions?: Apollo.QueryHookOptions<TopManufacturersQuery, TopManufacturersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TopManufacturersQuery, TopManufacturersQueryVariables>(TopManufacturersDocument, options);
      }
export function useTopManufacturersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopManufacturersQuery, TopManufacturersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TopManufacturersQuery, TopManufacturersQueryVariables>(TopManufacturersDocument, options);
        }
export function useTopManufacturersSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<TopManufacturersQuery, TopManufacturersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TopManufacturersQuery, TopManufacturersQueryVariables>(TopManufacturersDocument, options);
        }
export type TopManufacturersQueryHookResult = ReturnType<typeof useTopManufacturersQuery>;
export type TopManufacturersLazyQueryHookResult = ReturnType<typeof useTopManufacturersLazyQuery>;
export type TopManufacturersSuspenseQueryHookResult = ReturnType<typeof useTopManufacturersSuspenseQuery>;
export type TopManufacturersQueryResult = Apollo.QueryResult<TopManufacturersQuery, TopManufacturersQueryVariables>;
export const ManufacturerDocument = gql`
    query Manufacturer($slug: String, $language: String) {
  manufacturer(slug: $slug, language: $language) {
    ...ManufacturerParts
  }
}
    ${ManufacturerPartsFragmentDoc}`;

/**
 * __useManufacturerQuery__
 *
 * To run a query within a React component, call `useManufacturerQuery` and pass it any options that fit your needs.
 * When your component renders, `useManufacturerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManufacturerQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useManufacturerQuery(baseOptions?: Apollo.QueryHookOptions<ManufacturerQuery, ManufacturerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ManufacturerQuery, ManufacturerQueryVariables>(ManufacturerDocument, options);
      }
export function useManufacturerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ManufacturerQuery, ManufacturerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ManufacturerQuery, ManufacturerQueryVariables>(ManufacturerDocument, options);
        }
export function useManufacturerSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ManufacturerQuery, ManufacturerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ManufacturerQuery, ManufacturerQueryVariables>(ManufacturerDocument, options);
        }
export type ManufacturerQueryHookResult = ReturnType<typeof useManufacturerQuery>;
export type ManufacturerLazyQueryHookResult = ReturnType<typeof useManufacturerLazyQuery>;
export type ManufacturerSuspenseQueryHookResult = ReturnType<typeof useManufacturerSuspenseQuery>;
export type ManufacturerQueryResult = Apollo.QueryResult<ManufacturerQuery, ManufacturerQueryVariables>;