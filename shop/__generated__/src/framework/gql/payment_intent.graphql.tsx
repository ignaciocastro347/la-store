/* de4fc94b822b2f1994fbad36e92c221c3fa47126
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type GetPaymentIntentQueryVariables = Types.Exact<{
  tracking_number: Types.Scalars['ID']['input'];
  payment_gateway: Types.Scalars['String']['input'];
  recall_gateway: Types.Scalars['Boolean']['input'];
}>;


export type GetPaymentIntentQuery = { __typename?: 'Query', getPaymentIntent: { __typename?: 'PaymentIntent', id: string, order_id: string, payment_gateway: string, tracking_number: string, payment_intent_info?: { __typename?: 'PaymentIntentInfo', client_secret?: string | null, is_redirect: boolean, payment_id: string, redirect_url?: string | null, amount: string, currency: string } | null } };

export type PaymentIntentPartsFragment = { __typename?: 'PaymentIntent', id: string, order_id: string, payment_gateway: string, tracking_number: string, payment_intent_info?: { __typename?: 'PaymentIntentInfo', client_secret?: string | null, is_redirect: boolean, payment_id: string, redirect_url?: string | null, amount: string, currency: string } | null };

export type SavePaymentMethodMutationVariables = Types.Exact<{
  input: Types.SavePaymentMethodInput;
}>;


export type SavePaymentMethodMutation = { __typename?: 'Mutation', savePaymentMethod: { __typename?: 'Card', method_key: string } };

export const PaymentIntentPartsFragmentDoc = gql`
    fragment PaymentIntentParts on PaymentIntent {
  id
  order_id
  payment_gateway
  tracking_number
  payment_intent_info {
    client_secret
    is_redirect
    payment_id
    redirect_url
    amount
    currency
  }
}
    `;
export const GetPaymentIntentDocument = gql`
    query GetPaymentIntent($tracking_number: ID!, $payment_gateway: String!, $recall_gateway: Boolean!) {
  getPaymentIntent(
    tracking_number: $tracking_number
    payment_gateway: $payment_gateway
    recall_gateway: $recall_gateway
  ) {
    ...PaymentIntentParts
  }
}
    ${PaymentIntentPartsFragmentDoc}`;

/**
 * __useGetPaymentIntentQuery__
 *
 * To run a query within a React component, call `useGetPaymentIntentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPaymentIntentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPaymentIntentQuery({
 *   variables: {
 *      tracking_number: // value for 'tracking_number'
 *      payment_gateway: // value for 'payment_gateway'
 *      recall_gateway: // value for 'recall_gateway'
 *   },
 * });
 */
export function useGetPaymentIntentQuery(baseOptions: Apollo.QueryHookOptions<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>(GetPaymentIntentDocument, options);
      }
export function useGetPaymentIntentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>(GetPaymentIntentDocument, options);
        }
export function useGetPaymentIntentSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>(GetPaymentIntentDocument, options);
        }
export type GetPaymentIntentQueryHookResult = ReturnType<typeof useGetPaymentIntentQuery>;
export type GetPaymentIntentLazyQueryHookResult = ReturnType<typeof useGetPaymentIntentLazyQuery>;
export type GetPaymentIntentSuspenseQueryHookResult = ReturnType<typeof useGetPaymentIntentSuspenseQuery>;
export type GetPaymentIntentQueryResult = Apollo.QueryResult<GetPaymentIntentQuery, GetPaymentIntentQueryVariables>;
export const SavePaymentMethodDocument = gql`
    mutation SavePaymentMethod($input: SavePaymentMethodInput!) {
  savePaymentMethod(input: $input) {
    method_key
  }
}
    `;
export type SavePaymentMethodMutationFn = Apollo.MutationFunction<SavePaymentMethodMutation, SavePaymentMethodMutationVariables>;

/**
 * __useSavePaymentMethodMutation__
 *
 * To run a mutation, you first call `useSavePaymentMethodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSavePaymentMethodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [savePaymentMethodMutation, { data, loading, error }] = useSavePaymentMethodMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSavePaymentMethodMutation(baseOptions?: Apollo.MutationHookOptions<SavePaymentMethodMutation, SavePaymentMethodMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SavePaymentMethodMutation, SavePaymentMethodMutationVariables>(SavePaymentMethodDocument, options);
      }
export type SavePaymentMethodMutationHookResult = ReturnType<typeof useSavePaymentMethodMutation>;
export type SavePaymentMethodMutationResult = Apollo.MutationResult<SavePaymentMethodMutation>;
export type SavePaymentMethodMutationOptions = Apollo.BaseMutationOptions<SavePaymentMethodMutation, SavePaymentMethodMutationVariables>;