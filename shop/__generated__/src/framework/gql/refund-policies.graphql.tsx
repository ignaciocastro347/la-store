/* 5151a2e817daa0eed742a0a0d575d140bbb8bec7
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type RefundPolicyPartsFragment = { __typename?: 'RefundPolicy', id: string, title?: string | null, slug?: string | null, description?: string | null, target?: Types.RefundPolicyTarget | null, language?: string | null, status?: Types.RefundPolicyStatus | null, shop_id?: string | null, translated_languages?: Array<string> | null };

export type RefundPoliciesQueryVariables = Types.Exact<{
  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
  searchJoin?: Types.InputMaybe<Types.Scalars['String']['input']>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type RefundPoliciesQuery = { __typename?: 'Query', refundPolicies: { __typename?: 'RefundPoliciesPaginator', data: Array<{ __typename?: 'RefundPolicy', id: string, title?: string | null, slug?: string | null, description?: string | null, target?: Types.RefundPolicyTarget | null, language?: string | null, status?: Types.RefundPolicyStatus | null, shop_id?: string | null, translated_languages?: Array<string> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export const RefundPolicyPartsFragmentDoc = gql`
    fragment RefundPolicyParts on RefundPolicy {
  id
  title
  slug
  description
  target
  language
  status
  shop_id
  translated_languages
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const RefundPoliciesDocument = gql`
    query RefundPolicies($search: String, $orderBy: String, $sortedBy: String, $language: String, $searchJoin: String = "and", $first: Int = 15, $page: Int) {
  refundPolicies(
    search: $search
    orderBy: $orderBy
    sortedBy: $sortedBy
    language: $language
    searchJoin: $searchJoin
    first: $first
    page: $page
  ) {
    data {
      ...RefundPolicyParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${RefundPolicyPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useRefundPoliciesQuery__
 *
 * To run a query within a React component, call `useRefundPoliciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useRefundPoliciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRefundPoliciesQuery({
 *   variables: {
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      language: // value for 'language'
 *      searchJoin: // value for 'searchJoin'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useRefundPoliciesQuery(baseOptions?: Apollo.QueryHookOptions<RefundPoliciesQuery, RefundPoliciesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RefundPoliciesQuery, RefundPoliciesQueryVariables>(RefundPoliciesDocument, options);
      }
export function useRefundPoliciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RefundPoliciesQuery, RefundPoliciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RefundPoliciesQuery, RefundPoliciesQueryVariables>(RefundPoliciesDocument, options);
        }
export function useRefundPoliciesSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<RefundPoliciesQuery, RefundPoliciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RefundPoliciesQuery, RefundPoliciesQueryVariables>(RefundPoliciesDocument, options);
        }
export type RefundPoliciesQueryHookResult = ReturnType<typeof useRefundPoliciesQuery>;
export type RefundPoliciesLazyQueryHookResult = ReturnType<typeof useRefundPoliciesLazyQuery>;
export type RefundPoliciesSuspenseQueryHookResult = ReturnType<typeof useRefundPoliciesSuspenseQuery>;
export type RefundPoliciesQueryResult = Apollo.QueryResult<RefundPoliciesQuery, RefundPoliciesQueryVariables>;