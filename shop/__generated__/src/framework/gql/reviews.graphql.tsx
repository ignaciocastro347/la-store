/* 2f013df1e17d89c60b891f97ae8e8673925c1a48
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type ReviewPartsFragment = { __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null };

export type ReviewsQueryVariables = Types.Exact<{
  product_id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  rating?: Types.InputMaybe<Types.Scalars['Float']['input']>;
  orderBy?: Types.InputMaybe<Array<Types.QueryReviewsOrderByOrderByClause> | Types.QueryReviewsOrderByOrderByClause>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type ReviewsQuery = { __typename?: 'Query', reviews: { __typename?: 'ReviewPaginator', data: Array<{ __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export type CreateReviewMutationVariables = Types.Exact<{
  input: Types.CreateReviewInput;
}>;


export type CreateReviewMutation = { __typename?: 'Mutation', createReview: { __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null } };

export type UpdateReviewMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']['input'];
  input: Types.UpdateReviewInput;
}>;


export type UpdateReviewMutation = { __typename?: 'Mutation', updateReview: { __typename?: 'Review', id: string, comment: string, rating: number, positive_feedbacks_count?: number | null, negative_feedbacks_count?: number | null, photos: Array<{ __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null }>, user: { __typename?: 'User', id: string, name: string }, my_feedback?: { __typename?: 'Feedback', id: string, positive?: boolean | null, negative?: boolean | null } | null } };

export const ReviewPartsFragmentDoc = gql`
    fragment ReviewParts on Review {
  id
  comment
  rating
  photos {
    id
    thumbnail
    original
  }
  user {
    id
    name
  }
  positive_feedbacks_count
  negative_feedbacks_count
  my_feedback {
    id
    positive
    negative
  }
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const ReviewsDocument = gql`
    query Reviews($product_id: ID, $shop_id: ID, $rating: Float, $orderBy: [QueryReviewsOrderByOrderByClause!], $first: Int = 15, $page: Int) {
  reviews(
    product_id: $product_id
    shop_id: $shop_id
    rating: $rating
    first: $first
    page: $page
    orderBy: $orderBy
  ) {
    data {
      ...ReviewParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${ReviewPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useReviewsQuery__
 *
 * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.
 * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReviewsQuery({
 *   variables: {
 *      product_id: // value for 'product_id'
 *      shop_id: // value for 'shop_id'
 *      rating: // value for 'rating'
 *      orderBy: // value for 'orderBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useReviewsQuery(baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(ReviewsDocument, options);
      }
export function useReviewsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(ReviewsDocument, options);
        }
export function useReviewsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ReviewsQuery, ReviewsQueryVariables>(ReviewsDocument, options);
        }
export type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;
export type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;
export type ReviewsSuspenseQueryHookResult = ReturnType<typeof useReviewsSuspenseQuery>;
export type ReviewsQueryResult = Apollo.QueryResult<ReviewsQuery, ReviewsQueryVariables>;
export const CreateReviewDocument = gql`
    mutation CreateReview($input: CreateReviewInput!) {
  createReview(input: $input) {
    ...ReviewParts
  }
}
    ${ReviewPartsFragmentDoc}`;
export type CreateReviewMutationFn = Apollo.MutationFunction<CreateReviewMutation, CreateReviewMutationVariables>;

/**
 * __useCreateReviewMutation__
 *
 * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateReviewMutation(baseOptions?: Apollo.MutationHookOptions<CreateReviewMutation, CreateReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReviewMutation, CreateReviewMutationVariables>(CreateReviewDocument, options);
      }
export type CreateReviewMutationHookResult = ReturnType<typeof useCreateReviewMutation>;
export type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;
export type CreateReviewMutationOptions = Apollo.BaseMutationOptions<CreateReviewMutation, CreateReviewMutationVariables>;
export const UpdateReviewDocument = gql`
    mutation UpdateReview($id: ID!, $input: UpdateReviewInput!) {
  updateReview(id: $id, input: $input) {
    ...ReviewParts
  }
}
    ${ReviewPartsFragmentDoc}`;
export type UpdateReviewMutationFn = Apollo.MutationFunction<UpdateReviewMutation, UpdateReviewMutationVariables>;

/**
 * __useUpdateReviewMutation__
 *
 * To run a mutation, you first call `useUpdateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewMutation, { data, loading, error }] = useUpdateReviewMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateReviewMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewMutation, UpdateReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateReviewMutation, UpdateReviewMutationVariables>(UpdateReviewDocument, options);
      }
export type UpdateReviewMutationHookResult = ReturnType<typeof useUpdateReviewMutation>;
export type UpdateReviewMutationResult = Apollo.MutationResult<UpdateReviewMutation>;
export type UpdateReviewMutationOptions = Apollo.BaseMutationOptions<UpdateReviewMutation, UpdateReviewMutationVariables>;