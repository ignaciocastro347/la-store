/* 9e2b387a1da7adf68df4b922a81bf5f3cd3b370d
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type SettingsQueryVariables = Types.Exact<{
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename?: 'Settings', id: string, language: string, options?: { __typename?: 'SettingsOptions', siteTitle?: string | null, siteLink?: string | null, copyrightText?: string | null, externalText?: string | null, siteSubtitle?: string | null, externalLink?: string | null, currency?: string | null, useOtp?: boolean | null, useGoogleMap?: boolean | null, useCashOnDelivery?: boolean | null, useEnableGateway?: boolean | null, StripeCardOnly?: boolean | null, enableTerms?: boolean | null, enableCoupons?: boolean | null, defaultPaymentGateway?: string | null, freeShipping?: boolean | null, freeShippingAmount?: number | null, taxClass?: string | null, shippingClass?: string | null, guestCheckout?: boolean | null, isUnderMaintenance?: boolean | null, isPromoPopUp?: boolean | null, enableReviewPopup?: boolean | null, paymentGateway?: Array<{ __typename?: 'PaymentGateway', title: string, name: string }> | null, deliveryTime?: Array<{ __typename?: 'DeliveryTime', title: string, description: string }> | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, contactDetails?: { __typename?: 'ContactDetails', contact?: string | null, website?: string | null, emailAddress?: string | null, socials?: Array<{ __typename?: 'ShopSocials', icon?: string | null, url?: string | null }> | null, location?: { __typename?: 'Location', lat?: number | null, lng?: number | null, city?: string | null, state?: string | null, country?: string | null, zip?: string | null, formattedAddress?: string | null } | null } | null, seo?: { __typename?: 'SeoSettings', metaTitle?: string | null, metaDescription?: string | null, ogTitle?: string | null, ogDescription?: string | null, twitterHandle?: string | null, twitterCardType?: string | null, metaTags?: string | null, canonicalUrl?: string | null, ogImage?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null } | null, google?: { __typename?: 'GoogleSettings', isEnable?: boolean | null, tagManagerId?: string | null } | null, facebook?: { __typename?: 'FacebookSettings', isEnable?: boolean | null, appId?: string | null, pageId?: string | null } | null, currencyOptions?: { __typename?: 'CurrencyOptions', formation: string, fractions: number } | null, smsEvent?: { __typename?: 'EventSettings', customer?: { __typename?: 'Customer', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, answerQuestion?: boolean | null } | null, vendor?: { __typename?: 'Vendor', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, createReview?: boolean | null, createQuestion?: boolean | null } | null, admin?: { __typename?: 'Admin', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null } | null } | null, emailEvent?: { __typename?: 'EventSettings', customer?: { __typename?: 'Customer', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, answerQuestion?: boolean | null } | null, vendor?: { __typename?: 'Vendor', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, createReview?: boolean | null, createQuestion?: boolean | null } | null, admin?: { __typename?: 'Admin', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null } | null } | null, server_info?: { __typename?: 'ServerInfo', max_execution_time?: string | null, max_input_time?: string | null, memory_limit?: string | null, post_max_size?: number | null, upload_max_filesize?: number | null } | null, maintenance?: { __typename?: 'Maintenance', title?: string | null, aboutUsTitle?: string | null, aboutUsDescription?: string | null, contactUsTitle?: string | null, buttonTitleOne?: string | null, buttonTitleTwo?: string | null, isOverlayColor?: boolean | null, overlayColor?: string | null, overlayColorRange?: string | null, newsLetterTitle?: string | null, newsLetterDescription?: string | null, description?: string | null, start?: string | null, until?: string | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null } | null, promoPopup?: { __typename?: 'PromoPopup', title?: string | null, description?: string | null, popUpDelay?: number | null, popUpExpiredIn?: number | null, isPopUpNotShow?: boolean | null, image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, popUpNotShow?: { __typename?: 'PopUpNotShow', title?: string | null, popUpExpiredIn?: number | null } | null } | null, reviewSystem?: { __typename?: 'ReviewSystem', name?: string | null, value?: string | null } | null } | null } };

export type EventSettingsPartsFragment = { __typename?: 'EventSettings', customer?: { __typename?: 'Customer', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, answerQuestion?: boolean | null } | null, vendor?: { __typename?: 'Vendor', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null, createReview?: boolean | null, createQuestion?: boolean | null } | null, admin?: { __typename?: 'Admin', statusChangeOrder?: boolean | null, refundOrder?: boolean | null, paymentOrder?: boolean | null } | null };

export type SubscribeToNewsletterMutationVariables = Types.Exact<{
  email: Types.Scalars['String']['input'];
}>;


export type SubscribeToNewsletterMutation = { __typename?: 'Mutation', subscribeToNewsletter: boolean };

export type ContactUsMutationVariables = Types.Exact<{
  input: Types.ContactInput;
}>;


export type ContactUsMutation = { __typename?: 'Mutation', contactUs: { __typename?: 'ContactResponse', message: string, success: boolean } };

export const EventSettingsPartsFragmentDoc = gql`
    fragment EventSettingsParts on EventSettings {
  customer {
    statusChangeOrder
    refundOrder
    paymentOrder
    answerQuestion
  }
  vendor {
    statusChangeOrder
    refundOrder
    paymentOrder
    createReview
    createQuestion
  }
  admin {
    statusChangeOrder
    refundOrder
    paymentOrder
  }
}
    `;
export const SettingsDocument = gql`
    query Settings($language: String) {
  settings(language: $language) {
    id
    options {
      siteTitle
      siteLink
      copyrightText
      externalText
      siteSubtitle
      externalLink
      currency
      useOtp
      useGoogleMap
      useCashOnDelivery
      useEnableGateway
      StripeCardOnly
      enableTerms
      enableCoupons
      paymentGateway {
        title
        name
      }
      defaultPaymentGateway
      freeShipping
      freeShippingAmount
      deliveryTime {
        title
        description
      }
      logo {
        id
        thumbnail
        original
      }
      taxClass
      shippingClass
      contactDetails {
        contact
        website
        emailAddress
        socials {
          icon
          url
        }
        location {
          lat
          lng
          city
          state
          country
          zip
          formattedAddress
        }
      }
      seo {
        metaTitle
        metaDescription
        ogTitle
        ogDescription
        ogImage {
          id
          thumbnail
          original
        }
        twitterHandle
        twitterCardType
        metaTags
        canonicalUrl
      }
      google {
        isEnable
        tagManagerId
      }
      facebook {
        isEnable
        appId
        pageId
      }
      currencyOptions {
        formation
        fractions
      }
      guestCheckout
      smsEvent {
        ...EventSettingsParts
      }
      emailEvent {
        ...EventSettingsParts
      }
      server_info {
        max_execution_time
        max_input_time
        memory_limit
        post_max_size
        upload_max_filesize
      }
      isUnderMaintenance
      maintenance {
        title
        image {
          id
          thumbnail
          original
        }
        aboutUsTitle
        aboutUsDescription
        contactUsTitle
        buttonTitleOne
        buttonTitleTwo
        isOverlayColor
        overlayColor
        overlayColorRange
        newsLetterTitle
        newsLetterDescription
        description
        start
        until
      }
      isPromoPopUp
      promoPopup {
        image {
          id
          thumbnail
          original
        }
        title
        description
        popUpDelay
        popUpExpiredIn
        isPopUpNotShow
        popUpNotShow {
          title
          popUpExpiredIn
        }
      }
      enableReviewPopup
      reviewSystem {
        name
        value
      }
    }
    language
  }
}
    ${EventSettingsPartsFragmentDoc}`;

/**
 * __useSettingsQuery__
 *
 * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsQuery({
 *   variables: {
 *      language: // value for 'language'
 *   },
 * });
 */
export function useSettingsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
      }
export function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
        }
export function useSettingsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<SettingsQuery, SettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);
        }
export type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;
export type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;
export type SettingsSuspenseQueryHookResult = ReturnType<typeof useSettingsSuspenseQuery>;
export type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;
export const SubscribeToNewsletterDocument = gql`
    mutation SubscribeToNewsletter($email: String!) {
  subscribeToNewsletter(email: $email)
}
    `;
export type SubscribeToNewsletterMutationFn = Apollo.MutationFunction<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>;

/**
 * __useSubscribeToNewsletterMutation__
 *
 * To run a mutation, you first call `useSubscribeToNewsletterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubscribeToNewsletterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [subscribeToNewsletterMutation, { data, loading, error }] = useSubscribeToNewsletterMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSubscribeToNewsletterMutation(baseOptions?: Apollo.MutationHookOptions<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>(SubscribeToNewsletterDocument, options);
      }
export type SubscribeToNewsletterMutationHookResult = ReturnType<typeof useSubscribeToNewsletterMutation>;
export type SubscribeToNewsletterMutationResult = Apollo.MutationResult<SubscribeToNewsletterMutation>;
export type SubscribeToNewsletterMutationOptions = Apollo.BaseMutationOptions<SubscribeToNewsletterMutation, SubscribeToNewsletterMutationVariables>;
export const ContactUsDocument = gql`
    mutation ContactUs($input: ContactInput!) {
  contactUs(input: $input) {
    message
    success
  }
}
    `;
export type ContactUsMutationFn = Apollo.MutationFunction<ContactUsMutation, ContactUsMutationVariables>;

/**
 * __useContactUsMutation__
 *
 * To run a mutation, you first call `useContactUsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useContactUsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [contactUsMutation, { data, loading, error }] = useContactUsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useContactUsMutation(baseOptions?: Apollo.MutationHookOptions<ContactUsMutation, ContactUsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ContactUsMutation, ContactUsMutationVariables>(ContactUsDocument, options);
      }
export type ContactUsMutationHookResult = ReturnType<typeof useContactUsMutation>;
export type ContactUsMutationResult = Apollo.MutationResult<ContactUsMutation>;
export type ContactUsMutationOptions = Apollo.BaseMutationOptions<ContactUsMutation, ContactUsMutationVariables>;