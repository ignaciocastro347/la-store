/* 1b0d311a66dc69f38cd1e1fa5b8f9b5d99aae55a
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type ShopPartsFragment = { __typename?: 'Shop', id: string, name?: string | null, slug?: string | null, owner_id: number, description?: string | null, orders_count?: number | null, products_count?: number | null, is_active?: boolean | null, created_at?: any | null, distance?: number | null, lat?: number | null, lng?: number | null, owner: { __typename?: 'User', name: string, email: string, profile?: { __typename?: 'Profile', contact?: string | null } | null }, staffs?: Array<{ __typename?: 'User', name: string, email: string }> | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, cover_image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, balance?: { __typename?: 'Balance', admin_commission_rate: number, total_earnings: number, withdrawn_amount: number, current_balance: number, payment_info?: { __typename?: 'PaymentInfo', account?: number | null, name?: string | null, bank?: string | null, email?: string | null } | null } | null, address?: { __typename?: 'UserAddress', street_address?: string | null, country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null };

export type ShopsQueryVariables = Types.Exact<{
  text?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  is_active?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
}>;


export type ShopsQuery = { __typename?: 'Query', shops: { __typename?: 'ShopPaginator', data: Array<{ __typename?: 'Shop', id: string, name?: string | null, slug?: string | null, owner_id: number, description?: string | null, orders_count?: number | null, products_count?: number | null, is_active?: boolean | null, created_at?: any | null, distance?: number | null, lat?: number | null, lng?: number | null, owner: { __typename?: 'User', name: string, email: string, profile?: { __typename?: 'Profile', contact?: string | null } | null }, staffs?: Array<{ __typename?: 'User', name: string, email: string }> | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, cover_image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, balance?: { __typename?: 'Balance', admin_commission_rate: number, total_earnings: number, withdrawn_amount: number, current_balance: number, payment_info?: { __typename?: 'PaymentInfo', account?: number | null, name?: string | null, bank?: string | null, email?: string | null } | null } | null, address?: { __typename?: 'UserAddress', street_address?: string | null, country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export type ShopQueryVariables = Types.Exact<{
  id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
  slug?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type ShopQuery = { __typename?: 'Query', shop?: { __typename?: 'Shop', id: string, name?: string | null, slug?: string | null, owner_id: number, description?: string | null, orders_count?: number | null, products_count?: number | null, is_active?: boolean | null, created_at?: any | null, distance?: number | null, lat?: number | null, lng?: number | null, settings?: { __typename?: 'ShopSettings', website?: string | null, contact?: string | null, socials?: Array<{ __typename?: 'ShopSocials', icon?: string | null, url?: string | null }> | null, location?: { __typename?: 'Location', lat?: number | null, lng?: number | null, formattedAddress?: string | null, city?: string | null, state?: string | null, country?: string | null, zip?: string | null } | null } | null, owner: { __typename?: 'User', name: string, email: string, profile?: { __typename?: 'Profile', contact?: string | null } | null }, staffs?: Array<{ __typename?: 'User', name: string, email: string }> | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, cover_image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, balance?: { __typename?: 'Balance', admin_commission_rate: number, total_earnings: number, withdrawn_amount: number, current_balance: number, payment_info?: { __typename?: 'PaymentInfo', account?: number | null, name?: string | null, bank?: string | null, email?: string | null } | null } | null, address?: { __typename?: 'UserAddress', street_address?: string | null, country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null } | null };

export type NearShopPartsFragment = { __typename?: 'Shop', id: string, name?: string | null, slug?: string | null, distance?: number | null, lat?: number | null, lng?: number | null, description?: string | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, cover_image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, address?: { __typename?: 'UserAddress', street_address?: string | null, country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null };

export type NearShopsQueryVariables = Types.Exact<{
  lat?: Types.InputMaybe<Types.Scalars['String']['input']>;
  lng?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type NearShopsQuery = { __typename?: 'Query', findShopDistance: Array<{ __typename?: 'Shop', id: string, name?: string | null, slug?: string | null, distance?: number | null, lat?: number | null, lng?: number | null, description?: string | null, logo?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, cover_image?: { __typename?: 'Attachment', id?: string | null, thumbnail?: string | null, original?: string | null } | null, address?: { __typename?: 'UserAddress', street_address?: string | null, country?: string | null, city?: string | null, state?: string | null, zip?: string | null } | null }> };

export const ShopPartsFragmentDoc = gql`
    fragment ShopParts on Shop {
  id
  name
  slug
  owner_id
  owner {
    name
    email
    profile {
      contact
    }
  }
  staffs {
    name
    email
  }
  description
  logo {
    id
    thumbnail
    original
  }
  cover_image {
    id
    thumbnail
    original
  }
  orders_count
  products_count
  is_active
  balance {
    admin_commission_rate
    total_earnings
    withdrawn_amount
    current_balance
    payment_info {
      account
      name
      bank
      email
    }
  }
  address {
    street_address
    country
    city
    state
    zip
  }
  created_at
  distance
  lat
  lng
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const NearShopPartsFragmentDoc = gql`
    fragment NearShopParts on Shop {
  id
  name
  slug
  distance
  lat
  lng
  description
  logo {
    id
    thumbnail
    original
  }
  cover_image {
    id
    thumbnail
    original
  }
  address {
    street_address
    country
    city
    state
    zip
  }
}
    `;
export const ShopsDocument = gql`
    query Shops($text: String, $orderBy: String, $sortedBy: String, $first: Int = 10, $page: Int, $is_active: Boolean) {
  shops(
    first: $first
    page: $page
    text: $text
    orderBy: $orderBy
    sortedBy: $sortedBy
    is_active: $is_active
  ) {
    data {
      ...ShopParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${ShopPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useShopsQuery__
 *
 * To run a query within a React component, call `useShopsQuery` and pass it any options that fit your needs.
 * When your component renders, `useShopsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useShopsQuery({
 *   variables: {
 *      text: // value for 'text'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      is_active: // value for 'is_active'
 *   },
 * });
 */
export function useShopsQuery(baseOptions?: Apollo.QueryHookOptions<ShopsQuery, ShopsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ShopsQuery, ShopsQueryVariables>(ShopsDocument, options);
      }
export function useShopsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShopsQuery, ShopsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ShopsQuery, ShopsQueryVariables>(ShopsDocument, options);
        }
export function useShopsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ShopsQuery, ShopsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ShopsQuery, ShopsQueryVariables>(ShopsDocument, options);
        }
export type ShopsQueryHookResult = ReturnType<typeof useShopsQuery>;
export type ShopsLazyQueryHookResult = ReturnType<typeof useShopsLazyQuery>;
export type ShopsSuspenseQueryHookResult = ReturnType<typeof useShopsSuspenseQuery>;
export type ShopsQueryResult = Apollo.QueryResult<ShopsQuery, ShopsQueryVariables>;
export const ShopDocument = gql`
    query Shop($id: ID, $slug: String) {
  shop(id: $id, slug: $slug) {
    ...ShopParts
    settings {
      socials {
        icon
        url
      }
      website
      contact
      location {
        lat
        lng
        formattedAddress
        city
        state
        country
        zip
      }
    }
  }
}
    ${ShopPartsFragmentDoc}`;

/**
 * __useShopQuery__
 *
 * To run a query within a React component, call `useShopQuery` and pass it any options that fit your needs.
 * When your component renders, `useShopQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useShopQuery({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useShopQuery(baseOptions?: Apollo.QueryHookOptions<ShopQuery, ShopQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ShopQuery, ShopQueryVariables>(ShopDocument, options);
      }
export function useShopLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ShopQuery, ShopQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ShopQuery, ShopQueryVariables>(ShopDocument, options);
        }
export function useShopSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ShopQuery, ShopQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ShopQuery, ShopQueryVariables>(ShopDocument, options);
        }
export type ShopQueryHookResult = ReturnType<typeof useShopQuery>;
export type ShopLazyQueryHookResult = ReturnType<typeof useShopLazyQuery>;
export type ShopSuspenseQueryHookResult = ReturnType<typeof useShopSuspenseQuery>;
export type ShopQueryResult = Apollo.QueryResult<ShopQuery, ShopQueryVariables>;
export const NearShopsDocument = gql`
    query NearShops($lat: String, $lng: String) {
  findShopDistance(lat: $lat, lng: $lng) {
    ...NearShopParts
  }
}
    ${NearShopPartsFragmentDoc}`;

/**
 * __useNearShopsQuery__
 *
 * To run a query within a React component, call `useNearShopsQuery` and pass it any options that fit your needs.
 * When your component renders, `useNearShopsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useNearShopsQuery({
 *   variables: {
 *      lat: // value for 'lat'
 *      lng: // value for 'lng'
 *   },
 * });
 */
export function useNearShopsQuery(baseOptions?: Apollo.QueryHookOptions<NearShopsQuery, NearShopsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<NearShopsQuery, NearShopsQueryVariables>(NearShopsDocument, options);
      }
export function useNearShopsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NearShopsQuery, NearShopsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<NearShopsQuery, NearShopsQueryVariables>(NearShopsDocument, options);
        }
export function useNearShopsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<NearShopsQuery, NearShopsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<NearShopsQuery, NearShopsQueryVariables>(NearShopsDocument, options);
        }
export type NearShopsQueryHookResult = ReturnType<typeof useNearShopsQuery>;
export type NearShopsLazyQueryHookResult = ReturnType<typeof useNearShopsLazyQuery>;
export type NearShopsSuspenseQueryHookResult = ReturnType<typeof useNearShopsSuspenseQuery>;
export type NearShopsQueryResult = Apollo.QueryResult<NearShopsQuery, NearShopsQueryVariables>;