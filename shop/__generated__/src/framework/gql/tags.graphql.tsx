/* 9d31d2b160992097b9629652ffde6b2b46c75a98
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type TagPartsFragment = { __typename?: 'Tag', id: string, name: string, slug: string, details?: string | null, icon?: string | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null };

export type TagsQueryVariables = Types.Exact<{
  orderBy?: Types.InputMaybe<Array<Types.QueryTagsOrderByOrderByClause> | Types.QueryTagsOrderByOrderByClause>;
  name?: Types.InputMaybe<Types.Scalars['String']['input']>;
  text?: Types.InputMaybe<Types.Scalars['String']['input']>;
  hasType?: Types.InputMaybe<Types.QueryTagsHasTypeWhereHasConditions>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
}>;


export type TagsQuery = { __typename?: 'Query', tags: { __typename?: 'TagPaginator', data: Array<{ __typename?: 'Tag', id: string, name: string, slug: string, details?: string | null, icon?: string | null, image?: { __typename?: 'Attachment', id?: string | null, original?: string | null, thumbnail?: string | null } | null, type?: { __typename?: 'Type', id: string, name?: string | null, slug?: string | null } | null }> } };

export const TagPartsFragmentDoc = gql`
    fragment TagParts on Tag {
  id
  name
  slug
  details
  image {
    id
    original
    thumbnail
  }
  icon
  type {
    id
    name
    slug
  }
}
    `;
export const TagsDocument = gql`
    query Tags($orderBy: [QueryTagsOrderByOrderByClause!], $name: String, $text: String, $hasType: QueryTagsHasTypeWhereHasConditions, $first: Int = 15, $page: Int, $language: String) {
  tags(
    hasType: $hasType
    orderBy: $orderBy
    name: $name
    first: $first
    page: $page
    text: $text
    language: $language
  ) {
    data {
      ...TagParts
    }
  }
}
    ${TagPartsFragmentDoc}`;

/**
 * __useTagsQuery__
 *
 * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTagsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      name: // value for 'name'
 *      text: // value for 'text'
 *      hasType: // value for 'hasType'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);
      }
export function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);
        }
export function useTagsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<TagsQuery, TagsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);
        }
export type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;
export type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;
export type TagsSuspenseQueryHookResult = ReturnType<typeof useTagsSuspenseQuery>;
export type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;