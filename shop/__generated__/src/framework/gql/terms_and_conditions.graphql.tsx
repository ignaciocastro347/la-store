/* fe28312c05eb405c245172dc774849c56428679a
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type TermsAndConditionsPartsFragment = { __typename?: 'TermsAndConditions', id: string, title: string, slug?: string | null, description?: string | null, type?: string | null, issued_by?: string | null, is_approved?: boolean | null, language?: string | null, translated_languages?: Array<string> | null, shop_id?: string | null };

export type TermsAndConditionsQueryVariables = Types.Exact<{
  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
  orderBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  sortedBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  language?: Types.InputMaybe<Types.Scalars['String']['input']>;
  searchJoin?: Types.InputMaybe<Types.Scalars['String']['input']>;
  type?: Types.InputMaybe<Types.Scalars['String']['input']>;
  issued_by?: Types.InputMaybe<Types.Scalars['String']['input']>;
  is_approved?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
  first?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  shop_id?: Types.InputMaybe<Types.Scalars['ID']['input']>;
}>;


export type TermsAndConditionsQuery = { __typename?: 'Query', termsConditions: { __typename?: 'TermsAndConditionPaginator', data: Array<{ __typename?: 'TermsAndConditions', id: string, title: string, slug?: string | null, description?: string | null, type?: string | null, issued_by?: string | null, is_approved?: boolean | null, language?: string | null, translated_languages?: Array<string> | null, shop_id?: string | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number } } };

export type PaginatorPartsFragment = { __typename?: 'PaginatorInfo', count: number, currentPage: number, firstItem: number, hasMorePages: boolean, lastItem: number, lastPage: number, perPage: number, total: number };

export const TermsAndConditionsPartsFragmentDoc = gql`
    fragment TermsAndConditionsParts on TermsAndConditions {
  id
  title
  slug
  description
  type
  issued_by
  is_approved
  language
  translated_languages
  shop_id
}
    `;
export const PaginatorPartsFragmentDoc = gql`
    fragment PaginatorParts on PaginatorInfo {
  count
  currentPage
  firstItem
  hasMorePages
  lastItem
  lastPage
  perPage
  total
}
    `;
export const TermsAndConditionsDocument = gql`
    query TermsAndConditions($search: String, $orderBy: String, $sortedBy: String, $language: String, $searchJoin: String, $type: String, $issued_by: String, $is_approved: Boolean, $first: Int = 15, $page: Int, $shop_id: ID) {
  termsConditions(
    search: $search
    orderBy: $orderBy
    sortedBy: $sortedBy
    language: $language
    searchJoin: $searchJoin
    type: $type
    issued_by: $issued_by
    shop_id: $shop_id
    first: $first
    is_approved: $is_approved
    page: $page
  ) {
    data {
      ...TermsAndConditionsParts
    }
    paginatorInfo {
      ...PaginatorParts
    }
  }
}
    ${TermsAndConditionsPartsFragmentDoc}
${PaginatorPartsFragmentDoc}`;

/**
 * __useTermsAndConditionsQuery__
 *
 * To run a query within a React component, call `useTermsAndConditionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useTermsAndConditionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTermsAndConditionsQuery({
 *   variables: {
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      sortedBy: // value for 'sortedBy'
 *      language: // value for 'language'
 *      searchJoin: // value for 'searchJoin'
 *      type: // value for 'type'
 *      issued_by: // value for 'issued_by'
 *      is_approved: // value for 'is_approved'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      shop_id: // value for 'shop_id'
 *   },
 * });
 */
export function useTermsAndConditionsQuery(baseOptions?: Apollo.QueryHookOptions<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>(TermsAndConditionsDocument, options);
      }
export function useTermsAndConditionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>(TermsAndConditionsDocument, options);
        }
export function useTermsAndConditionsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>(TermsAndConditionsDocument, options);
        }
export type TermsAndConditionsQueryHookResult = ReturnType<typeof useTermsAndConditionsQuery>;
export type TermsAndConditionsLazyQueryHookResult = ReturnType<typeof useTermsAndConditionsLazyQuery>;
export type TermsAndConditionsSuspenseQueryHookResult = ReturnType<typeof useTermsAndConditionsSuspenseQuery>;
export type TermsAndConditionsQueryResult = Apollo.QueryResult<TermsAndConditionsQuery, TermsAndConditionsQueryVariables>;